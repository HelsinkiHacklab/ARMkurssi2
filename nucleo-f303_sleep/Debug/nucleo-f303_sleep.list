
nucleo-f303_sleep.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e04  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08005fa4  08005fa4  00015fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006398  08006398  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006398  08006398  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006398  08006398  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006398  08006398  00016398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080063a0  080063a0  000163a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080063a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000070  08006418  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08006418  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013bbd  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032d1  00000000  00000000  00033c5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  00036f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd8  00000000  00000000  00037d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000259a6  00000000  00000000  00038a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a62  00000000  00000000  0005e3ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1016  00000000  00000000  0006ee10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013fe26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004468  00000000  00000000  0013fe7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005f8c 	.word	0x08005f8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005f8c 	.word	0x08005f8c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b08a      	sub	sp, #40	; 0x28
 8000294:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000296:	f107 0314 	add.w	r3, r7, #20
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
 80002a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002a6:	4b39      	ldr	r3, [pc, #228]	; (800038c <MX_GPIO_Init+0xfc>)
 80002a8:	695b      	ldr	r3, [r3, #20]
 80002aa:	4a38      	ldr	r2, [pc, #224]	; (800038c <MX_GPIO_Init+0xfc>)
 80002ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002b0:	6153      	str	r3, [r2, #20]
 80002b2:	4b36      	ldr	r3, [pc, #216]	; (800038c <MX_GPIO_Init+0xfc>)
 80002b4:	695b      	ldr	r3, [r3, #20]
 80002b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80002ba:	613b      	str	r3, [r7, #16]
 80002bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002be:	4b33      	ldr	r3, [pc, #204]	; (800038c <MX_GPIO_Init+0xfc>)
 80002c0:	695b      	ldr	r3, [r3, #20]
 80002c2:	4a32      	ldr	r2, [pc, #200]	; (800038c <MX_GPIO_Init+0xfc>)
 80002c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002c8:	6153      	str	r3, [r2, #20]
 80002ca:	4b30      	ldr	r3, [pc, #192]	; (800038c <MX_GPIO_Init+0xfc>)
 80002cc:	695b      	ldr	r3, [r3, #20]
 80002ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d6:	4b2d      	ldr	r3, [pc, #180]	; (800038c <MX_GPIO_Init+0xfc>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	4a2c      	ldr	r2, [pc, #176]	; (800038c <MX_GPIO_Init+0xfc>)
 80002dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002e0:	6153      	str	r3, [r2, #20]
 80002e2:	4b2a      	ldr	r3, [pc, #168]	; (800038c <MX_GPIO_Init+0xfc>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ea:	60bb      	str	r3, [r7, #8]
 80002ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ee:	4b27      	ldr	r3, [pc, #156]	; (800038c <MX_GPIO_Init+0xfc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	4a26      	ldr	r2, [pc, #152]	; (800038c <MX_GPIO_Init+0xfc>)
 80002f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002f8:	6153      	str	r3, [r2, #20]
 80002fa:	4b24      	ldr	r3, [pc, #144]	; (800038c <MX_GPIO_Init+0xfc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000302:	607b      	str	r3, [r7, #4]
 8000304:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000306:	2200      	movs	r2, #0
 8000308:	2120      	movs	r1, #32
 800030a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800030e:	f001 ff19 	bl	8002144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000312:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000318:	4b1d      	ldr	r3, [pc, #116]	; (8000390 <MX_GPIO_Init+0x100>)
 800031a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031c:	2300      	movs	r3, #0
 800031e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000320:	f107 0314 	add.w	r3, r7, #20
 8000324:	4619      	mov	r1, r3
 8000326:	481b      	ldr	r0, [pc, #108]	; (8000394 <MX_GPIO_Init+0x104>)
 8000328:	f001 fd82 	bl	8001e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800032c:	2301      	movs	r3, #1
 800032e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000330:	4b19      	ldr	r3, [pc, #100]	; (8000398 <MX_GPIO_Init+0x108>)
 8000332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000334:	2302      	movs	r3, #2
 8000336:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000338:	f107 0314 	add.w	r3, r7, #20
 800033c:	4619      	mov	r1, r3
 800033e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000342:	f001 fd75 	bl	8001e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000346:	2320      	movs	r3, #32
 8000348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800034a:	2301      	movs	r3, #1
 800034c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034e:	2300      	movs	r3, #0
 8000350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000352:	2300      	movs	r3, #0
 8000354:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000356:	f107 0314 	add.w	r3, r7, #20
 800035a:	4619      	mov	r1, r3
 800035c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000360:	f001 fd66 	bl	8001e30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000364:	2200      	movs	r2, #0
 8000366:	2100      	movs	r1, #0
 8000368:	2006      	movs	r0, #6
 800036a:	f001 fca6 	bl	8001cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800036e:	2006      	movs	r0, #6
 8000370:	f001 fcbf 	bl	8001cf2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000374:	2200      	movs	r2, #0
 8000376:	2100      	movs	r1, #0
 8000378:	2028      	movs	r0, #40	; 0x28
 800037a:	f001 fc9e 	bl	8001cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800037e:	2028      	movs	r0, #40	; 0x28
 8000380:	f001 fcb7 	bl	8001cf2 <HAL_NVIC_EnableIRQ>

}
 8000384:	bf00      	nop
 8000386:	3728      	adds	r7, #40	; 0x28
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	40021000 	.word	0x40021000
 8000390:	10210000 	.word	0x10210000
 8000394:	48000800 	.word	0x48000800
 8000398:	10110000 	.word	0x10110000

0800039c <_ZN7CLIMenu8menuItemC1EcPcPFvcE>:
namespace CLIMenu {

typedef void menuItemHandler(char _selector );

struct menuItem {
	menuItem( char _selector, char *_prompt, menuItemHandler *_handler ) : selector(_selector), prompt(_prompt), handler(_handler) {};
 800039c:	b480      	push	{r7}
 800039e:	b085      	sub	sp, #20
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	60f8      	str	r0, [r7, #12]
 80003a4:	607a      	str	r2, [r7, #4]
 80003a6:	603b      	str	r3, [r7, #0]
 80003a8:	460b      	mov	r3, r1
 80003aa:	72fb      	strb	r3, [r7, #11]
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	7afa      	ldrb	r2, [r7, #11]
 80003b0:	701a      	strb	r2, [r3, #0]
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	687a      	ldr	r2, [r7, #4]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	683a      	ldr	r2, [r7, #0]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	4618      	mov	r0, r3
 80003c2:	3714      	adds	r7, #20
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr

080003cc <_read>:
/* USER CODE BEGIN 0 */

extern "C" {
#include  <sys/unistd.h> // STDOUT_FILENO, STDERR_FILENO

int _read(int fd, char *ptr, int len) {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	60b9      	str	r1, [r7, #8]
 80003d6:	607a      	str	r2, [r7, #4]
	if (fd == STDIN_FILENO ) {
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d10d      	bne.n	80003fa <_read+0x2e>
		HAL_UART_Receive(&huart2, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80003de:	f04f 33ff 	mov.w	r3, #4294967295
 80003e2:	2201      	movs	r2, #1
 80003e4:	68b9      	ldr	r1, [r7, #8]
 80003e6:	4807      	ldr	r0, [pc, #28]	; (8000404 <_read+0x38>)
 80003e8:	f003 fdcc 	bl	8003f84 <HAL_UART_Receive>
	    HAL_UART_Transmit(&huart2, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80003ec:	f04f 33ff 	mov.w	r3, #4294967295
 80003f0:	2201      	movs	r2, #1
 80003f2:	68b9      	ldr	r1, [r7, #8]
 80003f4:	4803      	ldr	r0, [pc, #12]	; (8000404 <_read+0x38>)
 80003f6:	f003 fd31 	bl	8003e5c <HAL_UART_Transmit>
	}
	return 1;
 80003fa:	2301      	movs	r3, #1
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	3710      	adds	r7, #16
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	200000ac 	.word	0x200000ac

08000408 <_write>:

int _write(int fd, char* ptr, int len) {
 8000408:	b580      	push	{r7, lr}
 800040a:	b086      	sub	sp, #24
 800040c:	af00      	add	r7, sp, #0
 800040e:	60f8      	str	r0, [r7, #12]
 8000410:	60b9      	str	r1, [r7, #8]
 8000412:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	2b01      	cmp	r3, #1
 8000418:	d002      	beq.n	8000420 <_write+0x18>
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	2b02      	cmp	r3, #2
 800041e:	d110      	bne.n	8000442 <_write+0x3a>
    hstatus = HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	b29a      	uxth	r2, r3
 8000424:	f04f 33ff 	mov.w	r3, #4294967295
 8000428:	68b9      	ldr	r1, [r7, #8]
 800042a:	480b      	ldr	r0, [pc, #44]	; (8000458 <_write+0x50>)
 800042c:	f003 fd16 	bl	8003e5c <HAL_UART_Transmit>
 8000430:	4603      	mov	r3, r0
 8000432:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000434:	7dfb      	ldrb	r3, [r7, #23]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d101      	bne.n	800043e <_write+0x36>
      return len;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	e008      	b.n	8000450 <_write+0x48>
    else
      return EIO;
 800043e:	2305      	movs	r3, #5
 8000440:	e006      	b.n	8000450 <_write+0x48>
  }
  errno = EBADF;
 8000442:	f004 fd15 	bl	8004e70 <__errno>
 8000446:	4603      	mov	r3, r0
 8000448:	2209      	movs	r2, #9
 800044a:	601a      	str	r2, [r3, #0]
  return -1;
 800044c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000450:	4618      	mov	r0, r3
 8000452:	3718      	adds	r7, #24
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	200000ac 	.word	0x200000ac

0800045c <_Z23disableAllWakeupSourcesv>:
	{'4', "Disable all wakeup sources. Restart by reset only", wakeupSourceHandler}
};

// Kielletään keskeytykset kaikista demossa käytetyistä herätelähteistä
// Kukin heräte aktivoidaan erikseen aina kun siirrytään virransäästötilaan ja herätystapa valitaan.
void disableAllWakeupSources() {
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8000460:	4809      	ldr	r0, [pc, #36]	; (8000488 <_Z23disableAllWakeupSourcesv+0x2c>)
 8000462:	f003 fc27 	bl	8003cb4 <HAL_RTCEx_DeactivateWakeUpTimer>
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000466:	2006      	movs	r0, #6
 8000468:	f001 fc51 	bl	8001d0e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800046c:	2028      	movs	r0, #40	; 0x28
 800046e:	f001 fc4e 	bl	8001d0e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(RTC_WKUP_IRQn);
 8000472:	2003      	movs	r0, #3
 8000474:	f001 fc4b 	bl	8001d0e <HAL_NVIC_DisableIRQ>
	// nollataan wakeup-flag joka RTC on asettanut.
	// Tämä pitää nollata itse
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000478:	4b04      	ldr	r3, [pc, #16]	; (800048c <_Z23disableAllWakeupSourcesv+0x30>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a03      	ldr	r2, [pc, #12]	; (800048c <_Z23disableAllWakeupSourcesv+0x30>)
 800047e:	f043 0304 	orr.w	r3, r3, #4
 8000482:	6013      	str	r3, [r2, #0]
}
 8000484:	bf00      	nop
 8000486:	bd80      	pop	{r7, pc}
 8000488:	2000008c 	.word	0x2000008c
 800048c:	40007000 	.word	0x40007000

08000490 <_Z12sleepHandlerc>:

// Sleep Mode: CPU core pysähtyy. Muisti ja rekisterit säilyvät
// Osa oheislaitteista säilyy aktiivisina ja ne voivat herättää systeemin
// Low Power regulator: oheislaitteet toimivat alennetulla kellotaajuudella
void sleepHandler( char _selector ) {
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	71fb      	strb	r3, [r7, #7]
	wakeupMenu.run( false );
 800049a:	2100      	movs	r1, #0
 800049c:	4810      	ldr	r0, [pc, #64]	; (80004e0 <_Z12sleepHandlerc+0x50>)
 800049e:	f000 fa7f 	bl	80009a0 <_ZN7CLIMenu4menu3runEb>
	printf("Entering Sleep mode now, Good Night!\r\n");
 80004a2:	4810      	ldr	r0, [pc, #64]	; (80004e4 <_Z12sleepHandlerc+0x54>)
 80004a4:	f005 f84c 	bl	8005540 <puts>
	HAL_Delay(5);
 80004a8:	2005      	movs	r0, #5
 80004aa:	f001 fac3 	bl	8001a34 <HAL_Delay>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2120      	movs	r1, #32
 80004b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b6:	f001 fe45 	bl	8002144 <HAL_GPIO_WritePin>
	HAL_SuspendTick();
 80004ba:	f001 fadf 	bl	8001a7c <HAL_SuspendTick>
	HAL_PWR_EnterSLEEPMode( PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI );
 80004be:	2101      	movs	r1, #1
 80004c0:	2001      	movs	r0, #1
 80004c2:	f001 fe8b 	bl	80021dc <HAL_PWR_EnterSLEEPMode>
	disableAllWakeupSources();
 80004c6:	f7ff ffc9 	bl	800045c <_Z23disableAllWakeupSourcesv>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80004ca:	2201      	movs	r2, #1
 80004cc:	2120      	movs	r1, #32
 80004ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d2:	f001 fe37 	bl	8002144 <HAL_GPIO_WritePin>
}
 80004d6:	bf00      	nop
 80004d8:	3708      	adds	r7, #8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	20000144 	.word	0x20000144
 80004e4:	08005fa4 	.word	0x08005fa4

080004e8 <_Z11stopHandlerc>:

// Stop Mode: CPU core pysähtyy. Muisti ja rekisterit säilyvät
// Useimmat oheislaitteet pysähtyvät
// Reaaliaikakello on mahdollista pysäyttää virran säästämiseksi
void stopHandler( char _selector ) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]
	wakeupMenu.run( false );
 80004f2:	2100      	movs	r1, #0
 80004f4:	4811      	ldr	r0, [pc, #68]	; (800053c <_Z11stopHandlerc+0x54>)
 80004f6:	f000 fa53 	bl	80009a0 <_ZN7CLIMenu4menu3runEb>
	printf("Entering Stop mode now, Good Night!\r\n");
 80004fa:	4811      	ldr	r0, [pc, #68]	; (8000540 <_Z11stopHandlerc+0x58>)
 80004fc:	f005 f820 	bl	8005540 <puts>
	HAL_Delay(5);
 8000500:	2005      	movs	r0, #5
 8000502:	f001 fa97 	bl	8001a34 <HAL_Delay>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	2120      	movs	r1, #32
 800050a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050e:	f001 fe19 	bl	8002144 <HAL_GPIO_WritePin>
	HAL_SuspendTick();
 8000512:	f001 fab3 	bl	8001a7c <HAL_SuspendTick>
	HAL_PWR_EnterSTOPMode( PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI );
 8000516:	2101      	movs	r1, #1
 8000518:	2001      	movs	r0, #1
 800051a:	f001 fe7b 	bl	8002214 <HAL_PWR_EnterSTOPMode>
	SystemClock_Config();
 800051e:	f000 f8b3 	bl	8000688 <_Z18SystemClock_Configv>
	disableAllWakeupSources();
 8000522:	f7ff ff9b 	bl	800045c <_Z23disableAllWakeupSourcesv>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000526:	2201      	movs	r2, #1
 8000528:	2120      	movs	r1, #32
 800052a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052e:	f001 fe09 	bl	8002144 <HAL_GPIO_WritePin>
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000144 	.word	0x20000144
 8000540:	08005fcc 	.word	0x08005fcc

08000544 <_Z14standbyHandlerc>:

// Standby Mode: CPU Core pysähtyy, oheislaiteiden kellot pysähtyvät
// Muisti ja rekisterit tuhoutuvat.
// Reaaliaikakello pyörii.
void standbyHandler( char _selector ) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	wakeupMenu.run( false );
 800054e:	2100      	movs	r1, #0
 8000550:	480b      	ldr	r0, [pc, #44]	; (8000580 <_Z14standbyHandlerc+0x3c>)
 8000552:	f000 fa25 	bl	80009a0 <_ZN7CLIMenu4menu3runEb>
	printf("Entering Standby mode now, Farewell and see you in the next life!\r\n");
 8000556:	480b      	ldr	r0, [pc, #44]	; (8000584 <_Z14standbyHandlerc+0x40>)
 8000558:	f004 fff2 	bl	8005540 <puts>
	HAL_Delay(5);
 800055c:	2005      	movs	r0, #5
 800055e:	f001 fa69 	bl	8001a34 <HAL_Delay>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	2120      	movs	r1, #32
 8000566:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056a:	f001 fdeb 	bl	8002144 <HAL_GPIO_WritePin>
	HAL_SuspendTick();
 800056e:	f001 fa85 	bl	8001a7c <HAL_SuspendTick>
	HAL_PWR_EnterSTANDBYMode();
 8000572:	f001 fe83 	bl	800227c <HAL_PWR_EnterSTANDBYMode>
}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000144 	.word	0x20000144
 8000584:	08005ff4 	.word	0x08005ff4

08000588 <_Z19wakeupSourceHandlerc>:

void wakeupSourceHandler( char _selector ) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
	switch ( _selector ) {
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	2b33      	cmp	r3, #51	; 0x33
 8000596:	d00e      	beq.n	80005b6 <_Z19wakeupSourceHandlerc+0x2e>
 8000598:	2b33      	cmp	r3, #51	; 0x33
 800059a:	dc18      	bgt.n	80005ce <_Z19wakeupSourceHandlerc+0x46>
 800059c:	2b31      	cmp	r3, #49	; 0x31
 800059e:	d002      	beq.n	80005a6 <_Z19wakeupSourceHandlerc+0x1e>
 80005a0:	2b32      	cmp	r3, #50	; 0x32
 80005a2:	d004      	beq.n	80005ae <_Z19wakeupSourceHandlerc+0x26>
 80005a4:	e013      	b.n	80005ce <_Z19wakeupSourceHandlerc+0x46>
	case ( '1' ): {
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005a6:	2028      	movs	r0, #40	; 0x28
 80005a8:	f001 fba3 	bl	8001cf2 <HAL_NVIC_EnableIRQ>
		break;
 80005ac:	e012      	b.n	80005d4 <_Z19wakeupSourceHandlerc+0x4c>
	}
	case ( '2' ): {
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005ae:	2006      	movs	r0, #6
 80005b0:	f001 fb9f 	bl	8001cf2 <HAL_NVIC_EnableIRQ>
		break;
 80005b4:	e00e      	b.n	80005d4 <_Z19wakeupSourceHandlerc+0x4c>
	case ( '3' ): {
		// Systeemi herää automaattisesti reaaliaikakellon keskeytyksestä.
		// Muuttuja sleepTime määrää nukkumisajan millisekunteina
#define RTC_CLOCK_FREQ 32768
#define RTC_CLOCK_DIVIDER 16
		uint32_t sleepTime = ( ( (uint32_t) 5000 ) * ( RTC_CLOCK_FREQ / RTC_CLOCK_DIVIDER ) ) / 1000;
 80005b6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80005ba:	60fb      	str	r3, [r7, #12]
		HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, sleepTime, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 80005bc:	2200      	movs	r2, #0
 80005be:	68f9      	ldr	r1, [r7, #12]
 80005c0:	4806      	ldr	r0, [pc, #24]	; (80005dc <_Z19wakeupSourceHandlerc+0x54>)
 80005c2:	f003 fac3 	bl	8003b4c <HAL_RTCEx_SetWakeUpTimer_IT>
		HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80005c6:	2003      	movs	r0, #3
 80005c8:	f001 fb93 	bl	8001cf2 <HAL_NVIC_EnableIRQ>
		break;
 80005cc:	e002      	b.n	80005d4 <_Z19wakeupSourceHandlerc+0x4c>
	}
	default:
		disableAllWakeupSources();
 80005ce:	f7ff ff45 	bl	800045c <_Z23disableAllWakeupSourcesv>
	}
}
 80005d2:	bf00      	nop
 80005d4:	bf00      	nop
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	2000008c 	.word	0x2000008c

080005e0 <main>:


int main(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0

	uint8_t command;

	HAL_Init();
 80005e6:	f001 f9bf 	bl	8001968 <HAL_Init>

	SystemClock_Config();
 80005ea:	f000 f84d 	bl	8000688 <_Z18SystemClock_Configv>

	MX_GPIO_Init();
 80005ee:	f7ff fe4f 	bl	8000290 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005f2:	f001 f915 	bl	8001820 <MX_USART2_UART_Init>
	MX_RTC_Init();
 80005f6:	f000 ff9f 	bl	8001538 <MX_RTC_Init>

	// Estetään aluksi kaikki konfiguroidut herätekeskeytykset
	// Halutut kytketään päälle myöhemmin
	disableAllWakeupSources();
 80005fa:	f7ff ff2f 	bl	800045c <_Z23disableAllWakeupSourcesv>

	for ( uint8_t i=0; i<NUM_MAINMENUITEMS; i++ ) {
 80005fe:	2300      	movs	r3, #0
 8000600:	71fb      	strb	r3, [r7, #7]
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	2b02      	cmp	r3, #2
 8000606:	d80e      	bhi.n	8000626 <main+0x46>
		mainMenu.addItem( &mainMenuItems[i] );
 8000608:	79fa      	ldrb	r2, [r7, #7]
 800060a:	4613      	mov	r3, r2
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	4413      	add	r3, r2
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	4a18      	ldr	r2, [pc, #96]	; (8000674 <main+0x94>)
 8000614:	4413      	add	r3, r2
 8000616:	4619      	mov	r1, r3
 8000618:	4817      	ldr	r0, [pc, #92]	; (8000678 <main+0x98>)
 800061a:	f000 f9b1 	bl	8000980 <_ZN7CLIMenu4menu7addItemEPNS_8menuItemE>
	for ( uint8_t i=0; i<NUM_MAINMENUITEMS; i++ ) {
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	3301      	adds	r3, #1
 8000622:	71fb      	strb	r3, [r7, #7]
 8000624:	e7ed      	b.n	8000602 <main+0x22>
	}

	for ( uint8_t i=0; i<NUM_WKUPMENUITEMS; i++ ) {
 8000626:	2300      	movs	r3, #0
 8000628:	71bb      	strb	r3, [r7, #6]
 800062a:	79bb      	ldrb	r3, [r7, #6]
 800062c:	2b03      	cmp	r3, #3
 800062e:	d80e      	bhi.n	800064e <main+0x6e>
		wakeupMenu.addItem( &wkupMenuItems[i] );
 8000630:	79ba      	ldrb	r2, [r7, #6]
 8000632:	4613      	mov	r3, r2
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	4413      	add	r3, r2
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	4a10      	ldr	r2, [pc, #64]	; (800067c <main+0x9c>)
 800063c:	4413      	add	r3, r2
 800063e:	4619      	mov	r1, r3
 8000640:	480f      	ldr	r0, [pc, #60]	; (8000680 <main+0xa0>)
 8000642:	f000 f99d 	bl	8000980 <_ZN7CLIMenu4menu7addItemEPNS_8menuItemE>
	for ( uint8_t i=0; i<NUM_WKUPMENUITEMS; i++ ) {
 8000646:	79bb      	ldrb	r3, [r7, #6]
 8000648:	3301      	adds	r3, #1
 800064a:	71bb      	strb	r3, [r7, #6]
 800064c:	e7ed      	b.n	800062a <main+0x4a>
	}

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800064e:	2201      	movs	r2, #1
 8000650:	2120      	movs	r1, #32
 8000652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000656:	f001 fd75 	bl	8002144 <HAL_GPIO_WritePin>

	printf("\r\nARM Low Power demo\r\n\r\n");
 800065a:	480a      	ldr	r0, [pc, #40]	; (8000684 <main+0xa4>)
 800065c:	f004 ff70 	bl	8005540 <puts>
	mainMenu.run( true );
 8000660:	2101      	movs	r1, #1
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <main+0x98>)
 8000664:	f000 f99c 	bl	80009a0 <_ZN7CLIMenu4menu3runEb>

}
 8000668:	2300      	movs	r3, #0
 800066a:	4618      	mov	r0, r3
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000158 	.word	0x20000158
 8000678:	20000130 	.word	0x20000130
 800067c:	2000017c 	.word	0x2000017c
 8000680:	20000144 	.word	0x20000144
 8000684:	08006038 	.word	0x08006038

08000688 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b0a6      	sub	sp, #152	; 0x98
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000692:	2228      	movs	r2, #40	; 0x28
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f004 fe1a 	bl	80052d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2258      	movs	r2, #88	; 0x58
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f004 fe0c 	bl	80052d0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006b8:	f001 fd80 	bl	80021bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006bc:	4b2f      	ldr	r3, [pc, #188]	; (800077c <_Z18SystemClock_Configv+0xf4>)
 80006be:	6a1b      	ldr	r3, [r3, #32]
 80006c0:	4a2e      	ldr	r2, [pc, #184]	; (800077c <_Z18SystemClock_Configv+0xf4>)
 80006c2:	f023 0318 	bic.w	r3, r3, #24
 80006c6:	6213      	str	r3, [r2, #32]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80006c8:	2306      	movs	r3, #6
 80006ca:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006cc:	2301      	movs	r3, #1
 80006ce:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d0:	2301      	movs	r3, #1
 80006d2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d4:	2310      	movs	r3, #16
 80006d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006fa:	4618      	mov	r0, r3
 80006fc:	f001 fdd6 	bl	80022ac <HAL_RCC_OscConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	bf14      	ite	ne
 8000706:	2301      	movne	r3, #1
 8000708:	2300      	moveq	r3, #0
 800070a:	b2db      	uxtb	r3, r3
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8000710:	f000 f838 	bl	8000784 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	230f      	movs	r3, #15
 8000716:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000718:	2302      	movs	r3, #2
 800071a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000724:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800072e:	2102      	movs	r1, #2
 8000730:	4618      	mov	r0, r3
 8000732:	f002 fcd1 	bl	80030d8 <HAL_RCC_ClockConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	bf14      	ite	ne
 800073c:	2301      	movne	r3, #1
 800073e:	2300      	moveq	r3, #0
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 8000746:	f000 f81d 	bl	8000784 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <_Z18SystemClock_Configv+0xf8>)
 800074c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000752:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000756:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	4618      	mov	r0, r3
 800075c:	f002 fef2 	bl	8003544 <HAL_RCCEx_PeriphCLKConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	bf14      	ite	ne
 8000766:	2301      	movne	r3, #1
 8000768:	2300      	moveq	r3, #0
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <_Z18SystemClock_Configv+0xec>
  {
    Error_Handler();
 8000770:	f000 f808 	bl	8000784 <Error_Handler>
  }
}
 8000774:	bf00      	nop
 8000776:	3798      	adds	r7, #152	; 0x98
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40021000 	.word	0x40021000
 8000780:	00010002 	.word	0x00010002

08000784 <Error_Handler>:


void Error_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000788:	b672      	cpsid	i
}
 800078a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078c:	e7fe      	b.n	800078c <Error_Handler+0x8>
	...

08000790 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d13d      	bne.n	800081c <_Z41__static_initialization_and_destruction_0ii+0x8c>
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d138      	bne.n	800081c <_Z41__static_initialization_and_destruction_0ii+0x8c>
menu mainMenu("Sleep demo menu----------------------");
 80007aa:	4925      	ldr	r1, [pc, #148]	; (8000840 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80007ac:	4825      	ldr	r0, [pc, #148]	; (8000844 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80007ae:	f000 f8ab 	bl	8000908 <_ZN7CLIMenu4menuC1EPc>
menu wakeupMenu("Select wakeup source signal--------");
 80007b2:	4925      	ldr	r1, [pc, #148]	; (8000848 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80007b4:	4825      	ldr	r0, [pc, #148]	; (800084c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80007b6:	f000 f8a7 	bl	8000908 <_ZN7CLIMenu4menuC1EPc>
};
 80007ba:	4c25      	ldr	r4, [pc, #148]	; (8000850 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80007bc:	4b25      	ldr	r3, [pc, #148]	; (8000854 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80007be:	4a26      	ldr	r2, [pc, #152]	; (8000858 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80007c0:	2131      	movs	r1, #49	; 0x31
 80007c2:	4620      	mov	r0, r4
 80007c4:	f7ff fdea 	bl	800039c <_ZN7CLIMenu8menuItemC1EcPcPFvcE>
 80007c8:	340c      	adds	r4, #12
 80007ca:	4b24      	ldr	r3, [pc, #144]	; (800085c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 80007cc:	4a24      	ldr	r2, [pc, #144]	; (8000860 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80007ce:	2132      	movs	r1, #50	; 0x32
 80007d0:	4620      	mov	r0, r4
 80007d2:	f7ff fde3 	bl	800039c <_ZN7CLIMenu8menuItemC1EcPcPFvcE>
 80007d6:	f104 000c 	add.w	r0, r4, #12
 80007da:	4b22      	ldr	r3, [pc, #136]	; (8000864 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80007dc:	4a22      	ldr	r2, [pc, #136]	; (8000868 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 80007de:	2133      	movs	r1, #51	; 0x33
 80007e0:	f7ff fddc 	bl	800039c <_ZN7CLIMenu8menuItemC1EcPcPFvcE>
};
 80007e4:	4c21      	ldr	r4, [pc, #132]	; (800086c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80007e6:	4b22      	ldr	r3, [pc, #136]	; (8000870 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 80007e8:	4a22      	ldr	r2, [pc, #136]	; (8000874 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 80007ea:	2131      	movs	r1, #49	; 0x31
 80007ec:	4620      	mov	r0, r4
 80007ee:	f7ff fdd5 	bl	800039c <_ZN7CLIMenu8menuItemC1EcPcPFvcE>
 80007f2:	340c      	adds	r4, #12
 80007f4:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 80007f6:	4a20      	ldr	r2, [pc, #128]	; (8000878 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 80007f8:	2132      	movs	r1, #50	; 0x32
 80007fa:	4620      	mov	r0, r4
 80007fc:	f7ff fdce 	bl	800039c <_ZN7CLIMenu8menuItemC1EcPcPFvcE>
 8000800:	340c      	adds	r4, #12
 8000802:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8000804:	4a1d      	ldr	r2, [pc, #116]	; (800087c <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8000806:	2133      	movs	r1, #51	; 0x33
 8000808:	4620      	mov	r0, r4
 800080a:	f7ff fdc7 	bl	800039c <_ZN7CLIMenu8menuItemC1EcPcPFvcE>
 800080e:	f104 000c 	add.w	r0, r4, #12
 8000812:	4b17      	ldr	r3, [pc, #92]	; (8000870 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8000814:	4a1a      	ldr	r2, [pc, #104]	; (8000880 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8000816:	2134      	movs	r1, #52	; 0x34
 8000818:	f7ff fdc0 	bl	800039c <_ZN7CLIMenu8menuItemC1EcPcPFvcE>
menuItem wkupMenuItems[NUM_WKUPMENUITEMS] =
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d10a      	bne.n	8000838 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000828:	4293      	cmp	r3, r2
 800082a:	d105      	bne.n	8000838 <_Z41__static_initialization_and_destruction_0ii+0xa8>
menu wakeupMenu("Select wakeup source signal--------");
 800082c:	4807      	ldr	r0, [pc, #28]	; (800084c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800082e:	f000 f883 	bl	8000938 <_ZN7CLIMenu4menuD1Ev>
menu mainMenu("Sleep demo menu----------------------");
 8000832:	4804      	ldr	r0, [pc, #16]	; (8000844 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8000834:	f000 f880 	bl	8000938 <_ZN7CLIMenu4menuD1Ev>
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	bd90      	pop	{r4, r7, pc}
 8000840:	08006050 	.word	0x08006050
 8000844:	20000130 	.word	0x20000130
 8000848:	08006078 	.word	0x08006078
 800084c:	20000144 	.word	0x20000144
 8000850:	20000158 	.word	0x20000158
 8000854:	08000491 	.word	0x08000491
 8000858:	0800609c 	.word	0x0800609c
 800085c:	080004e9 	.word	0x080004e9
 8000860:	080060b0 	.word	0x080060b0
 8000864:	08000545 	.word	0x08000545
 8000868:	080060c0 	.word	0x080060c0
 800086c:	2000017c 	.word	0x2000017c
 8000870:	08000589 	.word	0x08000589
 8000874:	080060d4 	.word	0x080060d4
 8000878:	08006100 	.word	0x08006100
 800087c:	08006128 	.word	0x08006128
 8000880:	08006138 	.word	0x08006138

08000884 <_GLOBAL__sub_I_hrtc>:
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
 8000888:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800088c:	2001      	movs	r0, #1
 800088e:	f7ff ff7f 	bl	8000790 <_Z41__static_initialization_and_destruction_0ii>
 8000892:	bd80      	pop	{r7, pc}

08000894 <_GLOBAL__sub_D_hrtc>:
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
 8000898:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800089c:	2000      	movs	r0, #0
 800089e:	f7ff ff77 	bl	8000790 <_Z41__static_initialization_and_destruction_0ii>
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <_ZNSt12_Vector_baseIPN7CLIMenu8menuItemESaIS2_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f000 f921 	bl	8000b0c <_ZNSaIPN7CLIMenu8menuItemEED1Ev>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4618      	mov	r0, r3
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <_ZNSt12_Vector_baseIPN7CLIMenu8menuItemESaIS2_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 f904 	bl	8000aec <_ZNSt12_Vector_baseIPN7CLIMenu8menuItemESaIS2_EE12_Vector_implC1Ev>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4618      	mov	r0, r3
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b082      	sub	sp, #8
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ffeb 	bl	80008d4 <_ZNSt12_Vector_baseIPN7CLIMenu8menuItemESaIS2_EEC1Ev>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4618      	mov	r0, r3
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <_ZN7CLIMenu4menuC1EPc>:
int _read(int fd, char *ptr, int len);
}

namespace CLIMenu {

menu::menu( char *_header ) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
 8000912:	4a08      	ldr	r2, [pc, #32]	; (8000934 <_ZN7CLIMenu4menuC1EPc+0x2c>)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3308      	adds	r3, #8
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff ffe6 	bl	80008ee <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EEC1Ev>
	header = _header;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	683a      	ldr	r2, [r7, #0]
 8000926:	605a      	str	r2, [r3, #4]
}
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4618      	mov	r0, r3
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	0800624c 	.word	0x0800624c

08000938 <_ZN7CLIMenu4menuD1Ev>:

menu::~menu() {
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	4a06      	ldr	r2, [pc, #24]	; (800095c <_ZN7CLIMenu4menuD1Ev+0x24>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3308      	adds	r3, #8
 800094a:	4618      	mov	r0, r3
 800094c:	f000 f903 	bl	8000b56 <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EED1Ev>
	// TODO Auto-generated destructor stub
}
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4618      	mov	r0, r3
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	0800624c 	.word	0x0800624c

08000960 <_ZN7CLIMenu4menuD0Ev>:
menu::~menu() {
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
}
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f7ff ffe5 	bl	8000938 <_ZN7CLIMenu4menuD1Ev>
 800096e:	2114      	movs	r1, #20
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f004 f9a0 	bl	8004cb6 <_ZdlPvj>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <_ZN7CLIMenu4menu7addItemEPNS_8menuItemE>:

void menu::addItem( char _selector, char *_prompt, menuItemHandler *_handler ) {
	menuItems.push_back( new menuItem(_selector, _prompt, _handler) );
}

void menu::addItem(menuItem *_item) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
	menuItems.push_back( _item );
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	3308      	adds	r3, #8
 800098e:	463a      	mov	r2, r7
 8000990:	4611      	mov	r1, r2
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f8fa 	bl	8000b8c <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EE9push_backERKS2_>
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <_ZN7CLIMenu4menu3runEb>:

void menu::run( bool looping ) {
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b087      	sub	sp, #28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	460b      	mov	r3, r1
 80009aa:	70fb      	strb	r3, [r7, #3]
	menuItem *item;
	char _cmd;
	bool menuHit;

	while ( 1 ) {
		printf("\r\n%s\r\n", header);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	4619      	mov	r1, r3
 80009b2:	4847      	ldr	r0, [pc, #284]	; (8000ad0 <_ZN7CLIMenu4menu3runEb+0x130>)
 80009b4:	f004 fd3e 	bl	8005434 <iprintf>
		for ( uint8_t i = 0; i < menuItems.size(); i++ ) {
 80009b8:	2300      	movs	r3, #0
 80009ba:	75bb      	strb	r3, [r7, #22]
 80009bc:	7dbc      	ldrb	r4, [r7, #22]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	3308      	adds	r3, #8
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 f907 	bl	8000bd6 <_ZNKSt6vectorIPN7CLIMenu8menuItemESaIS2_EE4sizeEv>
 80009c8:	4603      	mov	r3, r0
 80009ca:	429c      	cmp	r4, r3
 80009cc:	bf34      	ite	cc
 80009ce:	2301      	movcc	r3, #1
 80009d0:	2300      	movcs	r3, #0
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d016      	beq.n	8000a06 <_ZN7CLIMenu4menu3runEb+0x66>
			item = menuItems.at(i);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3308      	adds	r3, #8
 80009dc:	7dba      	ldrb	r2, [r7, #22]
 80009de:	4611      	mov	r1, r2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 f908 	bl	8000bf6 <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EE2atEj>
 80009e6:	4603      	mov	r3, r0
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	613b      	str	r3, [r7, #16]
			printf("%c: %s\r\n", item->selector, item->prompt);
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	4619      	mov	r1, r3
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	461a      	mov	r2, r3
 80009f8:	4836      	ldr	r0, [pc, #216]	; (8000ad4 <_ZN7CLIMenu4menu3runEb+0x134>)
 80009fa:	f004 fd1b 	bl	8005434 <iprintf>
		for ( uint8_t i = 0; i < menuItems.size(); i++ ) {
 80009fe:	7dbb      	ldrb	r3, [r7, #22]
 8000a00:	3301      	adds	r3, #1
 8000a02:	75bb      	strb	r3, [r7, #22]
 8000a04:	e7da      	b.n	80009bc <_ZN7CLIMenu4menu3runEb+0x1c>
		}
		printf("\r\n> ");
 8000a06:	4834      	ldr	r0, [pc, #208]	; (8000ad8 <_ZN7CLIMenu4menu3runEb+0x138>)
 8000a08:	f004 fd14 	bl	8005434 <iprintf>
		fflush(stdout);
 8000a0c:	4b33      	ldr	r3, [pc, #204]	; (8000adc <_ZN7CLIMenu4menu3runEb+0x13c>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f004 faf4 	bl	8005000 <fflush>
		_read(0, &_cmd, 1);
 8000a18:	f107 030f 	add.w	r3, r7, #15
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	4619      	mov	r1, r3
 8000a20:	2000      	movs	r0, #0
 8000a22:	f7ff fcd3 	bl	80003cc <_read>
		if ( _cmd == 'x' ) return;
 8000a26:	7bfb      	ldrb	r3, [r7, #15]
 8000a28:	2b78      	cmp	r3, #120	; 0x78
 8000a2a:	d04d      	beq.n	8000ac8 <_ZN7CLIMenu4menu3runEb+0x128>
		menuHit = false;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	75fb      	strb	r3, [r7, #23]
		printf("  ");
 8000a30:	482b      	ldr	r0, [pc, #172]	; (8000ae0 <_ZN7CLIMenu4menu3runEb+0x140>)
 8000a32:	f004 fcff 	bl	8005434 <iprintf>
		fflush(stdout);
 8000a36:	4b29      	ldr	r3, [pc, #164]	; (8000adc <_ZN7CLIMenu4menu3runEb+0x13c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f004 fadf 	bl	8005000 <fflush>
		for ( uint8_t i = 0; i < menuItems.size(); i++ ) {
 8000a42:	2300      	movs	r3, #0
 8000a44:	757b      	strb	r3, [r7, #21]
 8000a46:	7d7c      	ldrb	r4, [r7, #21]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3308      	adds	r3, #8
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f000 f8c2 	bl	8000bd6 <_ZNKSt6vectorIPN7CLIMenu8menuItemESaIS2_EE4sizeEv>
 8000a52:	4603      	mov	r3, r0
 8000a54:	429c      	cmp	r4, r3
 8000a56:	bf34      	ite	cc
 8000a58:	2301      	movcc	r3, #1
 8000a5a:	2300      	movcs	r3, #0
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d027      	beq.n	8000ab2 <_ZN7CLIMenu4menu3runEb+0x112>
			item = menuItems.at(i);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	3308      	adds	r3, #8
 8000a66:	7d7a      	ldrb	r2, [r7, #21]
 8000a68:	4611      	mov	r1, r2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 f8c3 	bl	8000bf6 <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EE2atEj>
 8000a70:	4603      	mov	r3, r0
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	613b      	str	r3, [r7, #16]
			if ( item->selector == _cmd ) {
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	781a      	ldrb	r2, [r3, #0]
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d114      	bne.n	8000aaa <_ZN7CLIMenu4menu3runEb+0x10a>
				menuHit = true;
 8000a80:	2301      	movs	r3, #1
 8000a82:	75fb      	strb	r3, [r7, #23]
				if ( item->handler != NULL ) {
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d00b      	beq.n	8000aa4 <_ZN7CLIMenu4menu3runEb+0x104>
					item->handler(_cmd);
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	7bfa      	ldrb	r2, [r7, #15]
 8000a92:	4610      	mov	r0, r2
 8000a94:	4798      	blx	r3
					if ( !looping ) return;
 8000a96:	78fb      	ldrb	r3, [r7, #3]
 8000a98:	f083 0301 	eor.w	r3, r3, #1
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d003      	beq.n	8000aaa <_ZN7CLIMenu4menu3runEb+0x10a>
 8000aa2:	e012      	b.n	8000aca <_ZN7CLIMenu4menu3runEb+0x12a>
				}
				else printf("  ... No associated action with selection!?\r\n");
 8000aa4:	480f      	ldr	r0, [pc, #60]	; (8000ae4 <_ZN7CLIMenu4menu3runEb+0x144>)
 8000aa6:	f004 fd4b 	bl	8005540 <puts>
		for ( uint8_t i = 0; i < menuItems.size(); i++ ) {
 8000aaa:	7d7b      	ldrb	r3, [r7, #21]
 8000aac:	3301      	adds	r3, #1
 8000aae:	757b      	strb	r3, [r7, #21]
 8000ab0:	e7c9      	b.n	8000a46 <_ZN7CLIMenu4menu3runEb+0xa6>
			}
		}
		if ( !menuHit ) printf("  ... That did not compute???\r\n");
 8000ab2:	7dfb      	ldrb	r3, [r7, #23]
 8000ab4:	f083 0301 	eor.w	r3, r3, #1
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	f43f af76 	beq.w	80009ac <_ZN7CLIMenu4menu3runEb+0xc>
 8000ac0:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <_ZN7CLIMenu4menu3runEb+0x148>)
 8000ac2:	f004 fd3d 	bl	8005540 <puts>
	}
 8000ac6:	e771      	b.n	80009ac <_ZN7CLIMenu4menu3runEb+0xc>
		if ( _cmd == 'x' ) return;
 8000ac8:	bf00      	nop
}
 8000aca:	371c      	adds	r7, #28
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd90      	pop	{r4, r7, pc}
 8000ad0:	0800616c 	.word	0x0800616c
 8000ad4:	08006174 	.word	0x08006174
 8000ad8:	08006180 	.word	0x08006180
 8000adc:	2000000c 	.word	0x2000000c
 8000ae0:	08006188 	.word	0x08006188
 8000ae4:	0800618c 	.word	0x0800618c
 8000ae8:	080061bc 	.word	0x080061bc

08000aec <_ZNSt12_Vector_baseIPN7CLIMenu8menuItemESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f000 f890 	bl	8000c1a <_ZNSaIPN7CLIMenu8menuItemEEC1Ev>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f000 f898 	bl	8000c32 <_ZNSt12_Vector_baseIPN7CLIMenu8menuItemESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <_ZNSaIPN7CLIMenu8menuItemEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f000 f8a0 	bl	8000c5a <_ZN9__gnu_cxx13new_allocatorIPN7CLIMenu8menuItemEED1Ev>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <_ZNSt12_Vector_baseIPN7CLIMenu8menuItemESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	689a      	ldr	r2, [r3, #8]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f000 f896 	bl	8000c70 <_ZNSt12_Vector_baseIPN7CLIMenu8menuItemESaIS2_EE13_M_deallocateEPS2_j>
      }
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff feb8 	bl	80008bc <_ZNSt12_Vector_baseIPN7CLIMenu8menuItemESaIS2_EE12_Vector_implD1Ev>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8000b56:	b5b0      	push	{r4, r5, r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681c      	ldr	r4, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f000 f894 	bl	8000c96 <_ZNSt12_Vector_baseIPN7CLIMenu8menuItemESaIS2_EE19_M_get_Tp_allocatorEv>
 8000b6e:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000b70:	461a      	mov	r2, r3
 8000b72:	4629      	mov	r1, r5
 8000b74:	4620      	mov	r0, r4
 8000b76:	f000 f899 	bl	8000cac <_ZSt8_DestroyIPPN7CLIMenu8menuItemES2_EvT_S4_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ffd1 	bl	8000b24 <_ZNSt12_Vector_baseIPN7CLIMenu8menuItemESaIS2_EED1Ev>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4618      	mov	r0, r3
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bdb0      	pop	{r4, r5, r7, pc}

08000b8c <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EE9push_backERKS2_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	685a      	ldr	r2, [r3, #4]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d00c      	beq.n	8000bbc <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EE9push_backERKS2_+0x30>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	683a      	ldr	r2, [r7, #0]
 8000baa:	4619      	mov	r1, r3
 8000bac:	f000 f88c 	bl	8000cc8 <_ZNSt16allocator_traitsISaIPN7CLIMenu8menuItemEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	1d1a      	adds	r2, r3, #4
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8000bba:	e008      	b.n	8000bce <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EE9push_backERKS2_+0x42>
	  _M_realloc_insert(end(), __x);
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f000 f896 	bl	8000cee <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EE3endEv>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	683a      	ldr	r2, [r7, #0]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f000 f8b7 	bl	8000d3c <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
      }
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <_ZNKSt6vectorIPN7CLIMenu8menuItemESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685a      	ldr	r2, [r3, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	109b      	asrs	r3, r3, #2
 8000bea:	4618      	mov	r0, r3
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EE2atEj>:
      at(size_type __n)
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	6039      	str	r1, [r7, #0]
	_M_range_check(__n);
 8000c00:	6839      	ldr	r1, [r7, #0]
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f000 f956 	bl	8000eb4 <_ZNKSt6vectorIPN7CLIMenu8menuItemESaIS2_EE14_M_range_checkEj>
	return (*this)[__n];
 8000c08:	6839      	ldr	r1, [r7, #0]
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f000 f972 	bl	8000ef4 <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EEixEj>
 8000c10:	4603      	mov	r3, r0
      }
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <_ZNSaIPN7CLIMenu8menuItemEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f000 f976 	bl	8000f14 <_ZN9__gnu_cxx13new_allocatorIPN7CLIMenu8menuItemEEC1Ev>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <_ZNSt12_Vector_baseIPN7CLIMenu8menuItemESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2200      	movs	r2, #0
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
	{ }
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <_ZN9__gnu_cxx13new_allocatorIPN7CLIMenu8menuItemEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4618      	mov	r0, r3
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <_ZNSt12_Vector_baseIPN7CLIMenu8menuItemESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
	if (__p)
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d005      	beq.n	8000c8e <_ZNSt12_Vector_baseIPN7CLIMenu8menuItemESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	68b9      	ldr	r1, [r7, #8]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f000 f94e 	bl	8000f2a <_ZNSt16allocator_traitsISaIPN7CLIMenu8menuItemEEE10deallocateERS3_PS2_j>
      }
 8000c8e:	bf00      	nop
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <_ZNSt12_Vector_baseIPN7CLIMenu8menuItemESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000c96:	b480      	push	{r7}
 8000c98:	b083      	sub	sp, #12
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <_ZSt8_DestroyIPPN7CLIMenu8menuItemES2_EvT_S4_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8000cb8:	68b9      	ldr	r1, [r7, #8]
 8000cba:	68f8      	ldr	r0, [r7, #12]
 8000cbc:	f000 f944 	bl	8000f48 <_ZSt8_DestroyIPPN7CLIMenu8menuItemEEvT_S4_>
    }
 8000cc0:	bf00      	nop
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <_ZNSt16allocator_traitsISaIPN7CLIMenu8menuItemEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f000 f944 	bl	8000f62 <_ZSt7forwardIRKPN7CLIMenu8menuItemEEOT_RNSt16remove_referenceIS5_E4typeE>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	461a      	mov	r2, r3
 8000cde:	68b9      	ldr	r1, [r7, #8]
 8000ce0:	68f8      	ldr	r0, [r7, #12]
 8000ce2:	f000 f949 	bl	8000f78 <_ZN9__gnu_cxx13new_allocatorIPN7CLIMenu8menuItemEE9constructIS3_JRKS3_EEEvPT_DpOT0_>
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b084      	sub	sp, #16
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	1d1a      	adds	r2, r3, #4
 8000cfa:	f107 030c 	add.w	r3, r7, #12
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 f94f 	bl	8000fa4 <_ZN9__gnu_cxx17__normal_iteratorIPPN7CLIMenu8menuItemESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f805 	bl	8000d26 <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8000d1c:	4603      	mov	r3, r0
      }
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8000d2e:	2301      	movs	r3, #1
      }
 8000d30:	4618      	mov	r0, r3
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8000d3c:	b5b0      	push	{r4, r5, r7, lr}
 8000d3e:	b08c      	sub	sp, #48	; 0x30
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8000d48:	4a59      	ldr	r2, [pc, #356]	; (8000eb0 <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x174>)
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	68f8      	ldr	r0, [r7, #12]
 8000d4e:	f000 f939 	bl	8000fc4 <_ZNKSt6vectorIPN7CLIMenu8menuItemESaIS2_EE12_M_check_lenEjPKc>
 8000d52:	62b8      	str	r0, [r7, #40]	; 0x28
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8000d60:	68f8      	ldr	r0, [r7, #12]
 8000d62:	f000 f976 	bl	8001052 <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EE5beginEv>
 8000d66:	4603      	mov	r3, r0
 8000d68:	617b      	str	r3, [r7, #20]
 8000d6a:	f107 0214 	add.w	r2, r7, #20
 8000d6e:	f107 0308 	add.w	r3, r7, #8
 8000d72:	4611      	mov	r1, r2
 8000d74:	4618      	mov	r0, r3
 8000d76:	f000 f97c 	bl	8001072 <_ZN9__gnu_cxxmiIPPN7CLIMenu8menuItemESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 f98a 	bl	800109c <_ZNSt12_Vector_baseIPN7CLIMenu8menuItemESaIS2_EE11_M_allocateEj>
 8000d88:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8000d8e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	18d5      	adds	r5, r2, r3
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f000 f8e2 	bl	8000f62 <_ZSt7forwardIRKPN7CLIMenu8menuItemEEOT_RNSt16remove_referenceIS5_E4typeE>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	461a      	mov	r2, r3
 8000da2:	4629      	mov	r1, r5
 8000da4:	4620      	mov	r0, r4
 8000da6:	f7ff ff8f 	bl	8000cc8 <_ZNSt16allocator_traitsISaIPN7CLIMenu8menuItemEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8000daa:	2300      	movs	r3, #0
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8000dae:	f7ff ffaf 	bl	8000d10 <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EE15_S_use_relocateEv>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d027      	beq.n	8000e08 <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8000db8:	f107 0308 	add.w	r3, r7, #8
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 f995 	bl	80010ec <_ZNK9__gnu_cxx17__normal_iteratorIPPN7CLIMenu8menuItemESt6vectorIS3_SaIS3_EEE4baseEv>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff64 	bl	8000c96 <_ZNSt12_Vector_baseIPN7CLIMenu8menuItemESaIS2_EE19_M_get_Tp_allocatorEv>
 8000dce:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4621      	mov	r1, r4
 8000dd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000dd6:	f000 f975 	bl	80010c4 <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 8000dda:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8000ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dde:	3304      	adds	r3, #4
 8000de0:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8000de2:	f107 0308 	add.w	r3, r7, #8
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f980 	bl	80010ec <_ZNK9__gnu_cxx17__normal_iteratorIPPN7CLIMenu8menuItemESt6vectorIS3_SaIS3_EEE4baseEv>
 8000dec:	4603      	mov	r3, r0
 8000dee:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff ff4f 	bl	8000c96 <_ZNSt12_Vector_baseIPN7CLIMenu8menuItemESaIS2_EE19_M_get_Tp_allocatorEv>
 8000df8:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8000dfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000dfc:	6a39      	ldr	r1, [r7, #32]
 8000dfe:	4620      	mov	r0, r4
 8000e00:	f000 f960 	bl	80010c4 <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 8000e04:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000e06:	e026      	b.n	8000e56 <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8000e08:	f107 0308 	add.w	r3, r7, #8
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 f96d 	bl	80010ec <_ZNK9__gnu_cxx17__normal_iteratorIPPN7CLIMenu8menuItemESt6vectorIS3_SaIS3_EEE4baseEv>
 8000e12:	4603      	mov	r3, r0
 8000e14:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff3c 	bl	8000c96 <_ZNSt12_Vector_baseIPN7CLIMenu8menuItemESaIS2_EE19_M_get_Tp_allocatorEv>
 8000e1e:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4621      	mov	r1, r4
 8000e24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e26:	f000 f96c 	bl	8001102 <_ZSt34__uninitialized_move_if_noexcept_aIPPN7CLIMenu8menuItemES3_SaIS2_EET0_T_S6_S5_RT1_>
 8000e2a:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8000e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e2e:	3304      	adds	r3, #4
 8000e30:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8000e32:	f107 0308 	add.w	r3, r7, #8
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 f958 	bl	80010ec <_ZNK9__gnu_cxx17__normal_iteratorIPPN7CLIMenu8menuItemESt6vectorIS3_SaIS3_EEE4baseEv>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ff27 	bl	8000c96 <_ZNSt12_Vector_baseIPN7CLIMenu8menuItemESaIS2_EE19_M_get_Tp_allocatorEv>
 8000e48:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8000e4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e4c:	6a39      	ldr	r1, [r7, #32]
 8000e4e:	4620      	mov	r0, r4
 8000e50:	f000 f957 	bl	8001102 <_ZSt34__uninitialized_move_if_noexcept_aIPPN7CLIMenu8menuItemES3_SaIS2_EET0_T_S6_S5_RT1_>
 8000e54:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8000e56:	f7ff ff5b 	bl	8000d10 <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EE15_S_use_relocateEv>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	f083 0301 	eor.w	r3, r3, #1
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d009      	beq.n	8000e7a <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff14 	bl	8000c96 <_ZNSt12_Vector_baseIPN7CLIMenu8menuItemESaIS2_EE19_M_get_Tp_allocatorEv>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	461a      	mov	r2, r3
 8000e72:	6a39      	ldr	r1, [r7, #32]
 8000e74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e76:	f7ff ff19 	bl	8000cac <_ZSt8_DestroyIPPN7CLIMenu8menuItemES2_EvT_S4_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8000e7a:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	689a      	ldr	r2, [r3, #8]
 8000e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8000e86:	461a      	mov	r2, r3
 8000e88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e8a:	f7ff fef1 	bl	8000c70 <_ZNSt12_Vector_baseIPN7CLIMenu8menuItemESaIS2_EE13_M_deallocateEPS2_j>
      this->_M_impl._M_start = __new_start;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e98:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	441a      	add	r2, r3
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	609a      	str	r2, [r3, #8]
    }
 8000ea6:	bf00      	nop
 8000ea8:	3730      	adds	r7, #48	; 0x30
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bdb0      	pop	{r4, r5, r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	080061dc 	.word	0x080061dc

08000eb4 <_ZNKSt6vectorIPN7CLIMenu8menuItemESaIS2_EE14_M_range_checkEj>:
      _M_range_check(size_type __n) const
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
	if (__n >= this->size())
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff fe89 	bl	8000bd6 <_ZNKSt6vectorIPN7CLIMenu8menuItemESaIS2_EE4sizeEv>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	bf2c      	ite	cs
 8000ecc:	2301      	movcs	r3, #1
 8000ece:	2300      	movcc	r3, #0
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d008      	beq.n	8000ee8 <_ZNKSt6vectorIPN7CLIMenu8menuItemESaIS2_EE14_M_range_checkEj+0x34>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff fe7d 	bl	8000bd6 <_ZNKSt6vectorIPN7CLIMenu8menuItemESaIS2_EE4sizeEv>
 8000edc:	4603      	mov	r3, r0
 8000ede:	461a      	mov	r2, r3
 8000ee0:	6839      	ldr	r1, [r7, #0]
 8000ee2:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <_ZNKSt6vectorIPN7CLIMenu8menuItemESaIS2_EE14_M_range_checkEj+0x3c>)
 8000ee4:	f003 ff03 	bl	8004cee <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	080061f8 	.word	0x080061f8

08000ef4 <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	4413      	add	r3, r2
      }
 8000f08:	4618      	mov	r0, r3
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <_ZN9__gnu_cxx13new_allocatorIPN7CLIMenu8menuItemEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <_ZNSt16allocator_traitsISaIPN7CLIMenu8menuItemEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b084      	sub	sp, #16
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	60f8      	str	r0, [r7, #12]
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	68b9      	ldr	r1, [r7, #8]
 8000f3a:	68f8      	ldr	r0, [r7, #12]
 8000f3c:	f000 f8fa 	bl	8001134 <_ZN9__gnu_cxx13new_allocatorIPN7CLIMenu8menuItemEE10deallocateEPS3_j>
 8000f40:	bf00      	nop
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <_ZSt8_DestroyIPPN7CLIMenu8menuItemEEvT_S4_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8000f52:	6839      	ldr	r1, [r7, #0]
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 f8fa 	bl	800114e <_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7CLIMenu8menuItemEEEvT_S6_>
    }
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <_ZSt7forwardIRKPN7CLIMenu8menuItemEEOT_RNSt16remove_referenceIS5_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <_ZN9__gnu_cxx13new_allocatorIPN7CLIMenu8menuItemEE9constructIS3_JRKS3_EEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff ffec 	bl	8000f62 <_ZSt7forwardIRKPN7CLIMenu8menuItemEEOT_RNSt16remove_referenceIS5_E4typeE>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	681c      	ldr	r4, [r3, #0]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	4619      	mov	r1, r3
 8000f92:	2004      	movs	r0, #4
 8000f94:	f7ff fc86 	bl	80008a4 <_ZnwjPv>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	601c      	str	r4, [r3, #0]
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd90      	pop	{r4, r7, pc}

08000fa4 <_ZN9__gnu_cxx17__normal_iteratorIPPN7CLIMenu8menuItemESt6vectorIS3_SaIS3_EEEC1ERKS4_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <_ZNKSt6vectorIPN7CLIMenu8menuItemESaIS2_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b087      	sub	sp, #28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8000fd0:	68f8      	ldr	r0, [r7, #12]
 8000fd2:	f000 f8c7 	bl	8001164 <_ZNKSt6vectorIPN7CLIMenu8menuItemESaIS2_EE8max_sizeEv>
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	68f8      	ldr	r0, [r7, #12]
 8000fda:	f7ff fdfc 	bl	8000bd6 <_ZNKSt6vectorIPN7CLIMenu8menuItemESaIS2_EE4sizeEv>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	1ae2      	subs	r2, r4, r3
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	bf34      	ite	cc
 8000fe8:	2301      	movcc	r3, #1
 8000fea:	2300      	movcs	r3, #0
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d002      	beq.n	8000ff8 <_ZNKSt6vectorIPN7CLIMenu8menuItemESaIS2_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f003 fe78 	bl	8004ce8 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8000ff8:	68f8      	ldr	r0, [r7, #12]
 8000ffa:	f7ff fdec 	bl	8000bd6 <_ZNKSt6vectorIPN7CLIMenu8menuItemESaIS2_EE4sizeEv>
 8000ffe:	4604      	mov	r4, r0
 8001000:	68f8      	ldr	r0, [r7, #12]
 8001002:	f7ff fde8 	bl	8000bd6 <_ZNKSt6vectorIPN7CLIMenu8menuItemESaIS2_EE4sizeEv>
 8001006:	4603      	mov	r3, r0
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	f107 0208 	add.w	r2, r7, #8
 800100e:	f107 0310 	add.w	r3, r7, #16
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f8b6 	bl	8001186 <_ZSt3maxIjERKT_S2_S2_>
 800101a:	4603      	mov	r3, r0
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4423      	add	r3, r4
 8001020:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f7ff fdd7 	bl	8000bd6 <_ZNKSt6vectorIPN7CLIMenu8menuItemESaIS2_EE4sizeEv>
 8001028:	4602      	mov	r2, r0
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	4293      	cmp	r3, r2
 800102e:	d306      	bcc.n	800103e <_ZNKSt6vectorIPN7CLIMenu8menuItemESaIS2_EE12_M_check_lenEjPKc+0x7a>
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	f000 f897 	bl	8001164 <_ZNKSt6vectorIPN7CLIMenu8menuItemESaIS2_EE8max_sizeEv>
 8001036:	4602      	mov	r2, r0
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	4293      	cmp	r3, r2
 800103c:	d904      	bls.n	8001048 <_ZNKSt6vectorIPN7CLIMenu8menuItemESaIS2_EE12_M_check_lenEjPKc+0x84>
 800103e:	68f8      	ldr	r0, [r7, #12]
 8001040:	f000 f890 	bl	8001164 <_ZNKSt6vectorIPN7CLIMenu8menuItemESaIS2_EE8max_sizeEv>
 8001044:	4603      	mov	r3, r0
 8001046:	e000      	b.n	800104a <_ZNKSt6vectorIPN7CLIMenu8menuItemESaIS2_EE12_M_check_lenEjPKc+0x86>
 8001048:	697b      	ldr	r3, [r7, #20]
      }
 800104a:	4618      	mov	r0, r3
 800104c:	371c      	adds	r7, #28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd90      	pop	{r4, r7, pc}

08001052 <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	4611      	mov	r1, r2
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ff9e 	bl	8000fa4 <_ZN9__gnu_cxx17__normal_iteratorIPPN7CLIMenu8menuItemESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <_ZN9__gnu_cxxmiIPPN7CLIMenu8menuItemESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001072:	b590      	push	{r4, r7, lr}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 f835 	bl	80010ec <_ZNK9__gnu_cxx17__normal_iteratorIPPN7CLIMenu8menuItemESt6vectorIS3_SaIS3_EEE4baseEv>
 8001082:	4603      	mov	r3, r0
 8001084:	681c      	ldr	r4, [r3, #0]
 8001086:	6838      	ldr	r0, [r7, #0]
 8001088:	f000 f830 	bl	80010ec <_ZNK9__gnu_cxx17__normal_iteratorIPPN7CLIMenu8menuItemESt6vectorIS3_SaIS3_EEE4baseEv>
 800108c:	4603      	mov	r3, r0
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	1ae3      	subs	r3, r4, r3
 8001092:	109b      	asrs	r3, r3, #2
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	bd90      	pop	{r4, r7, pc}

0800109c <_ZNSt12_Vector_baseIPN7CLIMenu8menuItemESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d006      	beq.n	80010ba <_ZNSt12_Vector_baseIPN7CLIMenu8menuItemESaIS2_EE11_M_allocateEj+0x1e>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6839      	ldr	r1, [r7, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 f87c 	bl	80011ae <_ZNSt16allocator_traitsISaIPN7CLIMenu8menuItemEEE8allocateERS3_j>
 80010b6:	4603      	mov	r3, r0
 80010b8:	e000      	b.n	80010bc <_ZNSt12_Vector_baseIPN7CLIMenu8menuItemESaIS2_EE11_M_allocateEj+0x20>
 80010ba:	2300      	movs	r3, #0
      }
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b089      	sub	sp, #36	; 0x24
 80010c8:	af02      	add	r7, sp, #8
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80010d2:	f88d 4000 	strb.w	r4, [sp]
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	68b9      	ldr	r1, [r7, #8]
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f000 f875 	bl	80011cc <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EE14_S_do_relocateEPS2_S5_S5_RS3_St17integral_constantIbLb1EE>
 80010e2:	4603      	mov	r3, r0
      }
 80010e4:	4618      	mov	r0, r3
 80010e6:	371c      	adds	r7, #28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd90      	pop	{r4, r7, pc}

080010ec <_ZNK9__gnu_cxx17__normal_iteratorIPPN7CLIMenu8menuItemESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <_ZSt34__uninitialized_move_if_noexcept_aIPPN7CLIMenu8menuItemES3_SaIS2_EET0_T_S6_S5_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8001102:	b590      	push	{r4, r7, lr}
 8001104:	b085      	sub	sp, #20
 8001106:	af00      	add	r7, sp, #0
 8001108:	60f8      	str	r0, [r7, #12]
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f000 f86d 	bl	80011f0 <_ZSt32__make_move_if_noexcept_iteratorIPN7CLIMenu8menuItemESt13move_iteratorIPS2_EET0_PT_>
 8001116:	4604      	mov	r4, r0
 8001118:	68b8      	ldr	r0, [r7, #8]
 800111a:	f000 f869 	bl	80011f0 <_ZSt32__make_move_if_noexcept_iteratorIPN7CLIMenu8menuItemESt13move_iteratorIPS2_EET0_PT_>
 800111e:	4601      	mov	r1, r0
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	4620      	mov	r0, r4
 8001126:	f000 f872 	bl	800120e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPN7CLIMenu8menuItemEES4_S3_ET0_T_S7_S6_RSaIT1_E>
 800112a:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 800112c:	4618      	mov	r0, r3
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	bd90      	pop	{r4, r7, pc}

08001134 <_ZN9__gnu_cxx13new_allocatorIPN7CLIMenu8menuItemEE10deallocateEPS3_j>:
      deallocate(pointer __p, size_type)
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8001140:	68b8      	ldr	r0, [r7, #8]
 8001142:	f003 fdb6 	bl	8004cb2 <_ZdlPv>
      }
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7CLIMenu8menuItemEEEvT_S6_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	6039      	str	r1, [r7, #0]
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <_ZNKSt6vectorIPN7CLIMenu8menuItemESaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4618      	mov	r0, r3
 8001170:	f000 f878 	bl	8001264 <_ZNKSt12_Vector_baseIPN7CLIMenu8menuItemESaIS2_EE19_M_get_Tp_allocatorEv>
 8001174:	4603      	mov	r3, r0
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f85a 	bl	8001230 <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EE11_S_max_sizeERKS3_>
 800117c:	4603      	mov	r3, r0
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
 800118e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	429a      	cmp	r2, r3
 800119a:	d201      	bcs.n	80011a0 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	e000      	b.n	80011a2 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80011a0:	687b      	ldr	r3, [r7, #4]
    }
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <_ZNSt16allocator_traitsISaIPN7CLIMenu8menuItemEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80011b8:	2200      	movs	r2, #0
 80011ba:	6839      	ldr	r1, [r7, #0]
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f000 f85c 	bl	800127a <_ZN9__gnu_cxx13new_allocatorIPN7CLIMenu8menuItemEE8allocateEjPKv>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EE14_S_do_relocateEPS2_S5_S5_RS3_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	68b9      	ldr	r1, [r7, #8]
 80011e0:	68f8      	ldr	r0, [r7, #12]
 80011e2:	f000 f868 	bl	80012b6 <_ZSt12__relocate_aIPPN7CLIMenu8menuItemES3_SaIS2_EET0_T_S6_S5_RT1_>
 80011e6:	4603      	mov	r3, r0
      }
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <_ZSt32__make_move_if_noexcept_iteratorIPN7CLIMenu8menuItemESt13move_iteratorIPS2_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f876 	bl	80012f0 <_ZNSt13move_iteratorIPPN7CLIMenu8menuItemEEC1ES3_>
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPN7CLIMenu8menuItemEES4_S3_ET0_T_S7_S6_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800120e:	b580      	push	{r7, lr}
 8001210:	b084      	sub	sp, #16
 8001212:	af00      	add	r7, sp, #0
 8001214:	60f8      	str	r0, [r7, #12]
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	68b9      	ldr	r1, [r7, #8]
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f000 f874 	bl	800130e <_ZSt18uninitialized_copyISt13move_iteratorIPPN7CLIMenu8menuItemEES4_ET0_T_S7_S6_>
 8001226:	4603      	mov	r3, r0
 8001228:	4618      	mov	r0, r3
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <_ZNSt6vectorIPN7CLIMenu8menuItemESaIS2_EE11_S_max_sizeERKS3_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8001238:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800123c:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 f877 	bl	8001332 <_ZNSt16allocator_traitsISaIPN7CLIMenu8menuItemEEE8max_sizeERKS3_>
 8001244:	4603      	mov	r3, r0
 8001246:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8001248:	f107 0208 	add.w	r2, r7, #8
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	4611      	mov	r1, r2
 8001252:	4618      	mov	r0, r3
 8001254:	f000 f879 	bl	800134a <_ZSt3minIjERKT_S2_S2_>
 8001258:	4603      	mov	r3, r0
 800125a:	681b      	ldr	r3, [r3, #0]
      }
 800125c:	4618      	mov	r0, r3
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <_ZNKSt12_Vector_baseIPN7CLIMenu8menuItemESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <_ZN9__gnu_cxx13new_allocatorIPN7CLIMenu8menuItemEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800127a:	b580      	push	{r7, lr}
 800127c:	b084      	sub	sp, #16
 800127e:	af00      	add	r7, sp, #0
 8001280:	60f8      	str	r0, [r7, #12]
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f000 f873 	bl	8001372 <_ZNK9__gnu_cxx13new_allocatorIPN7CLIMenu8menuItemEE8max_sizeEv>
 800128c:	4602      	mov	r2, r0
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	4293      	cmp	r3, r2
 8001292:	bf8c      	ite	hi
 8001294:	2301      	movhi	r3, #1
 8001296:	2300      	movls	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <_ZN9__gnu_cxx13new_allocatorIPN7CLIMenu8menuItemEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800129e:	f003 fd1d 	bl	8004cdc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f003 fd07 	bl	8004cba <_Znwj>
 80012ac:	4603      	mov	r3, r0
      }
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <_ZSt12__relocate_aIPPN7CLIMenu8menuItemES3_SaIS2_EET0_T_S6_S5_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80012b6:	b5b0      	push	{r4, r5, r7, lr}
 80012b8:	b084      	sub	sp, #16
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	60f8      	str	r0, [r7, #12]
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
 80012c2:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 80012c4:	68f8      	ldr	r0, [r7, #12]
 80012c6:	f000 f860 	bl	800138a <_ZSt12__niter_baseIPPN7CLIMenu8menuItemEET_S4_>
 80012ca:	4604      	mov	r4, r0
 80012cc:	68b8      	ldr	r0, [r7, #8]
 80012ce:	f000 f85c 	bl	800138a <_ZSt12__niter_baseIPPN7CLIMenu8menuItemEET_S4_>
 80012d2:	4605      	mov	r5, r0
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f000 f858 	bl	800138a <_ZSt12__niter_baseIPPN7CLIMenu8menuItemEET_S4_>
 80012da:	4602      	mov	r2, r0
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	4629      	mov	r1, r5
 80012e0:	4620      	mov	r0, r4
 80012e2:	f000 f85d 	bl	80013a0 <_ZSt14__relocate_a_1IPN7CLIMenu8menuItemES2_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS5_E4typeES7_S7_S7_RSaIT0_E>
 80012e6:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bdb0      	pop	{r4, r5, r7, pc}

080012f0 <_ZNSt13move_iteratorIPPN7CLIMenu8menuItemEEC1ES3_>:
      move_iterator(iterator_type __i)
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <_ZSt18uninitialized_copyISt13move_iteratorIPPN7CLIMenu8menuItemEES4_ET0_T_S7_S6_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800130e:	b580      	push	{r7, lr}
 8001310:	b086      	sub	sp, #24
 8001312:	af00      	add	r7, sp, #0
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800131a:	2301      	movs	r3, #1
 800131c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	68b9      	ldr	r1, [r7, #8]
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f000 f85a 	bl	80013dc <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPN7CLIMenu8menuItemEES6_EET0_T_S9_S8_>
 8001328:	4603      	mov	r3, r0
    }
 800132a:	4618      	mov	r0, r3
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <_ZNSt16allocator_traitsISaIPN7CLIMenu8menuItemEEE8max_sizeERKS3_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 f819 	bl	8001372 <_ZNK9__gnu_cxx13new_allocatorIPN7CLIMenu8menuItemEE8max_sizeEv>
 8001340:	4603      	mov	r3, r0
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	d201      	bcs.n	8001364 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	e000      	b.n	8001366 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8001364:	687b      	ldr	r3, [r7, #4]
    }
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <_ZNK9__gnu_cxx13new_allocatorIPN7CLIMenu8menuItemEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800137a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <_ZSt12__niter_baseIPPN7CLIMenu8menuItemEET_S4_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    inline _Iterator
    __niter_base(_Iterator __it)
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4618      	mov	r0, r3
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <_ZSt14__relocate_a_1IPN7CLIMenu8menuItemES2_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS5_E4typeES7_S7_S7_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
 80013ac:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	109b      	asrs	r3, r3, #2
 80013b6:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	dd06      	ble.n	80013cc <_ZSt14__relocate_a_1IPN7CLIMenu8menuItemES2_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS5_E4typeES7_S7_S7_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	461a      	mov	r2, r3
 80013c4:	68f9      	ldr	r1, [r7, #12]
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f003 ff68 	bl	800529c <memmove>
      return __result + __count;
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	4413      	add	r3, r2
    }
 80013d4:	4618      	mov	r0, r3
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPN7CLIMenu8menuItemEES6_EET0_T_S9_S8_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	68b9      	ldr	r1, [r7, #8]
 80013ec:	68f8      	ldr	r0, [r7, #12]
 80013ee:	f000 f805 	bl	80013fc <_ZSt4copyISt13move_iteratorIPPN7CLIMenu8menuItemEES4_ET0_T_S7_S6_>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4618      	mov	r0, r3
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <_ZSt4copyISt13move_iteratorIPPN7CLIMenu8menuItemEES4_ET0_T_S7_S6_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80013fc:	b590      	push	{r4, r7, lr}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f000 f80f 	bl	800142c <_ZSt12__miter_baseIPPN7CLIMenu8menuItemEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800140e:	4604      	mov	r4, r0
 8001410:	68b8      	ldr	r0, [r7, #8]
 8001412:	f000 f80b 	bl	800142c <_ZSt12__miter_baseIPPN7CLIMenu8menuItemEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8001416:	4603      	mov	r3, r0
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	4619      	mov	r1, r3
 800141c:	4620      	mov	r0, r4
 800141e:	f000 f816 	bl	800144e <_ZSt14__copy_move_a2ILb1EPPN7CLIMenu8menuItemES3_ET1_T0_S5_S4_>
 8001422:	4603      	mov	r3, r0
    }
 8001424:	4618      	mov	r0, r3
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	bd90      	pop	{r4, r7, pc}

0800142c <_ZSt12__miter_baseIPPN7CLIMenu8menuItemEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	4618      	mov	r0, r3
 8001438:	f000 f82c 	bl	8001494 <_ZNKSt13move_iteratorIPPN7CLIMenu8menuItemEE4baseEv>
 800143c:	4603      	mov	r3, r0
 800143e:	4618      	mov	r0, r3
 8001440:	f000 f834 	bl	80014ac <_ZSt12__miter_baseIPPN7CLIMenu8menuItemEET_S4_>
 8001444:	4603      	mov	r3, r0
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <_ZSt14__copy_move_a2ILb1EPPN7CLIMenu8menuItemES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800144e:	b5b0      	push	{r4, r5, r7, lr}
 8001450:	b084      	sub	sp, #16
 8001452:	af00      	add	r7, sp, #0
 8001454:	60f8      	str	r0, [r7, #12]
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f7ff ff95 	bl	800138a <_ZSt12__niter_baseIPPN7CLIMenu8menuItemEET_S4_>
 8001460:	4604      	mov	r4, r0
 8001462:	68b8      	ldr	r0, [r7, #8]
 8001464:	f7ff ff91 	bl	800138a <_ZSt12__niter_baseIPPN7CLIMenu8menuItemEET_S4_>
 8001468:	4605      	mov	r5, r0
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff8c 	bl	800138a <_ZSt12__niter_baseIPPN7CLIMenu8menuItemEET_S4_>
 8001472:	4603      	mov	r3, r0
 8001474:	461a      	mov	r2, r3
 8001476:	4629      	mov	r1, r5
 8001478:	4620      	mov	r0, r4
 800147a:	f000 f822 	bl	80014c2 <_ZSt13__copy_move_aILb1EPPN7CLIMenu8menuItemES3_ET1_T0_S5_S4_>
 800147e:	4602      	mov	r2, r0
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	4611      	mov	r1, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f000 f82e 	bl	80014e6 <_ZSt12__niter_wrapIPPN7CLIMenu8menuItemEET_RKS4_S4_>
 800148a:	4603      	mov	r3, r0
    }
 800148c:	4618      	mov	r0, r3
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bdb0      	pop	{r4, r5, r7, pc}

08001494 <_ZNKSt13move_iteratorIPPN7CLIMenu8menuItemEE4baseEv>:
      base() const
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <_ZSt12__miter_baseIPPN7CLIMenu8menuItemEET_S4_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4618      	mov	r0, r3
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <_ZSt13__copy_move_aILb1EPPN7CLIMenu8menuItemES3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	60f8      	str	r0, [r7, #12]
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 80014ce:	2301      	movs	r3, #1
 80014d0:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	68b9      	ldr	r1, [r7, #8]
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f000 f811 	bl	80014fe <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPN7CLIMenu8menuItemEEEPT_PKS6_S9_S7_>
 80014dc:	4603      	mov	r3, r0
    }
 80014de:	4618      	mov	r0, r3
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <_ZSt12__niter_wrapIPPN7CLIMenu8menuItemEET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	6039      	str	r1, [r7, #0]
    { return __res; }
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPN7CLIMenu8menuItemEEEPT_PKS6_S9_S7_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80014fe:	b580      	push	{r7, lr}
 8001500:	b086      	sub	sp, #24
 8001502:	af00      	add	r7, sp, #0
 8001504:	60f8      	str	r0, [r7, #12]
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	109b      	asrs	r3, r3, #2
 8001512:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d006      	beq.n	8001528 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPN7CLIMenu8menuItemEEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	461a      	mov	r2, r3
 8001520:	68f9      	ldr	r1, [r7, #12]
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f003 feba 	bl	800529c <memmove>
	  return __result + _Num;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	4413      	add	r3, r2
	}
 8001530:	4618      	mov	r0, r3
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <MX_RTC_Init+0x58>)
 800153e:	4a15      	ldr	r2, [pc, #84]	; (8001594 <MX_RTC_Init+0x5c>)
 8001540:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001542:	4b13      	ldr	r3, [pc, #76]	; (8001590 <MX_RTC_Init+0x58>)
 8001544:	2200      	movs	r2, #0
 8001546:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MX_RTC_Init+0x58>)
 800154a:	227f      	movs	r2, #127	; 0x7f
 800154c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <MX_RTC_Init+0x58>)
 8001550:	22ff      	movs	r2, #255	; 0xff
 8001552:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001554:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <MX_RTC_Init+0x58>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800155a:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <MX_RTC_Init+0x58>)
 800155c:	2200      	movs	r2, #0
 800155e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001560:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <MX_RTC_Init+0x58>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001566:	480a      	ldr	r0, [pc, #40]	; (8001590 <MX_RTC_Init+0x58>)
 8001568:	f002 fa0a 	bl	8003980 <HAL_RTC_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001572:	f7ff f907 	bl	8000784 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001576:	2200      	movs	r2, #0
 8001578:	2100      	movs	r1, #0
 800157a:	4805      	ldr	r0, [pc, #20]	; (8001590 <MX_RTC_Init+0x58>)
 800157c:	f002 fae6 	bl	8003b4c <HAL_RTCEx_SetWakeUpTimer_IT>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001586:	f7ff f8fd 	bl	8000784 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	2000008c 	.word	0x2000008c
 8001594:	40002800 	.word	0x40002800

08001598 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a10      	ldr	r2, [pc, #64]	; (80015e8 <HAL_RTC_MspInit+0x50>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d119      	bne.n	80015de <HAL_RTC_MspInit+0x46>
 80015aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015ae:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	fa93 f3a3 	rbit	r3, r3
 80015b6:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015b8:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80015ba:	fab3 f383 	clz	r3, r3
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <HAL_RTC_MspInit+0x54>)
 80015c4:	4413      	add	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	461a      	mov	r2, r3
 80015ca:	2301      	movs	r3, #1
 80015cc:	6013      	str	r3, [r2, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2100      	movs	r1, #0
 80015d2:	2003      	movs	r0, #3
 80015d4:	f000 fb71 	bl	8001cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80015d8:	2003      	movs	r0, #3
 80015da:	f000 fb8a 	bl	8001cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80015de:	bf00      	nop
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40002800 	.word	0x40002800
 80015ec:	10908100 	.word	0x10908100

080015f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f6:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <HAL_MspInit+0x44>)
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	4a0e      	ldr	r2, [pc, #56]	; (8001634 <HAL_MspInit+0x44>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6193      	str	r3, [r2, #24]
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <HAL_MspInit+0x44>)
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <HAL_MspInit+0x44>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	4a08      	ldr	r2, [pc, #32]	; (8001634 <HAL_MspInit+0x44>)
 8001614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001618:	61d3      	str	r3, [r2, #28]
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_MspInit+0x44>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001626:	2007      	movs	r0, #7
 8001628:	f000 fb3c 	bl	8001ca4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40021000 	.word	0x40021000

08001638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800163c:	e7fe      	b.n	800163c <NMI_Handler+0x4>

0800163e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001642:	e7fe      	b.n	8001642 <HardFault_Handler+0x4>

08001644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001648:	e7fe      	b.n	8001648 <MemManage_Handler+0x4>

0800164a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800164e:	e7fe      	b.n	800164e <BusFault_Handler+0x4>

08001650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <UsageFault_Handler+0x4>

08001656 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001684:	f000 f9b6 	bl	80019f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}

0800168c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001690:	4804      	ldr	r0, [pc, #16]	; (80016a4 <RTC_WKUP_IRQHandler+0x18>)
 8001692:	f002 fb67 	bl	8003d64 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8001696:	4803      	ldr	r0, [pc, #12]	; (80016a4 <RTC_WKUP_IRQHandler+0x18>)
 8001698:	f002 fb0c 	bl	8003cb4 <HAL_RTCEx_DeactivateWakeUpTimer>
  HAL_ResumeTick();
 800169c:	f000 f9fe 	bl	8001a9c <HAL_ResumeTick>

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	2000008c 	.word	0x2000008c

080016a8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80016ac:	2001      	movs	r0, #1
 80016ae:	f000 fd61 	bl	8002174 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  // Pinnikeskeytys on herättänyt prosessorin
  // Laitetaan Tick-keskeytys taas päälle jotta ajastukset toimivat normaalisti
  HAL_ResumeTick();
 80016b2:	f000 f9f3 	bl	8001a9c <HAL_ResumeTick>

  /* USER CODE END EXTI0_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <USART2_IRQHandler+0x10>)
 80016c2:	f002 fd31 	bl	8004128 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200000ac 	.word	0x200000ac

080016d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80016d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016d8:	f000 fd4c 	bl	8002174 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  HAL_ResumeTick();
 80016dc:	f000 f9de 	bl	8001a9c <HAL_ResumeTick>

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <_getpid>:
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	2301      	movs	r3, #1
 80016ea:	4618      	mov	r0, r3
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <_kill>:
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
 80016fe:	f003 fbb7 	bl	8004e70 <__errno>
 8001702:	4603      	mov	r3, r0
 8001704:	2216      	movs	r2, #22
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	f04f 33ff 	mov.w	r3, #4294967295
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <_exit>:
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	f04f 31ff 	mov.w	r1, #4294967295
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff ffe7 	bl	80016f4 <_kill>
 8001726:	e7fe      	b.n	8001726 <_exit+0x12>

08001728 <_close>:
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	f04f 33ff 	mov.w	r3, #4294967295
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <_fstat>:
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	2300      	movs	r3, #0
 8001754:	4618      	mov	r0, r3
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <_isatty>:
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	2301      	movs	r3, #1
 800176a:	4618      	mov	r0, r3
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <_lseek>:
 8001776:	b480      	push	{r7}
 8001778:	b085      	sub	sp, #20
 800177a:	af00      	add	r7, sp, #0
 800177c:	60f8      	str	r0, [r7, #12]
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	607a      	str	r2, [r7, #4]
 8001782:	2300      	movs	r3, #0
 8001784:	4618      	mov	r0, r3
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <_sbrk>:
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	4a14      	ldr	r2, [pc, #80]	; (80017ec <_sbrk+0x5c>)
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <_sbrk+0x60>)
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <_sbrk+0x64>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d102      	bne.n	80017b2 <_sbrk+0x22>
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <_sbrk+0x64>)
 80017ae:	4a12      	ldr	r2, [pc, #72]	; (80017f8 <_sbrk+0x68>)
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <_sbrk+0x64>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d207      	bcs.n	80017d0 <_sbrk+0x40>
 80017c0:	f003 fb56 	bl	8004e70 <__errno>
 80017c4:	4603      	mov	r3, r0
 80017c6:	220c      	movs	r2, #12
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	f04f 33ff 	mov.w	r3, #4294967295
 80017ce:	e009      	b.n	80017e4 <_sbrk+0x54>
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <_sbrk+0x64>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <_sbrk+0x64>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	4a05      	ldr	r2, [pc, #20]	; (80017f4 <_sbrk+0x64>)
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20010000 	.word	0x20010000
 80017f0:	00000400 	.word	0x00000400
 80017f4:	200001ac 	.word	0x200001ac
 80017f8:	200001d0 	.word	0x200001d0

080017fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <SystemInit+0x20>)
 8001802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001806:	4a05      	ldr	r2, [pc, #20]	; (800181c <SystemInit+0x20>)
 8001808:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800180c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001824:	4b14      	ldr	r3, [pc, #80]	; (8001878 <MX_USART2_UART_Init+0x58>)
 8001826:	4a15      	ldr	r2, [pc, #84]	; (800187c <MX_USART2_UART_Init+0x5c>)
 8001828:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800182a:	4b13      	ldr	r3, [pc, #76]	; (8001878 <MX_USART2_UART_Init+0x58>)
 800182c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001830:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <MX_USART2_UART_Init+0x58>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001838:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <MX_USART2_UART_Init+0x58>)
 800183a:	2200      	movs	r2, #0
 800183c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <MX_USART2_UART_Init+0x58>)
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <MX_USART2_UART_Init+0x58>)
 8001846:	220c      	movs	r2, #12
 8001848:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <MX_USART2_UART_Init+0x58>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <MX_USART2_UART_Init+0x58>)
 8001852:	2200      	movs	r2, #0
 8001854:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <MX_USART2_UART_Init+0x58>)
 8001858:	2200      	movs	r2, #0
 800185a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <MX_USART2_UART_Init+0x58>)
 800185e:	2200      	movs	r2, #0
 8001860:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001862:	4805      	ldr	r0, [pc, #20]	; (8001878 <MX_USART2_UART_Init+0x58>)
 8001864:	f002 faac 	bl	8003dc0 <HAL_UART_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800186e:	f7fe ff89 	bl	8000784 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200000ac 	.word	0x200000ac
 800187c:	40004400 	.word	0x40004400

08001880 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08a      	sub	sp, #40	; 0x28
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a1b      	ldr	r2, [pc, #108]	; (800190c <HAL_UART_MspInit+0x8c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d130      	bne.n	8001904 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018a2:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <HAL_UART_MspInit+0x90>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	4a1a      	ldr	r2, [pc, #104]	; (8001910 <HAL_UART_MspInit+0x90>)
 80018a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ac:	61d3      	str	r3, [r2, #28]
 80018ae:	4b18      	ldr	r3, [pc, #96]	; (8001910 <HAL_UART_MspInit+0x90>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <HAL_UART_MspInit+0x90>)
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	4a14      	ldr	r2, [pc, #80]	; (8001910 <HAL_UART_MspInit+0x90>)
 80018c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c4:	6153      	str	r3, [r2, #20]
 80018c6:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_UART_MspInit+0x90>)
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018d2:	230c      	movs	r3, #12
 80018d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018e2:	2307      	movs	r3, #7
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4619      	mov	r1, r3
 80018ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f0:	f000 fa9e 	bl	8001e30 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018f4:	2200      	movs	r2, #0
 80018f6:	2100      	movs	r1, #0
 80018f8:	2026      	movs	r0, #38	; 0x26
 80018fa:	f000 f9de 	bl	8001cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018fe:	2026      	movs	r0, #38	; 0x26
 8001900:	f000 f9f7 	bl	8001cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001904:	bf00      	nop
 8001906:	3728      	adds	r7, #40	; 0x28
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40004400 	.word	0x40004400
 8001910:	40021000 	.word	0x40021000

08001914 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800194c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001918:	480d      	ldr	r0, [pc, #52]	; (8001950 <LoopForever+0x6>)
  ldr r1, =_edata
 800191a:	490e      	ldr	r1, [pc, #56]	; (8001954 <LoopForever+0xa>)
  ldr r2, =_sidata
 800191c:	4a0e      	ldr	r2, [pc, #56]	; (8001958 <LoopForever+0xe>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001920:	e002      	b.n	8001928 <LoopCopyDataInit>

08001922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001926:	3304      	adds	r3, #4

08001928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800192a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800192c:	d3f9      	bcc.n	8001922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800192e:	4a0b      	ldr	r2, [pc, #44]	; (800195c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001930:	4c0b      	ldr	r4, [pc, #44]	; (8001960 <LoopForever+0x16>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001934:	e001      	b.n	800193a <LoopFillZerobss>

08001936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001938:	3204      	adds	r2, #4

0800193a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800193a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800193c:	d3fb      	bcc.n	8001936 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800193e:	f7ff ff5d 	bl	80017fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001942:	f003 fc65 	bl	8005210 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001946:	f7fe fe4b 	bl	80005e0 <main>

0800194a <LoopForever>:

LoopForever:
    b LoopForever
 800194a:	e7fe      	b.n	800194a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800194c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001954:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001958:	080063a8 	.word	0x080063a8
  ldr r2, =_sbss
 800195c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001960:	200001d0 	.word	0x200001d0

08001964 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001964:	e7fe      	b.n	8001964 <ADC1_2_IRQHandler>
	...

08001968 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800196c:	4b08      	ldr	r3, [pc, #32]	; (8001990 <HAL_Init+0x28>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a07      	ldr	r2, [pc, #28]	; (8001990 <HAL_Init+0x28>)
 8001972:	f043 0310 	orr.w	r3, r3, #16
 8001976:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001978:	2003      	movs	r0, #3
 800197a:	f000 f993 	bl	8001ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800197e:	2000      	movs	r0, #0
 8001980:	f000 f808 	bl	8001994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001984:	f7ff fe34 	bl	80015f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40022000 	.word	0x40022000

08001994 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_InitTick+0x54>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_InitTick+0x58>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	4619      	mov	r1, r3
 80019a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f9b9 	bl	8001d2a <HAL_SYSTICK_Config>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e00e      	b.n	80019e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b0f      	cmp	r3, #15
 80019c6:	d80a      	bhi.n	80019de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c8:	2200      	movs	r2, #0
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f000 f973 	bl	8001cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d4:	4a06      	ldr	r2, [pc, #24]	; (80019f0 <HAL_InitTick+0x5c>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
 80019dc:	e000      	b.n	80019e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000000 	.word	0x20000000
 80019ec:	20000008 	.word	0x20000008
 80019f0:	20000004 	.word	0x20000004

080019f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_IncTick+0x20>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_IncTick+0x24>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <HAL_IncTick+0x24>)
 8001a06:	6013      	str	r3, [r2, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000008 	.word	0x20000008
 8001a18:	200001bc 	.word	0x200001bc

08001a1c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a20:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <HAL_GetTick+0x14>)
 8001a22:	681b      	ldr	r3, [r3, #0]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	200001bc 	.word	0x200001bc

08001a34 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a3c:	f7ff ffee 	bl	8001a1c <HAL_GetTick>
 8001a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4c:	d005      	beq.n	8001a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <HAL_Delay+0x44>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4413      	add	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a5a:	bf00      	nop
 8001a5c:	f7ff ffde 	bl	8001a1c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d8f7      	bhi.n	8001a5c <HAL_Delay+0x28>
  {
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000008 	.word	0x20000008

08001a7c <HAL_SuspendTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <HAL_SuspendTick+0x1c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <HAL_SuspendTick+0x1c>)
 8001a86:	f023 0302 	bic.w	r3, r3, #2
 8001a8a:	6013      	str	r3, [r2, #0]
                                                   
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000e010 	.word	0xe000e010

08001a9c <HAL_ResumeTick>:
  *         The function is declared as __Weak  to be overwritten  in case of other
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_ResumeTick+0x1c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a04      	ldr	r2, [pc, #16]	; (8001ab8 <HAL_ResumeTick+0x1c>)
 8001aa6:	f043 0302 	orr.w	r3, r3, #2
 8001aaa:	6013      	str	r3, [r2, #0]
  
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	e000e010 	.word	0xe000e010

08001abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aee:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <__NVIC_SetPriorityGrouping+0x44>)
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	60d3      	str	r3, [r2, #12]
}
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b08:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <__NVIC_GetPriorityGrouping+0x18>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	f003 0307 	and.w	r3, r3, #7
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	db0b      	blt.n	8001b4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	f003 021f 	and.w	r2, r3, #31
 8001b38:	4907      	ldr	r1, [pc, #28]	; (8001b58 <__NVIC_EnableIRQ+0x38>)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	095b      	lsrs	r3, r3, #5
 8001b40:	2001      	movs	r0, #1
 8001b42:	fa00 f202 	lsl.w	r2, r0, r2
 8001b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000e100 	.word	0xe000e100

08001b5c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	db12      	blt.n	8001b94 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	f003 021f 	and.w	r2, r3, #31
 8001b74:	490a      	ldr	r1, [pc, #40]	; (8001ba0 <__NVIC_DisableIRQ+0x44>)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	095b      	lsrs	r3, r3, #5
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b82:	3320      	adds	r3, #32
 8001b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b88:	f3bf 8f4f 	dsb	sy
}
 8001b8c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b8e:	f3bf 8f6f 	isb	sy
}
 8001b92:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000e100 	.word	0xe000e100

08001ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	6039      	str	r1, [r7, #0]
 8001bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	db0a      	blt.n	8001bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	490c      	ldr	r1, [pc, #48]	; (8001bf0 <__NVIC_SetPriority+0x4c>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	0112      	lsls	r2, r2, #4
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bcc:	e00a      	b.n	8001be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4908      	ldr	r1, [pc, #32]	; (8001bf4 <__NVIC_SetPriority+0x50>)
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	3b04      	subs	r3, #4
 8001bdc:	0112      	lsls	r2, r2, #4
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	440b      	add	r3, r1
 8001be2:	761a      	strb	r2, [r3, #24]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000e100 	.word	0xe000e100
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	; 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f1c3 0307 	rsb	r3, r3, #7
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	bf28      	it	cs
 8001c16:	2304      	movcs	r3, #4
 8001c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	2b06      	cmp	r3, #6
 8001c20:	d902      	bls.n	8001c28 <NVIC_EncodePriority+0x30>
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3b03      	subs	r3, #3
 8001c26:	e000      	b.n	8001c2a <NVIC_EncodePriority+0x32>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43da      	mvns	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c40:	f04f 31ff 	mov.w	r1, #4294967295
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4a:	43d9      	mvns	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	4313      	orrs	r3, r2
         );
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3724      	adds	r7, #36	; 0x24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c70:	d301      	bcc.n	8001c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00f      	b.n	8001c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c76:	4a0a      	ldr	r2, [pc, #40]	; (8001ca0 <SysTick_Config+0x40>)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c7e:	210f      	movs	r1, #15
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	f7ff ff8e 	bl	8001ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <SysTick_Config+0x40>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c8e:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <SysTick_Config+0x40>)
 8001c90:	2207      	movs	r2, #7
 8001c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	e000e010 	.word	0xe000e010

08001ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff ff05 	bl	8001abc <__NVIC_SetPriorityGrouping>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ccc:	f7ff ff1a 	bl	8001b04 <__NVIC_GetPriorityGrouping>
 8001cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	68b9      	ldr	r1, [r7, #8]
 8001cd6:	6978      	ldr	r0, [r7, #20]
 8001cd8:	f7ff ff8e 	bl	8001bf8 <NVIC_EncodePriority>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff5d 	bl	8001ba4 <__NVIC_SetPriority>
}
 8001cea:	bf00      	nop
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff0d 	bl	8001b20 <__NVIC_EnableIRQ>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	4603      	mov	r3, r0
 8001d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff1d 	bl	8001b5c <__NVIC_DisableIRQ>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff ff94 	bl	8001c60 <SysTick_Config>
 8001d38:	4603      	mov	r3, r0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d008      	beq.n	8001d66 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2204      	movs	r2, #4
 8001d58:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e020      	b.n	8001da8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 020e 	bic.w	r2, r2, #14
 8001d74:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 0201 	bic.w	r2, r2, #1
 8001d84:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8e:	2101      	movs	r1, #1
 8001d90:	fa01 f202 	lsl.w	r2, r1, r2
 8001d94:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d005      	beq.n	8001dd6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2204      	movs	r2, #4
 8001dce:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
 8001dd4:	e027      	b.n	8001e26 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 020e 	bic.w	r2, r2, #14
 8001de4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0201 	bic.w	r2, r2, #1
 8001df4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfe:	2101      	movs	r1, #1
 8001e00:	fa01 f202 	lsl.w	r2, r1, r2
 8001e04:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	4798      	blx	r3
    } 
  }
  return status;
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b087      	sub	sp, #28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e3e:	e160      	b.n	8002102 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	2101      	movs	r1, #1
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 8152 	beq.w	80020fc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d00b      	beq.n	8001e78 <HAL_GPIO_Init+0x48>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d007      	beq.n	8001e78 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e6c:	2b11      	cmp	r3, #17
 8001e6e:	d003      	beq.n	8001e78 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b12      	cmp	r3, #18
 8001e76:	d130      	bne.n	8001eda <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	2203      	movs	r2, #3
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eae:	2201      	movs	r2, #1
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	091b      	lsrs	r3, r3, #4
 8001ec4:	f003 0201 	and.w	r2, r3, #1
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0xea>
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b12      	cmp	r3, #18
 8001f18:	d123      	bne.n	8001f62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	08da      	lsrs	r2, r3, #3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3208      	adds	r2, #8
 8001f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	220f      	movs	r2, #15
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	691a      	ldr	r2, [r3, #16]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	08da      	lsrs	r2, r3, #3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3208      	adds	r2, #8
 8001f5c:	6939      	ldr	r1, [r7, #16]
 8001f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	2203      	movs	r2, #3
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4013      	ands	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 0203 	and.w	r2, r3, #3
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 80ac 	beq.w	80020fc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa4:	4b5e      	ldr	r3, [pc, #376]	; (8002120 <HAL_GPIO_Init+0x2f0>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	4a5d      	ldr	r2, [pc, #372]	; (8002120 <HAL_GPIO_Init+0x2f0>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	6193      	str	r3, [r2, #24]
 8001fb0:	4b5b      	ldr	r3, [pc, #364]	; (8002120 <HAL_GPIO_Init+0x2f0>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fbc:	4a59      	ldr	r2, [pc, #356]	; (8002124 <HAL_GPIO_Init+0x2f4>)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	089b      	lsrs	r3, r3, #2
 8001fc2:	3302      	adds	r3, #2
 8001fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	220f      	movs	r2, #15
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fe6:	d025      	beq.n	8002034 <HAL_GPIO_Init+0x204>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a4f      	ldr	r2, [pc, #316]	; (8002128 <HAL_GPIO_Init+0x2f8>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d01f      	beq.n	8002030 <HAL_GPIO_Init+0x200>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a4e      	ldr	r2, [pc, #312]	; (800212c <HAL_GPIO_Init+0x2fc>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d019      	beq.n	800202c <HAL_GPIO_Init+0x1fc>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a4d      	ldr	r2, [pc, #308]	; (8002130 <HAL_GPIO_Init+0x300>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d013      	beq.n	8002028 <HAL_GPIO_Init+0x1f8>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a4c      	ldr	r2, [pc, #304]	; (8002134 <HAL_GPIO_Init+0x304>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d00d      	beq.n	8002024 <HAL_GPIO_Init+0x1f4>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a4b      	ldr	r2, [pc, #300]	; (8002138 <HAL_GPIO_Init+0x308>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d007      	beq.n	8002020 <HAL_GPIO_Init+0x1f0>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a4a      	ldr	r2, [pc, #296]	; (800213c <HAL_GPIO_Init+0x30c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d101      	bne.n	800201c <HAL_GPIO_Init+0x1ec>
 8002018:	2306      	movs	r3, #6
 800201a:	e00c      	b.n	8002036 <HAL_GPIO_Init+0x206>
 800201c:	2307      	movs	r3, #7
 800201e:	e00a      	b.n	8002036 <HAL_GPIO_Init+0x206>
 8002020:	2305      	movs	r3, #5
 8002022:	e008      	b.n	8002036 <HAL_GPIO_Init+0x206>
 8002024:	2304      	movs	r3, #4
 8002026:	e006      	b.n	8002036 <HAL_GPIO_Init+0x206>
 8002028:	2303      	movs	r3, #3
 800202a:	e004      	b.n	8002036 <HAL_GPIO_Init+0x206>
 800202c:	2302      	movs	r3, #2
 800202e:	e002      	b.n	8002036 <HAL_GPIO_Init+0x206>
 8002030:	2301      	movs	r3, #1
 8002032:	e000      	b.n	8002036 <HAL_GPIO_Init+0x206>
 8002034:	2300      	movs	r3, #0
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	f002 0203 	and.w	r2, r2, #3
 800203c:	0092      	lsls	r2, r2, #2
 800203e:	4093      	lsls	r3, r2
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	4313      	orrs	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002046:	4937      	ldr	r1, [pc, #220]	; (8002124 <HAL_GPIO_Init+0x2f4>)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	3302      	adds	r3, #2
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002054:	4b3a      	ldr	r3, [pc, #232]	; (8002140 <HAL_GPIO_Init+0x310>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	43db      	mvns	r3, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4013      	ands	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002078:	4a31      	ldr	r2, [pc, #196]	; (8002140 <HAL_GPIO_Init+0x310>)
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800207e:	4b30      	ldr	r3, [pc, #192]	; (8002140 <HAL_GPIO_Init+0x310>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	43db      	mvns	r3, r3
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4013      	ands	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4313      	orrs	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020a2:	4a27      	ldr	r2, [pc, #156]	; (8002140 <HAL_GPIO_Init+0x310>)
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020a8:	4b25      	ldr	r3, [pc, #148]	; (8002140 <HAL_GPIO_Init+0x310>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	4013      	ands	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80020cc:	4a1c      	ldr	r2, [pc, #112]	; (8002140 <HAL_GPIO_Init+0x310>)
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020d2:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <HAL_GPIO_Init+0x310>)
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	43db      	mvns	r3, r3
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	4013      	ands	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020f6:	4a12      	ldr	r2, [pc, #72]	; (8002140 <HAL_GPIO_Init+0x310>)
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	3301      	adds	r3, #1
 8002100:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	fa22 f303 	lsr.w	r3, r2, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	f47f ae97 	bne.w	8001e40 <HAL_GPIO_Init+0x10>
  }
}
 8002112:	bf00      	nop
 8002114:	bf00      	nop
 8002116:	371c      	adds	r7, #28
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	40021000 	.word	0x40021000
 8002124:	40010000 	.word	0x40010000
 8002128:	48000400 	.word	0x48000400
 800212c:	48000800 	.word	0x48000800
 8002130:	48000c00 	.word	0x48000c00
 8002134:	48001000 	.word	0x48001000
 8002138:	48001400 	.word	0x48001400
 800213c:	48001800 	.word	0x48001800
 8002140:	40010400 	.word	0x40010400

08002144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	807b      	strh	r3, [r7, #2]
 8002150:	4613      	mov	r3, r2
 8002152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002154:	787b      	ldrb	r3, [r7, #1]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800215a:	887a      	ldrh	r2, [r7, #2]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002160:	e002      	b.n	8002168 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002162:	887a      	ldrh	r2, [r7, #2]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800217e:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002180:	695a      	ldr	r2, [r3, #20]
 8002182:	88fb      	ldrh	r3, [r7, #6]
 8002184:	4013      	ands	r3, r2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d006      	beq.n	8002198 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800218a:	4a05      	ldr	r2, [pc, #20]	; (80021a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800218c:	88fb      	ldrh	r3, [r7, #6]
 800218e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002190:	88fb      	ldrh	r3, [r7, #6]
 8002192:	4618      	mov	r0, r3
 8002194:	f000 f806 	bl	80021a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40010400 	.word	0x40010400

080021a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 80021c0:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a04      	ldr	r2, [pc, #16]	; (80021d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ca:	6013      	str	r3, [r2, #0]
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40007000 	.word	0x40007000

080021dc <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	460b      	mov	r3, r1
 80021e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 80021e8:	4b09      	ldr	r3, [pc, #36]	; (8002210 <HAL_PWR_EnterSLEEPMode+0x34>)
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	4a08      	ldr	r2, [pc, #32]	; (8002210 <HAL_PWR_EnterSLEEPMode+0x34>)
 80021ee:	f023 0304 	bic.w	r3, r3, #4
 80021f2:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80021f4:	78fb      	ldrb	r3, [r7, #3]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80021fa:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80021fc:	e002      	b.n	8002204 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 80021fe:	bf40      	sev
    __WFE();
 8002200:	bf20      	wfe
    __WFE();
 8002202:	bf20      	wfe
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI:Enter STOP mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter STOP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8002224:	4b13      	ldr	r3, [pc, #76]	; (8002274 <HAL_PWR_EnterSTOPMode+0x60>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f023 0303 	bic.w	r3, r3, #3
 8002230:	60fb      	str	r3, [r7, #12]

  /* Set LPDS bit according to Regulator value */
  tmpreg |= Regulator;
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4313      	orrs	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 800223a:	4a0e      	ldr	r2, [pc, #56]	; (8002274 <HAL_PWR_EnterSTOPMode+0x60>)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8002240:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <HAL_PWR_EnterSTOPMode+0x64>)
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	4a0c      	ldr	r2, [pc, #48]	; (8002278 <HAL_PWR_EnterSTOPMode+0x64>)
 8002246:	f043 0304 	orr.w	r3, r3, #4
 800224a:	6113      	str	r3, [r2, #16]

  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_PWR_EnterSTOPMode+0x42>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002252:	bf30      	wfi
 8002254:	e002      	b.n	800225c <HAL_PWR_EnterSTOPMode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002256:	bf40      	sev
    __WFE();
 8002258:	bf20      	wfe
    __WFE();
 800225a:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <HAL_PWR_EnterSTOPMode+0x64>)
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	4a05      	ldr	r2, [pc, #20]	; (8002278 <HAL_PWR_EnterSTOPMode+0x64>)
 8002262:	f023 0304 	bic.w	r3, r3, #4
 8002266:	6113      	str	r3, [r2, #16]
}
 8002268:	bf00      	nop
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	40007000 	.word	0x40007000
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <HAL_PWR_EnterSTANDBYMode>:
  *            Alarm out, or RTC clock calibration out, 
  *          - WKUP pins if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 8002280:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a07      	ldr	r2, [pc, #28]	; (80022a4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8002286:	f043 0302 	orr.w	r3, r3, #2
 800228a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	4a05      	ldr	r2, [pc, #20]	; (80022a8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8002292:	f043 0304 	orr.w	r3, r3, #4
 8002296:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8002298:	bf30      	wfi
}
 800229a:	bf00      	nop
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	40007000 	.word	0x40007000
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	1d3b      	adds	r3, r7, #4
 80022b6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022b8:	1d3b      	adds	r3, r7, #4
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d102      	bne.n	80022c6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	f000 bf01 	b.w	80030c8 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022c6:	1d3b      	adds	r3, r7, #4
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 8160 	beq.w	8002596 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80022d6:	4bae      	ldr	r3, [pc, #696]	; (8002590 <HAL_RCC_OscConfig+0x2e4>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d00c      	beq.n	80022fc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022e2:	4bab      	ldr	r3, [pc, #684]	; (8002590 <HAL_RCC_OscConfig+0x2e4>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 030c 	and.w	r3, r3, #12
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d159      	bne.n	80023a2 <HAL_RCC_OscConfig+0xf6>
 80022ee:	4ba8      	ldr	r3, [pc, #672]	; (8002590 <HAL_RCC_OscConfig+0x2e4>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80022f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022fa:	d152      	bne.n	80023a2 <HAL_RCC_OscConfig+0xf6>
 80022fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002300:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002304:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002308:	fa93 f3a3 	rbit	r3, r3
 800230c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 8002310:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002314:	fab3 f383 	clz	r3, r3
 8002318:	b2db      	uxtb	r3, r3
 800231a:	095b      	lsrs	r3, r3, #5
 800231c:	b2db      	uxtb	r3, r3
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b01      	cmp	r3, #1
 8002326:	d102      	bne.n	800232e <HAL_RCC_OscConfig+0x82>
 8002328:	4b99      	ldr	r3, [pc, #612]	; (8002590 <HAL_RCC_OscConfig+0x2e4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	e015      	b.n	800235a <HAL_RCC_OscConfig+0xae>
 800232e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002332:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800233a:	fa93 f3a3 	rbit	r3, r3
 800233e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002342:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002346:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800234a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800234e:	fa93 f3a3 	rbit	r3, r3
 8002352:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002356:	4b8e      	ldr	r3, [pc, #568]	; (8002590 <HAL_RCC_OscConfig+0x2e4>)
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800235e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002362:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002366:	fa92 f2a2 	rbit	r2, r2
 800236a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800236e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002372:	fab2 f282 	clz	r2, r2
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	f042 0220 	orr.w	r2, r2, #32
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	f002 021f 	and.w	r2, r2, #31
 8002382:	2101      	movs	r1, #1
 8002384:	fa01 f202 	lsl.w	r2, r1, r2
 8002388:	4013      	ands	r3, r2
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 8102 	beq.w	8002594 <HAL_RCC_OscConfig+0x2e8>
 8002390:	1d3b      	adds	r3, r7, #4
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	f040 80fc 	bne.w	8002594 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	f000 be93 	b.w	80030c8 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023a2:	1d3b      	adds	r3, r7, #4
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ac:	d106      	bne.n	80023bc <HAL_RCC_OscConfig+0x110>
 80023ae:	4b78      	ldr	r3, [pc, #480]	; (8002590 <HAL_RCC_OscConfig+0x2e4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a77      	ldr	r2, [pc, #476]	; (8002590 <HAL_RCC_OscConfig+0x2e4>)
 80023b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	e030      	b.n	800241e <HAL_RCC_OscConfig+0x172>
 80023bc:	1d3b      	adds	r3, r7, #4
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10c      	bne.n	80023e0 <HAL_RCC_OscConfig+0x134>
 80023c6:	4b72      	ldr	r3, [pc, #456]	; (8002590 <HAL_RCC_OscConfig+0x2e4>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a71      	ldr	r2, [pc, #452]	; (8002590 <HAL_RCC_OscConfig+0x2e4>)
 80023cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	4b6f      	ldr	r3, [pc, #444]	; (8002590 <HAL_RCC_OscConfig+0x2e4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a6e      	ldr	r2, [pc, #440]	; (8002590 <HAL_RCC_OscConfig+0x2e4>)
 80023d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	e01e      	b.n	800241e <HAL_RCC_OscConfig+0x172>
 80023e0:	1d3b      	adds	r3, r7, #4
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023ea:	d10c      	bne.n	8002406 <HAL_RCC_OscConfig+0x15a>
 80023ec:	4b68      	ldr	r3, [pc, #416]	; (8002590 <HAL_RCC_OscConfig+0x2e4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a67      	ldr	r2, [pc, #412]	; (8002590 <HAL_RCC_OscConfig+0x2e4>)
 80023f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	4b65      	ldr	r3, [pc, #404]	; (8002590 <HAL_RCC_OscConfig+0x2e4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a64      	ldr	r2, [pc, #400]	; (8002590 <HAL_RCC_OscConfig+0x2e4>)
 80023fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	e00b      	b.n	800241e <HAL_RCC_OscConfig+0x172>
 8002406:	4b62      	ldr	r3, [pc, #392]	; (8002590 <HAL_RCC_OscConfig+0x2e4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a61      	ldr	r2, [pc, #388]	; (8002590 <HAL_RCC_OscConfig+0x2e4>)
 800240c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	4b5f      	ldr	r3, [pc, #380]	; (8002590 <HAL_RCC_OscConfig+0x2e4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a5e      	ldr	r2, [pc, #376]	; (8002590 <HAL_RCC_OscConfig+0x2e4>)
 8002418:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800241c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d059      	beq.n	80024dc <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002428:	f7ff faf8 	bl	8001a1c <HAL_GetTick>
 800242c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002430:	e00a      	b.n	8002448 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002432:	f7ff faf3 	bl	8001a1c <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b64      	cmp	r3, #100	; 0x64
 8002440:	d902      	bls.n	8002448 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	f000 be40 	b.w	80030c8 <HAL_RCC_OscConfig+0xe1c>
 8002448:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800244c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002454:	fa93 f3a3 	rbit	r3, r3
 8002458:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800245c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002460:	fab3 f383 	clz	r3, r3
 8002464:	b2db      	uxtb	r3, r3
 8002466:	095b      	lsrs	r3, r3, #5
 8002468:	b2db      	uxtb	r3, r3
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b01      	cmp	r3, #1
 8002472:	d102      	bne.n	800247a <HAL_RCC_OscConfig+0x1ce>
 8002474:	4b46      	ldr	r3, [pc, #280]	; (8002590 <HAL_RCC_OscConfig+0x2e4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	e015      	b.n	80024a6 <HAL_RCC_OscConfig+0x1fa>
 800247a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800247e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002486:	fa93 f3a3 	rbit	r3, r3
 800248a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800248e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002492:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002496:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800249a:	fa93 f3a3 	rbit	r3, r3
 800249e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80024a2:	4b3b      	ldr	r3, [pc, #236]	; (8002590 <HAL_RCC_OscConfig+0x2e4>)
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024aa:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80024ae:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80024b2:	fa92 f2a2 	rbit	r2, r2
 80024b6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80024ba:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80024be:	fab2 f282 	clz	r2, r2
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	f042 0220 	orr.w	r2, r2, #32
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	f002 021f 	and.w	r2, r2, #31
 80024ce:	2101      	movs	r1, #1
 80024d0:	fa01 f202 	lsl.w	r2, r1, r2
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0ab      	beq.n	8002432 <HAL_RCC_OscConfig+0x186>
 80024da:	e05c      	b.n	8002596 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7ff fa9e 	bl	8001a1c <HAL_GetTick>
 80024e0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e4:	e00a      	b.n	80024fc <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e6:	f7ff fa99 	bl	8001a1c <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b64      	cmp	r3, #100	; 0x64
 80024f4:	d902      	bls.n	80024fc <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	f000 bde6 	b.w	80030c8 <HAL_RCC_OscConfig+0xe1c>
 80024fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002500:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002504:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002508:	fa93 f3a3 	rbit	r3, r3
 800250c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002510:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002514:	fab3 f383 	clz	r3, r3
 8002518:	b2db      	uxtb	r3, r3
 800251a:	095b      	lsrs	r3, r3, #5
 800251c:	b2db      	uxtb	r3, r3
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b01      	cmp	r3, #1
 8002526:	d102      	bne.n	800252e <HAL_RCC_OscConfig+0x282>
 8002528:	4b19      	ldr	r3, [pc, #100]	; (8002590 <HAL_RCC_OscConfig+0x2e4>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	e015      	b.n	800255a <HAL_RCC_OscConfig+0x2ae>
 800252e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002532:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800253a:	fa93 f3a3 	rbit	r3, r3
 800253e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002542:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002546:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800254a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800254e:	fa93 f3a3 	rbit	r3, r3
 8002552:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002556:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <HAL_RCC_OscConfig+0x2e4>)
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800255e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002562:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002566:	fa92 f2a2 	rbit	r2, r2
 800256a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800256e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002572:	fab2 f282 	clz	r2, r2
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	f042 0220 	orr.w	r2, r2, #32
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	f002 021f 	and.w	r2, r2, #31
 8002582:	2101      	movs	r1, #1
 8002584:	fa01 f202 	lsl.w	r2, r1, r2
 8002588:	4013      	ands	r3, r2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1ab      	bne.n	80024e6 <HAL_RCC_OscConfig+0x23a>
 800258e:	e002      	b.n	8002596 <HAL_RCC_OscConfig+0x2ea>
 8002590:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002596:	1d3b      	adds	r3, r7, #4
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 8170 	beq.w	8002886 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80025a6:	4bd0      	ldr	r3, [pc, #832]	; (80028e8 <HAL_RCC_OscConfig+0x63c>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00c      	beq.n	80025cc <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80025b2:	4bcd      	ldr	r3, [pc, #820]	; (80028e8 <HAL_RCC_OscConfig+0x63c>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f003 030c 	and.w	r3, r3, #12
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d16d      	bne.n	800269a <HAL_RCC_OscConfig+0x3ee>
 80025be:	4bca      	ldr	r3, [pc, #808]	; (80028e8 <HAL_RCC_OscConfig+0x63c>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80025c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025ca:	d166      	bne.n	800269a <HAL_RCC_OscConfig+0x3ee>
 80025cc:	2302      	movs	r3, #2
 80025ce:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80025d6:	fa93 f3a3 	rbit	r3, r3
 80025da:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80025de:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e2:	fab3 f383 	clz	r3, r3
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	095b      	lsrs	r3, r3, #5
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d102      	bne.n	80025fc <HAL_RCC_OscConfig+0x350>
 80025f6:	4bbc      	ldr	r3, [pc, #752]	; (80028e8 <HAL_RCC_OscConfig+0x63c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	e013      	b.n	8002624 <HAL_RCC_OscConfig+0x378>
 80025fc:	2302      	movs	r3, #2
 80025fe:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002606:	fa93 f3a3 	rbit	r3, r3
 800260a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800260e:	2302      	movs	r3, #2
 8002610:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002614:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002618:	fa93 f3a3 	rbit	r3, r3
 800261c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002620:	4bb1      	ldr	r3, [pc, #708]	; (80028e8 <HAL_RCC_OscConfig+0x63c>)
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	2202      	movs	r2, #2
 8002626:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800262a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800262e:	fa92 f2a2 	rbit	r2, r2
 8002632:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002636:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800263a:	fab2 f282 	clz	r2, r2
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	f042 0220 	orr.w	r2, r2, #32
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	f002 021f 	and.w	r2, r2, #31
 800264a:	2101      	movs	r1, #1
 800264c:	fa01 f202 	lsl.w	r2, r1, r2
 8002650:	4013      	ands	r3, r2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d007      	beq.n	8002666 <HAL_RCC_OscConfig+0x3ba>
 8002656:	1d3b      	adds	r3, r7, #4
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d002      	beq.n	8002666 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	f000 bd31 	b.w	80030c8 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002666:	4ba0      	ldr	r3, [pc, #640]	; (80028e8 <HAL_RCC_OscConfig+0x63c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800266e:	1d3b      	adds	r3, r7, #4
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	21f8      	movs	r1, #248	; 0xf8
 8002676:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800267e:	fa91 f1a1 	rbit	r1, r1
 8002682:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002686:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800268a:	fab1 f181 	clz	r1, r1
 800268e:	b2c9      	uxtb	r1, r1
 8002690:	408b      	lsls	r3, r1
 8002692:	4995      	ldr	r1, [pc, #596]	; (80028e8 <HAL_RCC_OscConfig+0x63c>)
 8002694:	4313      	orrs	r3, r2
 8002696:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002698:	e0f5      	b.n	8002886 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800269a:	1d3b      	adds	r3, r7, #4
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 8085 	beq.w	80027b0 <HAL_RCC_OscConfig+0x504>
 80026a6:	2301      	movs	r3, #1
 80026a8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ac:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80026b0:	fa93 f3a3 	rbit	r3, r3
 80026b4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80026b8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026bc:	fab3 f383 	clz	r3, r3
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026c6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	461a      	mov	r2, r3
 80026ce:	2301      	movs	r3, #1
 80026d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d2:	f7ff f9a3 	bl	8001a1c <HAL_GetTick>
 80026d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026da:	e00a      	b.n	80026f2 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026dc:	f7ff f99e 	bl	8001a1c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d902      	bls.n	80026f2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	f000 bceb 	b.w	80030c8 <HAL_RCC_OscConfig+0xe1c>
 80026f2:	2302      	movs	r3, #2
 80026f4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80026fc:	fa93 f3a3 	rbit	r3, r3
 8002700:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002704:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002708:	fab3 f383 	clz	r3, r3
 800270c:	b2db      	uxtb	r3, r3
 800270e:	095b      	lsrs	r3, r3, #5
 8002710:	b2db      	uxtb	r3, r3
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b01      	cmp	r3, #1
 800271a:	d102      	bne.n	8002722 <HAL_RCC_OscConfig+0x476>
 800271c:	4b72      	ldr	r3, [pc, #456]	; (80028e8 <HAL_RCC_OscConfig+0x63c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	e013      	b.n	800274a <HAL_RCC_OscConfig+0x49e>
 8002722:	2302      	movs	r3, #2
 8002724:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002728:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800272c:	fa93 f3a3 	rbit	r3, r3
 8002730:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002734:	2302      	movs	r3, #2
 8002736:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800273a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800273e:	fa93 f3a3 	rbit	r3, r3
 8002742:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002746:	4b68      	ldr	r3, [pc, #416]	; (80028e8 <HAL_RCC_OscConfig+0x63c>)
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	2202      	movs	r2, #2
 800274c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002750:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002754:	fa92 f2a2 	rbit	r2, r2
 8002758:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800275c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002760:	fab2 f282 	clz	r2, r2
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	f042 0220 	orr.w	r2, r2, #32
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	f002 021f 	and.w	r2, r2, #31
 8002770:	2101      	movs	r1, #1
 8002772:	fa01 f202 	lsl.w	r2, r1, r2
 8002776:	4013      	ands	r3, r2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0af      	beq.n	80026dc <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277c:	4b5a      	ldr	r3, [pc, #360]	; (80028e8 <HAL_RCC_OscConfig+0x63c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002784:	1d3b      	adds	r3, r7, #4
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	21f8      	movs	r1, #248	; 0xf8
 800278c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002794:	fa91 f1a1 	rbit	r1, r1
 8002798:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800279c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80027a0:	fab1 f181 	clz	r1, r1
 80027a4:	b2c9      	uxtb	r1, r1
 80027a6:	408b      	lsls	r3, r1
 80027a8:	494f      	ldr	r1, [pc, #316]	; (80028e8 <HAL_RCC_OscConfig+0x63c>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]
 80027ae:	e06a      	b.n	8002886 <HAL_RCC_OscConfig+0x5da>
 80027b0:	2301      	movs	r3, #1
 80027b2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80027ba:	fa93 f3a3 	rbit	r3, r3
 80027be:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80027c2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	461a      	mov	r2, r3
 80027d8:	2300      	movs	r3, #0
 80027da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027dc:	f7ff f91e 	bl	8001a1c <HAL_GetTick>
 80027e0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027e4:	e00a      	b.n	80027fc <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027e6:	f7ff f919 	bl	8001a1c <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d902      	bls.n	80027fc <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	f000 bc66 	b.w	80030c8 <HAL_RCC_OscConfig+0xe1c>
 80027fc:	2302      	movs	r3, #2
 80027fe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002802:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002806:	fa93 f3a3 	rbit	r3, r3
 800280a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800280e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	095b      	lsrs	r3, r3, #5
 800281a:	b2db      	uxtb	r3, r3
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b01      	cmp	r3, #1
 8002824:	d102      	bne.n	800282c <HAL_RCC_OscConfig+0x580>
 8002826:	4b30      	ldr	r3, [pc, #192]	; (80028e8 <HAL_RCC_OscConfig+0x63c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	e013      	b.n	8002854 <HAL_RCC_OscConfig+0x5a8>
 800282c:	2302      	movs	r3, #2
 800282e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002836:	fa93 f3a3 	rbit	r3, r3
 800283a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800283e:	2302      	movs	r3, #2
 8002840:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002844:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002850:	4b25      	ldr	r3, [pc, #148]	; (80028e8 <HAL_RCC_OscConfig+0x63c>)
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	2202      	movs	r2, #2
 8002856:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800285a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800285e:	fa92 f2a2 	rbit	r2, r2
 8002862:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002866:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800286a:	fab2 f282 	clz	r2, r2
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	f042 0220 	orr.w	r2, r2, #32
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	f002 021f 	and.w	r2, r2, #31
 800287a:	2101      	movs	r1, #1
 800287c:	fa01 f202 	lsl.w	r2, r1, r2
 8002880:	4013      	ands	r3, r2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1af      	bne.n	80027e6 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002886:	1d3b      	adds	r3, r7, #4
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 80da 	beq.w	8002a4a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002896:	1d3b      	adds	r3, r7, #4
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d069      	beq.n	8002974 <HAL_RCC_OscConfig+0x6c8>
 80028a0:	2301      	movs	r3, #1
 80028a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028aa:	fa93 f3a3 	rbit	r3, r3
 80028ae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80028b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028b6:	fab3 f383 	clz	r3, r3
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	461a      	mov	r2, r3
 80028be:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <HAL_RCC_OscConfig+0x640>)
 80028c0:	4413      	add	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	461a      	mov	r2, r3
 80028c6:	2301      	movs	r3, #1
 80028c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ca:	f7ff f8a7 	bl	8001a1c <HAL_GetTick>
 80028ce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028d2:	e00d      	b.n	80028f0 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028d4:	f7ff f8a2 	bl	8001a1c <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d905      	bls.n	80028f0 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e3ef      	b.n	80030c8 <HAL_RCC_OscConfig+0xe1c>
 80028e8:	40021000 	.word	0x40021000
 80028ec:	10908120 	.word	0x10908120
 80028f0:	2302      	movs	r3, #2
 80028f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028fa:	fa93 f2a3 	rbit	r2, r3
 80028fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002908:	2202      	movs	r2, #2
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	fa93 f2a3 	rbit	r2, r3
 8002916:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002920:	2202      	movs	r2, #2
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	fa93 f2a3 	rbit	r2, r3
 800292e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002932:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002934:	4ba4      	ldr	r3, [pc, #656]	; (8002bc8 <HAL_RCC_OscConfig+0x91c>)
 8002936:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002938:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800293c:	2102      	movs	r1, #2
 800293e:	6019      	str	r1, [r3, #0]
 8002940:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	fa93 f1a3 	rbit	r1, r3
 800294a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800294e:	6019      	str	r1, [r3, #0]
  return result;
 8002950:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	fab3 f383 	clz	r3, r3
 800295a:	b2db      	uxtb	r3, r3
 800295c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002960:	b2db      	uxtb	r3, r3
 8002962:	f003 031f 	and.w	r3, r3, #31
 8002966:	2101      	movs	r1, #1
 8002968:	fa01 f303 	lsl.w	r3, r1, r3
 800296c:	4013      	ands	r3, r2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0b0      	beq.n	80028d4 <HAL_RCC_OscConfig+0x628>
 8002972:	e06a      	b.n	8002a4a <HAL_RCC_OscConfig+0x79e>
 8002974:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002978:	2201      	movs	r2, #1
 800297a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	fa93 f2a3 	rbit	r2, r3
 8002986:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800298a:	601a      	str	r2, [r3, #0]
  return result;
 800298c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002990:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002992:	fab3 f383 	clz	r3, r3
 8002996:	b2db      	uxtb	r3, r3
 8002998:	461a      	mov	r2, r3
 800299a:	4b8c      	ldr	r3, [pc, #560]	; (8002bcc <HAL_RCC_OscConfig+0x920>)
 800299c:	4413      	add	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	461a      	mov	r2, r3
 80029a2:	2300      	movs	r3, #0
 80029a4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a6:	f7ff f839 	bl	8001a1c <HAL_GetTick>
 80029aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ae:	e009      	b.n	80029c4 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029b0:	f7ff f834 	bl	8001a1c <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e381      	b.n	80030c8 <HAL_RCC_OscConfig+0xe1c>
 80029c4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80029c8:	2202      	movs	r2, #2
 80029ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029cc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	fa93 f2a3 	rbit	r2, r3
 80029d6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80029e0:	2202      	movs	r2, #2
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	fa93 f2a3 	rbit	r2, r3
 80029ee:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029f8:	2202      	movs	r2, #2
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	fa93 f2a3 	rbit	r2, r3
 8002a06:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002a0a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a0c:	4b6e      	ldr	r3, [pc, #440]	; (8002bc8 <HAL_RCC_OscConfig+0x91c>)
 8002a0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a10:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a14:	2102      	movs	r1, #2
 8002a16:	6019      	str	r1, [r3, #0]
 8002a18:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	fa93 f1a3 	rbit	r1, r3
 8002a22:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002a26:	6019      	str	r1, [r3, #0]
  return result;
 8002a28:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	fab3 f383 	clz	r3, r3
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	f003 031f 	and.w	r3, r3, #31
 8002a3e:	2101      	movs	r1, #1
 8002a40:	fa01 f303 	lsl.w	r3, r1, r3
 8002a44:	4013      	ands	r3, r2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1b2      	bne.n	80029b0 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a4a:	1d3b      	adds	r3, r7, #4
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 8157 	beq.w	8002d08 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a60:	4b59      	ldr	r3, [pc, #356]	; (8002bc8 <HAL_RCC_OscConfig+0x91c>)
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d112      	bne.n	8002a92 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a6c:	4b56      	ldr	r3, [pc, #344]	; (8002bc8 <HAL_RCC_OscConfig+0x91c>)
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	4a55      	ldr	r2, [pc, #340]	; (8002bc8 <HAL_RCC_OscConfig+0x91c>)
 8002a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a76:	61d3      	str	r3, [r2, #28]
 8002a78:	4b53      	ldr	r3, [pc, #332]	; (8002bc8 <HAL_RCC_OscConfig+0x91c>)
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002a80:	f107 030c 	add.w	r3, r7, #12
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	f107 030c 	add.w	r3, r7, #12
 8002a8a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a92:	4b4f      	ldr	r3, [pc, #316]	; (8002bd0 <HAL_RCC_OscConfig+0x924>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d11a      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a9e:	4b4c      	ldr	r3, [pc, #304]	; (8002bd0 <HAL_RCC_OscConfig+0x924>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a4b      	ldr	r2, [pc, #300]	; (8002bd0 <HAL_RCC_OscConfig+0x924>)
 8002aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aaa:	f7fe ffb7 	bl	8001a1c <HAL_GetTick>
 8002aae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab2:	e009      	b.n	8002ac8 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab4:	f7fe ffb2 	bl	8001a1c <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b64      	cmp	r3, #100	; 0x64
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e2ff      	b.n	80030c8 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac8:	4b41      	ldr	r3, [pc, #260]	; (8002bd0 <HAL_RCC_OscConfig+0x924>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0ef      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad4:	1d3b      	adds	r3, r7, #4
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d106      	bne.n	8002aec <HAL_RCC_OscConfig+0x840>
 8002ade:	4b3a      	ldr	r3, [pc, #232]	; (8002bc8 <HAL_RCC_OscConfig+0x91c>)
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	4a39      	ldr	r2, [pc, #228]	; (8002bc8 <HAL_RCC_OscConfig+0x91c>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	6213      	str	r3, [r2, #32]
 8002aea:	e02f      	b.n	8002b4c <HAL_RCC_OscConfig+0x8a0>
 8002aec:	1d3b      	adds	r3, r7, #4
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10c      	bne.n	8002b10 <HAL_RCC_OscConfig+0x864>
 8002af6:	4b34      	ldr	r3, [pc, #208]	; (8002bc8 <HAL_RCC_OscConfig+0x91c>)
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	4a33      	ldr	r2, [pc, #204]	; (8002bc8 <HAL_RCC_OscConfig+0x91c>)
 8002afc:	f023 0301 	bic.w	r3, r3, #1
 8002b00:	6213      	str	r3, [r2, #32]
 8002b02:	4b31      	ldr	r3, [pc, #196]	; (8002bc8 <HAL_RCC_OscConfig+0x91c>)
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	4a30      	ldr	r2, [pc, #192]	; (8002bc8 <HAL_RCC_OscConfig+0x91c>)
 8002b08:	f023 0304 	bic.w	r3, r3, #4
 8002b0c:	6213      	str	r3, [r2, #32]
 8002b0e:	e01d      	b.n	8002b4c <HAL_RCC_OscConfig+0x8a0>
 8002b10:	1d3b      	adds	r3, r7, #4
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b05      	cmp	r3, #5
 8002b18:	d10c      	bne.n	8002b34 <HAL_RCC_OscConfig+0x888>
 8002b1a:	4b2b      	ldr	r3, [pc, #172]	; (8002bc8 <HAL_RCC_OscConfig+0x91c>)
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	4a2a      	ldr	r2, [pc, #168]	; (8002bc8 <HAL_RCC_OscConfig+0x91c>)
 8002b20:	f043 0304 	orr.w	r3, r3, #4
 8002b24:	6213      	str	r3, [r2, #32]
 8002b26:	4b28      	ldr	r3, [pc, #160]	; (8002bc8 <HAL_RCC_OscConfig+0x91c>)
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	4a27      	ldr	r2, [pc, #156]	; (8002bc8 <HAL_RCC_OscConfig+0x91c>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	6213      	str	r3, [r2, #32]
 8002b32:	e00b      	b.n	8002b4c <HAL_RCC_OscConfig+0x8a0>
 8002b34:	4b24      	ldr	r3, [pc, #144]	; (8002bc8 <HAL_RCC_OscConfig+0x91c>)
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	4a23      	ldr	r2, [pc, #140]	; (8002bc8 <HAL_RCC_OscConfig+0x91c>)
 8002b3a:	f023 0301 	bic.w	r3, r3, #1
 8002b3e:	6213      	str	r3, [r2, #32]
 8002b40:	4b21      	ldr	r3, [pc, #132]	; (8002bc8 <HAL_RCC_OscConfig+0x91c>)
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	4a20      	ldr	r2, [pc, #128]	; (8002bc8 <HAL_RCC_OscConfig+0x91c>)
 8002b46:	f023 0304 	bic.w	r3, r3, #4
 8002b4a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b4c:	1d3b      	adds	r3, r7, #4
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d06a      	beq.n	8002c2c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b56:	f7fe ff61 	bl	8001a1c <HAL_GetTick>
 8002b5a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5e:	e00b      	b.n	8002b78 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b60:	f7fe ff5c 	bl	8001a1c <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e2a7      	b.n	80030c8 <HAL_RCC_OscConfig+0xe1c>
 8002b78:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b80:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	fa93 f2a3 	rbit	r2, r3
 8002b8a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002b94:	2202      	movs	r2, #2
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	fa93 f2a3 	rbit	r2, r3
 8002ba2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002ba6:	601a      	str	r2, [r3, #0]
  return result;
 8002ba8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002bac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bae:	fab3 f383 	clz	r3, r3
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	095b      	lsrs	r3, r3, #5
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	f043 0302 	orr.w	r3, r3, #2
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d108      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x928>
 8002bc2:	4b01      	ldr	r3, [pc, #4]	; (8002bc8 <HAL_RCC_OscConfig+0x91c>)
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	e013      	b.n	8002bf0 <HAL_RCC_OscConfig+0x944>
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	10908120 	.word	0x10908120
 8002bd0:	40007000 	.word	0x40007000
 8002bd4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002bd8:	2202      	movs	r2, #2
 8002bda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	fa93 f2a3 	rbit	r2, r3
 8002be6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	4bc0      	ldr	r3, [pc, #768]	; (8002ef0 <HAL_RCC_OscConfig+0xc44>)
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002bf4:	2102      	movs	r1, #2
 8002bf6:	6011      	str	r1, [r2, #0]
 8002bf8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002bfc:	6812      	ldr	r2, [r2, #0]
 8002bfe:	fa92 f1a2 	rbit	r1, r2
 8002c02:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002c06:	6011      	str	r1, [r2, #0]
  return result;
 8002c08:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002c0c:	6812      	ldr	r2, [r2, #0]
 8002c0e:	fab2 f282 	clz	r2, r2
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	f002 021f 	and.w	r2, r2, #31
 8002c1e:	2101      	movs	r1, #1
 8002c20:	fa01 f202 	lsl.w	r2, r1, r2
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d09a      	beq.n	8002b60 <HAL_RCC_OscConfig+0x8b4>
 8002c2a:	e063      	b.n	8002cf4 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2c:	f7fe fef6 	bl	8001a1c <HAL_GetTick>
 8002c30:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c34:	e00b      	b.n	8002c4e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c36:	f7fe fef1 	bl	8001a1c <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e23c      	b.n	80030c8 <HAL_RCC_OscConfig+0xe1c>
 8002c4e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c52:	2202      	movs	r2, #2
 8002c54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c56:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	fa93 f2a3 	rbit	r2, r3
 8002c60:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	fa93 f2a3 	rbit	r2, r3
 8002c78:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c7c:	601a      	str	r2, [r3, #0]
  return result;
 8002c7e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c82:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c84:	fab3 f383 	clz	r3, r3
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	095b      	lsrs	r3, r3, #5
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	f043 0302 	orr.w	r3, r3, #2
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d102      	bne.n	8002c9e <HAL_RCC_OscConfig+0x9f2>
 8002c98:	4b95      	ldr	r3, [pc, #596]	; (8002ef0 <HAL_RCC_OscConfig+0xc44>)
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	e00d      	b.n	8002cba <HAL_RCC_OscConfig+0xa0e>
 8002c9e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	fa93 f2a3 	rbit	r2, r3
 8002cb0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	4b8e      	ldr	r3, [pc, #568]	; (8002ef0 <HAL_RCC_OscConfig+0xc44>)
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002cbe:	2102      	movs	r1, #2
 8002cc0:	6011      	str	r1, [r2, #0]
 8002cc2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	fa92 f1a2 	rbit	r1, r2
 8002ccc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002cd0:	6011      	str	r1, [r2, #0]
  return result;
 8002cd2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002cd6:	6812      	ldr	r2, [r2, #0]
 8002cd8:	fab2 f282 	clz	r2, r2
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	f002 021f 	and.w	r2, r2, #31
 8002ce8:	2101      	movs	r1, #1
 8002cea:	fa01 f202 	lsl.w	r2, r1, r2
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1a0      	bne.n	8002c36 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cf4:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d105      	bne.n	8002d08 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfc:	4b7c      	ldr	r3, [pc, #496]	; (8002ef0 <HAL_RCC_OscConfig+0xc44>)
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	4a7b      	ldr	r2, [pc, #492]	; (8002ef0 <HAL_RCC_OscConfig+0xc44>)
 8002d02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d06:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d08:	1d3b      	adds	r3, r7, #4
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 81d9 	beq.w	80030c6 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d14:	4b76      	ldr	r3, [pc, #472]	; (8002ef0 <HAL_RCC_OscConfig+0xc44>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 030c 	and.w	r3, r3, #12
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	f000 81a6 	beq.w	800306e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d22:	1d3b      	adds	r3, r7, #4
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	f040 811e 	bne.w	8002f6a <HAL_RCC_OscConfig+0xcbe>
 8002d2e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002d32:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d38:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	fa93 f2a3 	rbit	r2, r3
 8002d42:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002d46:	601a      	str	r2, [r3, #0]
  return result;
 8002d48:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002d4c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d4e:	fab3 f383 	clz	r3, r3
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d58:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	461a      	mov	r2, r3
 8002d60:	2300      	movs	r3, #0
 8002d62:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7fe fe5a 	bl	8001a1c <HAL_GetTick>
 8002d68:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d6c:	e009      	b.n	8002d82 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d6e:	f7fe fe55 	bl	8001a1c <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e1a2      	b.n	80030c8 <HAL_RCC_OscConfig+0xe1c>
 8002d82:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	fa93 f2a3 	rbit	r2, r3
 8002d96:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d9a:	601a      	str	r2, [r3, #0]
  return result;
 8002d9c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002da0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002da2:	fab3 f383 	clz	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	095b      	lsrs	r3, r3, #5
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d102      	bne.n	8002dbc <HAL_RCC_OscConfig+0xb10>
 8002db6:	4b4e      	ldr	r3, [pc, #312]	; (8002ef0 <HAL_RCC_OscConfig+0xc44>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	e01b      	b.n	8002df4 <HAL_RCC_OscConfig+0xb48>
 8002dbc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002dc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	fa93 f2a3 	rbit	r2, r3
 8002dd0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002dda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	fa93 f2a3 	rbit	r2, r3
 8002dea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	4b3f      	ldr	r3, [pc, #252]	; (8002ef0 <HAL_RCC_OscConfig+0xc44>)
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002df8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002dfc:	6011      	str	r1, [r2, #0]
 8002dfe:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	fa92 f1a2 	rbit	r1, r2
 8002e08:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002e0c:	6011      	str	r1, [r2, #0]
  return result;
 8002e0e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002e12:	6812      	ldr	r2, [r2, #0]
 8002e14:	fab2 f282 	clz	r2, r2
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	f042 0220 	orr.w	r2, r2, #32
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	f002 021f 	and.w	r2, r2, #31
 8002e24:	2101      	movs	r1, #1
 8002e26:	fa01 f202 	lsl.w	r2, r1, r2
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d19e      	bne.n	8002d6e <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e30:	4b2f      	ldr	r3, [pc, #188]	; (8002ef0 <HAL_RCC_OscConfig+0xc44>)
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	f023 020f 	bic.w	r2, r3, #15
 8002e38:	1d3b      	adds	r3, r7, #4
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	492c      	ldr	r1, [pc, #176]	; (8002ef0 <HAL_RCC_OscConfig+0xc44>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002e44:	4b2a      	ldr	r3, [pc, #168]	; (8002ef0 <HAL_RCC_OscConfig+0xc44>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002e4c:	1d3b      	adds	r3, r7, #4
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6a19      	ldr	r1, [r3, #32]
 8002e52:	1d3b      	adds	r3, r7, #4
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	430b      	orrs	r3, r1
 8002e5a:	4925      	ldr	r1, [pc, #148]	; (8002ef0 <HAL_RCC_OscConfig+0xc44>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	604b      	str	r3, [r1, #4]
 8002e60:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	fa93 f2a3 	rbit	r2, r3
 8002e74:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e78:	601a      	str	r2, [r3, #0]
  return result;
 8002e7a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e7e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e80:	fab3 f383 	clz	r3, r3
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e8a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	461a      	mov	r2, r3
 8002e92:	2301      	movs	r3, #1
 8002e94:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e96:	f7fe fdc1 	bl	8001a1c <HAL_GetTick>
 8002e9a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e9e:	e009      	b.n	8002eb4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea0:	f7fe fdbc 	bl	8001a1c <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e109      	b.n	80030c8 <HAL_RCC_OscConfig+0xe1c>
 8002eb4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002eb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ebc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	fa93 f2a3 	rbit	r2, r3
 8002ec8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ecc:	601a      	str	r2, [r3, #0]
  return result;
 8002ece:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ed2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ed4:	fab3 f383 	clz	r3, r3
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d105      	bne.n	8002ef4 <HAL_RCC_OscConfig+0xc48>
 8002ee8:	4b01      	ldr	r3, [pc, #4]	; (8002ef0 <HAL_RCC_OscConfig+0xc44>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	e01e      	b.n	8002f2c <HAL_RCC_OscConfig+0xc80>
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ef8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002efc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	fa93 f2a3 	rbit	r2, r3
 8002f08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002f12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	fa93 f2a3 	rbit	r2, r3
 8002f22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	4b6a      	ldr	r3, [pc, #424]	; (80030d4 <HAL_RCC_OscConfig+0xe28>)
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002f30:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f34:	6011      	str	r1, [r2, #0]
 8002f36:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	fa92 f1a2 	rbit	r1, r2
 8002f40:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f44:	6011      	str	r1, [r2, #0]
  return result;
 8002f46:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	fab2 f282 	clz	r2, r2
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	f042 0220 	orr.w	r2, r2, #32
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	f002 021f 	and.w	r2, r2, #31
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f62:	4013      	ands	r3, r2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d09b      	beq.n	8002ea0 <HAL_RCC_OscConfig+0xbf4>
 8002f68:	e0ad      	b.n	80030c6 <HAL_RCC_OscConfig+0xe1a>
 8002f6a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	fa93 f2a3 	rbit	r2, r3
 8002f7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f82:	601a      	str	r2, [r3, #0]
  return result;
 8002f84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f88:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f8a:	fab3 f383 	clz	r3, r3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7fe fd3c 	bl	8001a1c <HAL_GetTick>
 8002fa4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa8:	e009      	b.n	8002fbe <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002faa:	f7fe fd37 	bl	8001a1c <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e084      	b.n	80030c8 <HAL_RCC_OscConfig+0xe1c>
 8002fbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	fa93 f2a3 	rbit	r2, r3
 8002fd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fd6:	601a      	str	r2, [r3, #0]
  return result;
 8002fd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fdc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fde:	fab3 f383 	clz	r3, r3
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	095b      	lsrs	r3, r3, #5
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d102      	bne.n	8002ff8 <HAL_RCC_OscConfig+0xd4c>
 8002ff2:	4b38      	ldr	r3, [pc, #224]	; (80030d4 <HAL_RCC_OscConfig+0xe28>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	e01b      	b.n	8003030 <HAL_RCC_OscConfig+0xd84>
 8002ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ffc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003000:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	fa93 f2a3 	rbit	r2, r3
 800300c:	f107 0320 	add.w	r3, r7, #32
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	f107 031c 	add.w	r3, r7, #28
 8003016:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	f107 031c 	add.w	r3, r7, #28
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	fa93 f2a3 	rbit	r2, r3
 8003026:	f107 0318 	add.w	r3, r7, #24
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	4b29      	ldr	r3, [pc, #164]	; (80030d4 <HAL_RCC_OscConfig+0xe28>)
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	f107 0214 	add.w	r2, r7, #20
 8003034:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003038:	6011      	str	r1, [r2, #0]
 800303a:	f107 0214 	add.w	r2, r7, #20
 800303e:	6812      	ldr	r2, [r2, #0]
 8003040:	fa92 f1a2 	rbit	r1, r2
 8003044:	f107 0210 	add.w	r2, r7, #16
 8003048:	6011      	str	r1, [r2, #0]
  return result;
 800304a:	f107 0210 	add.w	r2, r7, #16
 800304e:	6812      	ldr	r2, [r2, #0]
 8003050:	fab2 f282 	clz	r2, r2
 8003054:	b2d2      	uxtb	r2, r2
 8003056:	f042 0220 	orr.w	r2, r2, #32
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	f002 021f 	and.w	r2, r2, #31
 8003060:	2101      	movs	r1, #1
 8003062:	fa01 f202 	lsl.w	r2, r1, r2
 8003066:	4013      	ands	r3, r2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d19e      	bne.n	8002faa <HAL_RCC_OscConfig+0xcfe>
 800306c:	e02b      	b.n	80030c6 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800306e:	1d3b      	adds	r3, r7, #4
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e025      	b.n	80030c8 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800307c:	4b15      	ldr	r3, [pc, #84]	; (80030d4 <HAL_RCC_OscConfig+0xe28>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003084:	4b13      	ldr	r3, [pc, #76]	; (80030d4 <HAL_RCC_OscConfig+0xe28>)
 8003086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003088:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800308c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003090:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003094:	1d3b      	adds	r3, r7, #4
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	429a      	cmp	r2, r3
 800309c:	d111      	bne.n	80030c2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800309e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80030a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030a6:	1d3b      	adds	r3, r7, #4
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d108      	bne.n	80030c2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80030b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030b4:	f003 020f 	and.w	r2, r3, #15
 80030b8:	1d3b      	adds	r3, r7, #4
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80030be:	429a      	cmp	r2, r3
 80030c0:	d001      	beq.n	80030c6 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40021000 	.word	0x40021000

080030d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b09e      	sub	sp, #120	; 0x78
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e162      	b.n	80033b6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030f0:	4b90      	ldr	r3, [pc, #576]	; (8003334 <HAL_RCC_ClockConfig+0x25c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d910      	bls.n	8003120 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fe:	4b8d      	ldr	r3, [pc, #564]	; (8003334 <HAL_RCC_ClockConfig+0x25c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f023 0207 	bic.w	r2, r3, #7
 8003106:	498b      	ldr	r1, [pc, #556]	; (8003334 <HAL_RCC_ClockConfig+0x25c>)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	4313      	orrs	r3, r2
 800310c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800310e:	4b89      	ldr	r3, [pc, #548]	; (8003334 <HAL_RCC_ClockConfig+0x25c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d001      	beq.n	8003120 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e14a      	b.n	80033b6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d008      	beq.n	800313e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800312c:	4b82      	ldr	r3, [pc, #520]	; (8003338 <HAL_RCC_ClockConfig+0x260>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	497f      	ldr	r1, [pc, #508]	; (8003338 <HAL_RCC_ClockConfig+0x260>)
 800313a:	4313      	orrs	r3, r2
 800313c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 80dc 	beq.w	8003304 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d13c      	bne.n	80031ce <HAL_RCC_ClockConfig+0xf6>
 8003154:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003158:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800315c:	fa93 f3a3 	rbit	r3, r3
 8003160:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003164:	fab3 f383 	clz	r3, r3
 8003168:	b2db      	uxtb	r3, r3
 800316a:	095b      	lsrs	r3, r3, #5
 800316c:	b2db      	uxtb	r3, r3
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b01      	cmp	r3, #1
 8003176:	d102      	bne.n	800317e <HAL_RCC_ClockConfig+0xa6>
 8003178:	4b6f      	ldr	r3, [pc, #444]	; (8003338 <HAL_RCC_ClockConfig+0x260>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	e00f      	b.n	800319e <HAL_RCC_ClockConfig+0xc6>
 800317e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003182:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003184:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003186:	fa93 f3a3 	rbit	r3, r3
 800318a:	667b      	str	r3, [r7, #100]	; 0x64
 800318c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003190:	663b      	str	r3, [r7, #96]	; 0x60
 8003192:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003194:	fa93 f3a3 	rbit	r3, r3
 8003198:	65fb      	str	r3, [r7, #92]	; 0x5c
 800319a:	4b67      	ldr	r3, [pc, #412]	; (8003338 <HAL_RCC_ClockConfig+0x260>)
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031a2:	65ba      	str	r2, [r7, #88]	; 0x58
 80031a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031a6:	fa92 f2a2 	rbit	r2, r2
 80031aa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80031ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80031ae:	fab2 f282 	clz	r2, r2
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	f042 0220 	orr.w	r2, r2, #32
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	f002 021f 	and.w	r2, r2, #31
 80031be:	2101      	movs	r1, #1
 80031c0:	fa01 f202 	lsl.w	r2, r1, r2
 80031c4:	4013      	ands	r3, r2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d17b      	bne.n	80032c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e0f3      	b.n	80033b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d13c      	bne.n	8003250 <HAL_RCC_ClockConfig+0x178>
 80031d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031de:	fa93 f3a3 	rbit	r3, r3
 80031e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80031e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e6:	fab3 f383 	clz	r3, r3
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	095b      	lsrs	r3, r3, #5
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d102      	bne.n	8003200 <HAL_RCC_ClockConfig+0x128>
 80031fa:	4b4f      	ldr	r3, [pc, #316]	; (8003338 <HAL_RCC_ClockConfig+0x260>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	e00f      	b.n	8003220 <HAL_RCC_ClockConfig+0x148>
 8003200:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003204:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003208:	fa93 f3a3 	rbit	r3, r3
 800320c:	647b      	str	r3, [r7, #68]	; 0x44
 800320e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003212:	643b      	str	r3, [r7, #64]	; 0x40
 8003214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003216:	fa93 f3a3 	rbit	r3, r3
 800321a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800321c:	4b46      	ldr	r3, [pc, #280]	; (8003338 <HAL_RCC_ClockConfig+0x260>)
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003224:	63ba      	str	r2, [r7, #56]	; 0x38
 8003226:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003228:	fa92 f2a2 	rbit	r2, r2
 800322c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800322e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003230:	fab2 f282 	clz	r2, r2
 8003234:	b2d2      	uxtb	r2, r2
 8003236:	f042 0220 	orr.w	r2, r2, #32
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	f002 021f 	and.w	r2, r2, #31
 8003240:	2101      	movs	r1, #1
 8003242:	fa01 f202 	lsl.w	r2, r1, r2
 8003246:	4013      	ands	r3, r2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d13a      	bne.n	80032c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e0b2      	b.n	80033b6 <HAL_RCC_ClockConfig+0x2de>
 8003250:	2302      	movs	r3, #2
 8003252:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003256:	fa93 f3a3 	rbit	r3, r3
 800325a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800325c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325e:	fab3 f383 	clz	r3, r3
 8003262:	b2db      	uxtb	r3, r3
 8003264:	095b      	lsrs	r3, r3, #5
 8003266:	b2db      	uxtb	r3, r3
 8003268:	f043 0301 	orr.w	r3, r3, #1
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b01      	cmp	r3, #1
 8003270:	d102      	bne.n	8003278 <HAL_RCC_ClockConfig+0x1a0>
 8003272:	4b31      	ldr	r3, [pc, #196]	; (8003338 <HAL_RCC_ClockConfig+0x260>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	e00d      	b.n	8003294 <HAL_RCC_ClockConfig+0x1bc>
 8003278:	2302      	movs	r3, #2
 800327a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327e:	fa93 f3a3 	rbit	r3, r3
 8003282:	627b      	str	r3, [r7, #36]	; 0x24
 8003284:	2302      	movs	r3, #2
 8003286:	623b      	str	r3, [r7, #32]
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	fa93 f3a3 	rbit	r3, r3
 800328e:	61fb      	str	r3, [r7, #28]
 8003290:	4b29      	ldr	r3, [pc, #164]	; (8003338 <HAL_RCC_ClockConfig+0x260>)
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	2202      	movs	r2, #2
 8003296:	61ba      	str	r2, [r7, #24]
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	fa92 f2a2 	rbit	r2, r2
 800329e:	617a      	str	r2, [r7, #20]
  return result;
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	fab2 f282 	clz	r2, r2
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	f042 0220 	orr.w	r2, r2, #32
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	f002 021f 	and.w	r2, r2, #31
 80032b2:	2101      	movs	r1, #1
 80032b4:	fa01 f202 	lsl.w	r2, r1, r2
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e079      	b.n	80033b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032c2:	4b1d      	ldr	r3, [pc, #116]	; (8003338 <HAL_RCC_ClockConfig+0x260>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f023 0203 	bic.w	r2, r3, #3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	491a      	ldr	r1, [pc, #104]	; (8003338 <HAL_RCC_ClockConfig+0x260>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032d4:	f7fe fba2 	bl	8001a1c <HAL_GetTick>
 80032d8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032da:	e00a      	b.n	80032f2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032dc:	f7fe fb9e 	bl	8001a1c <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e061      	b.n	80033b6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f2:	4b11      	ldr	r3, [pc, #68]	; (8003338 <HAL_RCC_ClockConfig+0x260>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f003 020c 	and.w	r2, r3, #12
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	429a      	cmp	r2, r3
 8003302:	d1eb      	bne.n	80032dc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003304:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <HAL_RCC_ClockConfig+0x25c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d214      	bcs.n	800333c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003312:	4b08      	ldr	r3, [pc, #32]	; (8003334 <HAL_RCC_ClockConfig+0x25c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f023 0207 	bic.w	r2, r3, #7
 800331a:	4906      	ldr	r1, [pc, #24]	; (8003334 <HAL_RCC_ClockConfig+0x25c>)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	4313      	orrs	r3, r2
 8003320:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003322:	4b04      	ldr	r3, [pc, #16]	; (8003334 <HAL_RCC_ClockConfig+0x25c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d005      	beq.n	800333c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e040      	b.n	80033b6 <HAL_RCC_ClockConfig+0x2de>
 8003334:	40022000 	.word	0x40022000
 8003338:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d008      	beq.n	800335a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003348:	4b1d      	ldr	r3, [pc, #116]	; (80033c0 <HAL_RCC_ClockConfig+0x2e8>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	491a      	ldr	r1, [pc, #104]	; (80033c0 <HAL_RCC_ClockConfig+0x2e8>)
 8003356:	4313      	orrs	r3, r2
 8003358:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b00      	cmp	r3, #0
 8003364:	d009      	beq.n	800337a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003366:	4b16      	ldr	r3, [pc, #88]	; (80033c0 <HAL_RCC_ClockConfig+0x2e8>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	4912      	ldr	r1, [pc, #72]	; (80033c0 <HAL_RCC_ClockConfig+0x2e8>)
 8003376:	4313      	orrs	r3, r2
 8003378:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800337a:	f000 f829 	bl	80033d0 <HAL_RCC_GetSysClockFreq>
 800337e:	4601      	mov	r1, r0
 8003380:	4b0f      	ldr	r3, [pc, #60]	; (80033c0 <HAL_RCC_ClockConfig+0x2e8>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003388:	22f0      	movs	r2, #240	; 0xf0
 800338a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	fa92 f2a2 	rbit	r2, r2
 8003392:	60fa      	str	r2, [r7, #12]
  return result;
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	fab2 f282 	clz	r2, r2
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	40d3      	lsrs	r3, r2
 800339e:	4a09      	ldr	r2, [pc, #36]	; (80033c4 <HAL_RCC_ClockConfig+0x2ec>)
 80033a0:	5cd3      	ldrb	r3, [r2, r3]
 80033a2:	fa21 f303 	lsr.w	r3, r1, r3
 80033a6:	4a08      	ldr	r2, [pc, #32]	; (80033c8 <HAL_RCC_ClockConfig+0x2f0>)
 80033a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80033aa:	4b08      	ldr	r3, [pc, #32]	; (80033cc <HAL_RCC_ClockConfig+0x2f4>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fe faf0 	bl	8001994 <HAL_InitTick>
  
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3778      	adds	r7, #120	; 0x78
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40021000 	.word	0x40021000
 80033c4:	08006254 	.word	0x08006254
 80033c8:	20000000 	.word	0x20000000
 80033cc:	20000004 	.word	0x20000004

080033d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b08b      	sub	sp, #44	; 0x2c
 80033d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	2300      	movs	r3, #0
 80033dc:	61bb      	str	r3, [r7, #24]
 80033de:	2300      	movs	r3, #0
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80033ea:	4b2a      	ldr	r3, [pc, #168]	; (8003494 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f003 030c 	and.w	r3, r3, #12
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d002      	beq.n	8003400 <HAL_RCC_GetSysClockFreq+0x30>
 80033fa:	2b08      	cmp	r3, #8
 80033fc:	d003      	beq.n	8003406 <HAL_RCC_GetSysClockFreq+0x36>
 80033fe:	e03f      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003400:	4b25      	ldr	r3, [pc, #148]	; (8003498 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003402:	623b      	str	r3, [r7, #32]
      break;
 8003404:	e03f      	b.n	8003486 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800340c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003410:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	fa92 f2a2 	rbit	r2, r2
 8003418:	607a      	str	r2, [r7, #4]
  return result;
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	fab2 f282 	clz	r2, r2
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	40d3      	lsrs	r3, r2
 8003424:	4a1d      	ldr	r2, [pc, #116]	; (800349c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003426:	5cd3      	ldrb	r3, [r2, r3]
 8003428:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800342a:	4b1a      	ldr	r3, [pc, #104]	; (8003494 <HAL_RCC_GetSysClockFreq+0xc4>)
 800342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	220f      	movs	r2, #15
 8003434:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	fa92 f2a2 	rbit	r2, r2
 800343c:	60fa      	str	r2, [r7, #12]
  return result;
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	fab2 f282 	clz	r2, r2
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	40d3      	lsrs	r3, r2
 8003448:	4a15      	ldr	r2, [pc, #84]	; (80034a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800344a:	5cd3      	ldrb	r3, [r2, r3]
 800344c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003458:	4a0f      	ldr	r2, [pc, #60]	; (8003498 <HAL_RCC_GetSysClockFreq+0xc8>)
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	fb02 f303 	mul.w	r3, r2, r3
 8003466:	627b      	str	r3, [r7, #36]	; 0x24
 8003468:	e007      	b.n	800347a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800346a:	4a0b      	ldr	r2, [pc, #44]	; (8003498 <HAL_RCC_GetSysClockFreq+0xc8>)
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	fb02 f303 	mul.w	r3, r2, r3
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	623b      	str	r3, [r7, #32]
      break;
 800347e:	e002      	b.n	8003486 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003480:	4b05      	ldr	r3, [pc, #20]	; (8003498 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003482:	623b      	str	r3, [r7, #32]
      break;
 8003484:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003486:	6a3b      	ldr	r3, [r7, #32]
}
 8003488:	4618      	mov	r0, r3
 800348a:	372c      	adds	r7, #44	; 0x2c
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	40021000 	.word	0x40021000
 8003498:	007a1200 	.word	0x007a1200
 800349c:	0800626c 	.word	0x0800626c
 80034a0:	0800627c 	.word	0x0800627c

080034a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034a8:	4b03      	ldr	r3, [pc, #12]	; (80034b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034aa:	681b      	ldr	r3, [r3, #0]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	20000000 	.word	0x20000000

080034bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80034c2:	f7ff ffef 	bl	80034a4 <HAL_RCC_GetHCLKFreq>
 80034c6:	4601      	mov	r1, r0
 80034c8:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034d0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80034d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	fa92 f2a2 	rbit	r2, r2
 80034dc:	603a      	str	r2, [r7, #0]
  return result;
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	fab2 f282 	clz	r2, r2
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	40d3      	lsrs	r3, r2
 80034e8:	4a04      	ldr	r2, [pc, #16]	; (80034fc <HAL_RCC_GetPCLK1Freq+0x40>)
 80034ea:	5cd3      	ldrb	r3, [r2, r3]
 80034ec:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80034f0:	4618      	mov	r0, r3
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40021000 	.word	0x40021000
 80034fc:	08006264 	.word	0x08006264

08003500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003506:	f7ff ffcd 	bl	80034a4 <HAL_RCC_GetHCLKFreq>
 800350a:	4601      	mov	r1, r0
 800350c:	4b0b      	ldr	r3, [pc, #44]	; (800353c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003514:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003518:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	fa92 f2a2 	rbit	r2, r2
 8003520:	603a      	str	r2, [r7, #0]
  return result;
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	fab2 f282 	clz	r2, r2
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	40d3      	lsrs	r3, r2
 800352c:	4a04      	ldr	r2, [pc, #16]	; (8003540 <HAL_RCC_GetPCLK2Freq+0x40>)
 800352e:	5cd3      	ldrb	r3, [r2, r3]
 8003530:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003534:	4618      	mov	r0, r3
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40021000 	.word	0x40021000
 8003540:	08006264 	.word	0x08006264

08003544 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b092      	sub	sp, #72	; 0x48
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003554:	2300      	movs	r3, #0
 8003556:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 80d4 	beq.w	8003710 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003568:	4b4e      	ldr	r3, [pc, #312]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10e      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003574:	4b4b      	ldr	r3, [pc, #300]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	4a4a      	ldr	r2, [pc, #296]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800357a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800357e:	61d3      	str	r3, [r2, #28]
 8003580:	4b48      	ldr	r3, [pc, #288]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800358c:	2301      	movs	r3, #1
 800358e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003592:	4b45      	ldr	r3, [pc, #276]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359a:	2b00      	cmp	r3, #0
 800359c:	d118      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800359e:	4b42      	ldr	r3, [pc, #264]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a41      	ldr	r2, [pc, #260]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035aa:	f7fe fa37 	bl	8001a1c <HAL_GetTick>
 80035ae:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b0:	e008      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b2:	f7fe fa33 	bl	8001a1c <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b64      	cmp	r3, #100	; 0x64
 80035be:	d901      	bls.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e1d6      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c4:	4b38      	ldr	r3, [pc, #224]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0f0      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035d0:	4b34      	ldr	r3, [pc, #208]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 8084 	beq.w	80036ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d07c      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035f0:	4b2c      	ldr	r3, [pc, #176]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003602:	fa93 f3a3 	rbit	r3, r3
 8003606:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800360a:	fab3 f383 	clz	r3, r3
 800360e:	b2db      	uxtb	r3, r3
 8003610:	461a      	mov	r2, r3
 8003612:	4b26      	ldr	r3, [pc, #152]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	461a      	mov	r2, r3
 800361a:	2301      	movs	r3, #1
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003622:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003626:	fa93 f3a3 	rbit	r3, r3
 800362a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800362c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800362e:	fab3 f383 	clz	r3, r3
 8003632:	b2db      	uxtb	r3, r3
 8003634:	461a      	mov	r2, r3
 8003636:	4b1d      	ldr	r3, [pc, #116]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	461a      	mov	r2, r3
 800363e:	2300      	movs	r3, #0
 8003640:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003642:	4a18      	ldr	r2, [pc, #96]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003646:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d04b      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003652:	f7fe f9e3 	bl	8001a1c <HAL_GetTick>
 8003656:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003658:	e00a      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800365a:	f7fe f9df 	bl	8001a1c <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	f241 3288 	movw	r2, #5000	; 0x1388
 8003668:	4293      	cmp	r3, r2
 800366a:	d901      	bls.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e180      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003670:	2302      	movs	r3, #2
 8003672:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003676:	fa93 f3a3 	rbit	r3, r3
 800367a:	627b      	str	r3, [r7, #36]	; 0x24
 800367c:	2302      	movs	r3, #2
 800367e:	623b      	str	r3, [r7, #32]
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	fa93 f3a3 	rbit	r3, r3
 8003686:	61fb      	str	r3, [r7, #28]
  return result;
 8003688:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800368a:	fab3 f383 	clz	r3, r3
 800368e:	b2db      	uxtb	r3, r3
 8003690:	095b      	lsrs	r3, r3, #5
 8003692:	b2db      	uxtb	r3, r3
 8003694:	f043 0302 	orr.w	r3, r3, #2
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d108      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800369e:	4b01      	ldr	r3, [pc, #4]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	e00d      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80036a4:	40021000 	.word	0x40021000
 80036a8:	40007000 	.word	0x40007000
 80036ac:	10908100 	.word	0x10908100
 80036b0:	2302      	movs	r3, #2
 80036b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	fa93 f3a3 	rbit	r3, r3
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	4ba0      	ldr	r3, [pc, #640]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	2202      	movs	r2, #2
 80036c2:	613a      	str	r2, [r7, #16]
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	fa92 f2a2 	rbit	r2, r2
 80036ca:	60fa      	str	r2, [r7, #12]
  return result;
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	fab2 f282 	clz	r2, r2
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	f002 021f 	and.w	r2, r2, #31
 80036de:	2101      	movs	r1, #1
 80036e0:	fa01 f202 	lsl.w	r2, r1, r2
 80036e4:	4013      	ands	r3, r2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0b7      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80036ea:	4b95      	ldr	r3, [pc, #596]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	4992      	ldr	r1, [pc, #584]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003700:	2b01      	cmp	r3, #1
 8003702:	d105      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003704:	4b8e      	ldr	r3, [pc, #568]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	4a8d      	ldr	r2, [pc, #564]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800370a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800370e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b00      	cmp	r3, #0
 800371a:	d008      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800371c:	4b88      	ldr	r3, [pc, #544]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800371e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003720:	f023 0203 	bic.w	r2, r3, #3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	4985      	ldr	r1, [pc, #532]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800372a:	4313      	orrs	r3, r2
 800372c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d008      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800373a:	4b81      	ldr	r3, [pc, #516]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	497e      	ldr	r1, [pc, #504]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003748:	4313      	orrs	r3, r2
 800374a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003758:	4b79      	ldr	r3, [pc, #484]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800375a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	4976      	ldr	r1, [pc, #472]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003766:	4313      	orrs	r3, r2
 8003768:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0320 	and.w	r3, r3, #32
 8003772:	2b00      	cmp	r3, #0
 8003774:	d008      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003776:	4b72      	ldr	r3, [pc, #456]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	f023 0210 	bic.w	r2, r3, #16
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	496f      	ldr	r1, [pc, #444]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003784:	4313      	orrs	r3, r2
 8003786:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d008      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003794:	4b6a      	ldr	r3, [pc, #424]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a0:	4967      	ldr	r1, [pc, #412]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d008      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037b2:	4b63      	ldr	r3, [pc, #396]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b6:	f023 0220 	bic.w	r2, r3, #32
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	4960      	ldr	r1, [pc, #384]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037d0:	4b5b      	ldr	r3, [pc, #364]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	4958      	ldr	r1, [pc, #352]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d008      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037ee:	4b54      	ldr	r3, [pc, #336]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	4951      	ldr	r1, [pc, #324]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0310 	and.w	r3, r3, #16
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800380c:	4b4c      	ldr	r3, [pc, #304]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800380e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003810:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	4949      	ldr	r1, [pc, #292]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800381a:	4313      	orrs	r3, r2
 800381c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003826:	2b00      	cmp	r3, #0
 8003828:	d008      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800382a:	4b45      	ldr	r3, [pc, #276]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	4942      	ldr	r1, [pc, #264]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003838:	4313      	orrs	r3, r2
 800383a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003844:	2b00      	cmp	r3, #0
 8003846:	d008      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003848:	4b3d      	ldr	r3, [pc, #244]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003854:	493a      	ldr	r1, [pc, #232]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003856:	4313      	orrs	r3, r2
 8003858:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003862:	2b00      	cmp	r3, #0
 8003864:	d008      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003866:	4b36      	ldr	r3, [pc, #216]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	4933      	ldr	r1, [pc, #204]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003874:	4313      	orrs	r3, r2
 8003876:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d008      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003884:	4b2e      	ldr	r3, [pc, #184]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003888:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003890:	492b      	ldr	r1, [pc, #172]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003892:	4313      	orrs	r3, r2
 8003894:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d008      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80038a2:	4b27      	ldr	r3, [pc, #156]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	4924      	ldr	r1, [pc, #144]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80038c0:	4b1f      	ldr	r3, [pc, #124]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038cc:	491c      	ldr	r1, [pc, #112]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d008      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80038de:	4b18      	ldr	r3, [pc, #96]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ea:	4915      	ldr	r1, [pc, #84]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80038fc:	4b10      	ldr	r3, [pc, #64]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003900:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003908:	490d      	ldr	r1, [pc, #52]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800390a:	4313      	orrs	r3, r2
 800390c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d008      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800391a:	4b09      	ldr	r3, [pc, #36]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003926:	4906      	ldr	r1, [pc, #24]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003928:	4313      	orrs	r3, r2
 800392a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00c      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003938:	4b01      	ldr	r3, [pc, #4]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	e002      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800393e:	bf00      	nop
 8003940:	40021000 	.word	0x40021000
 8003944:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394c:	490b      	ldr	r1, [pc, #44]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800394e:	4313      	orrs	r3, r2
 8003950:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d008      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800395e:	4b07      	ldr	r3, [pc, #28]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800396a:	4904      	ldr	r1, [pc, #16]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800396c:	4313      	orrs	r3, r2
 800396e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3748      	adds	r7, #72	; 0x48
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40021000 	.word	0x40021000

08003980 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e083      	b.n	8003a9a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	7f5b      	ldrb	r3, [r3, #29]
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b00      	cmp	r3, #0
 800399a:	d105      	bne.n	80039a8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7fd fdf8 	bl	8001598 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2202      	movs	r2, #2
 80039ac:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	22ca      	movs	r2, #202	; 0xca
 80039b4:	625a      	str	r2, [r3, #36]	; 0x24
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2253      	movs	r2, #83	; 0x53
 80039bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f897 	bl	8003af2 <RTC_EnterInitMode>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d008      	beq.n	80039dc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	22ff      	movs	r2, #255	; 0xff
 80039d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2204      	movs	r2, #4
 80039d6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e05e      	b.n	8003a9a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6812      	ldr	r2, [r2, #0]
 80039e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80039ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ee:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6899      	ldr	r1, [r3, #8]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	431a      	orrs	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	68d2      	ldr	r2, [r2, #12]
 8003a16:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6919      	ldr	r1, [r3, #16]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	041a      	lsls	r2, r3, #16
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a3a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 0320 	and.w	r3, r3, #32
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10e      	bne.n	8003a68 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f829 	bl	8003aa2 <HAL_RTC_WaitForSynchro>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d008      	beq.n	8003a68 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	22ff      	movs	r2, #255	; 0xff
 8003a5c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2204      	movs	r2, #4
 8003a62:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e018      	b.n	8003a9a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a76:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699a      	ldr	r2, [r3, #24]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	22ff      	movs	r2, #255	; 0xff
 8003a90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003a98:	2300      	movs	r3, #0
  }
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b084      	sub	sp, #16
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68da      	ldr	r2, [r3, #12]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003abc:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003abe:	f7fd ffad 	bl	8001a1c <HAL_GetTick>
 8003ac2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003ac4:	e009      	b.n	8003ada <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003ac6:	f7fd ffa9 	bl	8001a1c <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ad4:	d901      	bls.n	8003ada <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e007      	b.n	8003aea <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f003 0320 	and.w	r3, r3, #32
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0ee      	beq.n	8003ac6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b084      	sub	sp, #16
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d119      	bne.n	8003b40 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f04f 32ff 	mov.w	r2, #4294967295
 8003b14:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003b16:	f7fd ff81 	bl	8001a1c <HAL_GetTick>
 8003b1a:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003b1c:	e009      	b.n	8003b32 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b1e:	f7fd ff7d 	bl	8001a1c <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b2c:	d901      	bls.n	8003b32 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e007      	b.n	8003b42 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0ee      	beq.n	8003b1e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	7f1b      	ldrb	r3, [r3, #28]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d101      	bne.n	8003b68 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8003b64:	2302      	movs	r3, #2
 8003b66:	e09e      	b.n	8003ca6 <HAL_RTCEx_SetWakeUpTimer_IT+0x15a>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2202      	movs	r2, #2
 8003b72:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	22ca      	movs	r2, #202	; 0xca
 8003b7a:	625a      	str	r2, [r3, #36]	; 0x24
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2253      	movs	r2, #83	; 0x53
 8003b82:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d01e      	beq.n	8003bd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x84>
  {
    tickstart = HAL_GetTick();
 8003b92:	f7fd ff43 	bl	8001a1c <HAL_GetTick>
 8003b96:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8003b98:	e013      	b.n	8003bc2 <HAL_RTCEx_SetWakeUpTimer_IT+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b9a:	f7fd ff3f 	bl	8001a1c <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ba8:	d90b      	bls.n	8003bc2 <HAL_RTCEx_SetWakeUpTimer_IT+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	22ff      	movs	r2, #255	; 0xff
 8003bb0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e071      	b.n	8003ca6 <HAL_RTCEx_SetWakeUpTimer_IT+0x15a>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1e4      	bne.n	8003b9a <HAL_RTCEx_SetWakeUpTimer_IT+0x4e>
      }
    }
  }

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bde:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003bf0:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003bf2:	f7fd ff13 	bl	8001a1c <HAL_GetTick>
 8003bf6:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8003bf8:	e013      	b.n	8003c22 <HAL_RTCEx_SetWakeUpTimer_IT+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003bfa:	f7fd ff0f 	bl	8001a1c <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c08:	d90b      	bls.n	8003c22 <HAL_RTCEx_SetWakeUpTimer_IT+0xd6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	22ff      	movs	r2, #255	; 0xff
 8003c10:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2203      	movs	r2, #3
 8003c16:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e041      	b.n	8003ca6 <HAL_RTCEx_SetWakeUpTimer_IT+0x15a>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0e4      	beq.n	8003bfa <HAL_RTCEx_SetWakeUpTimer_IT+0xae>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689a      	ldr	r2, [r3, #8]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0207 	bic.w	r2, r2, #7
 8003c46:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6899      	ldr	r1, [r3, #8]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003c58:	4b15      	ldr	r3, [pc, #84]	; (8003cb0 <HAL_RTCEx_SetWakeUpTimer_IT+0x164>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a14      	ldr	r2, [pc, #80]	; (8003cb0 <HAL_RTCEx_SetWakeUpTimer_IT+0x164>)
 8003c5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c62:	6013      	str	r3, [r2, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003c64:	4b12      	ldr	r3, [pc, #72]	; (8003cb0 <HAL_RTCEx_SetWakeUpTimer_IT+0x164>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	4a11      	ldr	r2, [pc, #68]	; (8003cb0 <HAL_RTCEx_SetWakeUpTimer_IT+0x164>)
 8003c6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c6e:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c7e:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c8e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	22ff      	movs	r2, #255	; 0xff
 8003c96:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40010400 	.word	0x40010400

08003cb4 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	7f1b      	ldrb	r3, [r3, #28]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e047      	b.n	8003d5c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	22ca      	movs	r2, #202	; 0xca
 8003cde:	625a      	str	r2, [r3, #36]	; 0x24
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2253      	movs	r2, #83	; 0x53
 8003ce6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf6:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689a      	ldr	r2, [r3, #8]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d06:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8003d08:	f7fd fe88 	bl	8001a1c <HAL_GetTick>
 8003d0c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8003d0e:	e013      	b.n	8003d38 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d10:	f7fd fe84 	bl	8001a1c <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d1e:	d90b      	bls.n	8003d38 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	22ff      	movs	r2, #255	; 0xff
 8003d26:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2203      	movs	r2, #3
 8003d2c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e011      	b.n	8003d5c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0e4      	beq.n	8003d10 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	22ff      	movs	r2, #255	; 0xff
 8003d4c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00b      	beq.n	8003d92 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f816 	bl	8003dac <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003d90:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003d92:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8003d94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003d98:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	775a      	strb	r2, [r3, #29]
}
 8003da0:	bf00      	nop
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40010400 	.word	0x40010400

08003dac <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e040      	b.n	8003e54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d106      	bne.n	8003de8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7fd fd4c 	bl	8001880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2224      	movs	r2, #36	; 0x24
 8003dec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0201 	bic.w	r2, r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fbb2 	bl	8004568 <UART_SetConfig>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d101      	bne.n	8003e0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e022      	b.n	8003e54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 fd7c 	bl	8004914 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0201 	orr.w	r2, r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 fe03 	bl	8004a58 <UART_CheckIdleState>
 8003e52:	4603      	mov	r3, r0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b08a      	sub	sp, #40	; 0x28
 8003e60:	af02      	add	r7, sp, #8
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	603b      	str	r3, [r7, #0]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e70:	2b20      	cmp	r3, #32
 8003e72:	f040 8082 	bne.w	8003f7a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <HAL_UART_Transmit+0x26>
 8003e7c:	88fb      	ldrh	r3, [r7, #6]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e07a      	b.n	8003f7c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d101      	bne.n	8003e94 <HAL_UART_Transmit+0x38>
 8003e90:	2302      	movs	r3, #2
 8003e92:	e073      	b.n	8003f7c <HAL_UART_Transmit+0x120>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2221      	movs	r2, #33	; 0x21
 8003ea8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eaa:	f7fd fdb7 	bl	8001a1c <HAL_GetTick>
 8003eae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	88fa      	ldrh	r2, [r7, #6]
 8003eb4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	88fa      	ldrh	r2, [r7, #6]
 8003ebc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec8:	d108      	bne.n	8003edc <HAL_UART_Transmit+0x80>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d104      	bne.n	8003edc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	61bb      	str	r3, [r7, #24]
 8003eda:	e003      	b.n	8003ee4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003eec:	e02d      	b.n	8003f4a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	2180      	movs	r1, #128	; 0x80
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 fdf6 	bl	8004aea <UART_WaitOnFlagUntilTimeout>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e039      	b.n	8003f7c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10b      	bne.n	8003f26 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	881a      	ldrh	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f1a:	b292      	uxth	r2, r2
 8003f1c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	3302      	adds	r3, #2
 8003f22:	61bb      	str	r3, [r7, #24]
 8003f24:	e008      	b.n	8003f38 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	781a      	ldrb	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	b292      	uxth	r2, r2
 8003f30:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	3301      	adds	r3, #1
 8003f36:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1cb      	bne.n	8003eee <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	2140      	movs	r1, #64	; 0x40
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 fdc2 	bl	8004aea <UART_WaitOnFlagUntilTimeout>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e005      	b.n	8003f7c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2220      	movs	r2, #32
 8003f74:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	e000      	b.n	8003f7c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003f7a:	2302      	movs	r3, #2
  }
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3720      	adds	r7, #32
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08a      	sub	sp, #40	; 0x28
 8003f88:	af02      	add	r7, sp, #8
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	603b      	str	r3, [r7, #0]
 8003f90:	4613      	mov	r3, r2
 8003f92:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f98:	2b20      	cmp	r3, #32
 8003f9a:	f040 80bf 	bne.w	800411c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d002      	beq.n	8003faa <HAL_UART_Receive+0x26>
 8003fa4:	88fb      	ldrh	r3, [r7, #6]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e0b7      	b.n	800411e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_UART_Receive+0x38>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	e0b0      	b.n	800411e <HAL_UART_Receive+0x19a>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2222      	movs	r2, #34	; 0x22
 8003fd0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fd8:	f7fd fd20 	bl	8001a1c <HAL_GetTick>
 8003fdc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	88fa      	ldrh	r2, [r7, #6]
 8003fe2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	88fa      	ldrh	r2, [r7, #6]
 8003fea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff6:	d10e      	bne.n	8004016 <HAL_UART_Receive+0x92>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d105      	bne.n	800400c <HAL_UART_Receive+0x88>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004006:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800400a:	e02d      	b.n	8004068 <HAL_UART_Receive+0xe4>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	22ff      	movs	r2, #255	; 0xff
 8004010:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004014:	e028      	b.n	8004068 <HAL_UART_Receive+0xe4>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10d      	bne.n	800403a <HAL_UART_Receive+0xb6>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d104      	bne.n	8004030 <HAL_UART_Receive+0xac>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	22ff      	movs	r2, #255	; 0xff
 800402a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800402e:	e01b      	b.n	8004068 <HAL_UART_Receive+0xe4>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	227f      	movs	r2, #127	; 0x7f
 8004034:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004038:	e016      	b.n	8004068 <HAL_UART_Receive+0xe4>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004042:	d10d      	bne.n	8004060 <HAL_UART_Receive+0xdc>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d104      	bne.n	8004056 <HAL_UART_Receive+0xd2>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	227f      	movs	r2, #127	; 0x7f
 8004050:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004054:	e008      	b.n	8004068 <HAL_UART_Receive+0xe4>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	223f      	movs	r2, #63	; 0x3f
 800405a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800405e:	e003      	b.n	8004068 <HAL_UART_Receive+0xe4>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800406e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004078:	d108      	bne.n	800408c <HAL_UART_Receive+0x108>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d104      	bne.n	800408c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004082:	2300      	movs	r3, #0
 8004084:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	61bb      	str	r3, [r7, #24]
 800408a:	e003      	b.n	8004094 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004090:	2300      	movs	r3, #0
 8004092:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800409c:	e033      	b.n	8004106 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2200      	movs	r2, #0
 80040a6:	2120      	movs	r1, #32
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 fd1e 	bl	8004aea <UART_WaitOnFlagUntilTimeout>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e032      	b.n	800411e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10c      	bne.n	80040d8 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	8a7b      	ldrh	r3, [r7, #18]
 80040c8:	4013      	ands	r3, r2
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	3302      	adds	r3, #2
 80040d4:	61bb      	str	r3, [r7, #24]
 80040d6:	e00d      	b.n	80040f4 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80040de:	b29b      	uxth	r3, r3
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	8a7b      	ldrh	r3, [r7, #18]
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	4013      	ands	r3, r2
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	3301      	adds	r3, #1
 80040f2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800410c:	b29b      	uxth	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1c5      	bne.n	800409e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2220      	movs	r2, #32
 8004116:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004118:	2300      	movs	r3, #0
 800411a:	e000      	b.n	800411e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800411c:	2302      	movs	r3, #2
  }
}
 800411e:	4618      	mov	r0, r3
 8004120:	3720      	adds	r7, #32
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
	...

08004128 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b088      	sub	sp, #32
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004148:	69fa      	ldr	r2, [r7, #28]
 800414a:	f640 030f 	movw	r3, #2063	; 0x80f
 800414e:	4013      	ands	r3, r2
 8004150:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d113      	bne.n	8004180 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	f003 0320 	and.w	r3, r3, #32
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00e      	beq.n	8004180 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	f003 0320 	and.w	r3, r3, #32
 8004168:	2b00      	cmp	r3, #0
 800416a:	d009      	beq.n	8004180 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 81cc 	beq.w	800450e <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	4798      	blx	r3
      }
      return;
 800417e:	e1c6      	b.n	800450e <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 80e3 	beq.w	800434e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d105      	bne.n	800419e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	4ba5      	ldr	r3, [pc, #660]	; (800442c <HAL_UART_IRQHandler+0x304>)
 8004196:	4013      	ands	r3, r2
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 80d8 	beq.w	800434e <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d010      	beq.n	80041ca <HAL_UART_IRQHandler+0xa2>
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00b      	beq.n	80041ca <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2201      	movs	r2, #1
 80041b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041c0:	f043 0201 	orr.w	r2, r3, #1
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d010      	beq.n	80041f6 <HAL_UART_IRQHandler+0xce>
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00b      	beq.n	80041f6 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2202      	movs	r2, #2
 80041e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041ec:	f043 0204 	orr.w	r2, r3, #4
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d010      	beq.n	8004222 <HAL_UART_IRQHandler+0xfa>
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00b      	beq.n	8004222 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2204      	movs	r2, #4
 8004210:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004218:	f043 0202 	orr.w	r2, r3, #2
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	f003 0308 	and.w	r3, r3, #8
 8004228:	2b00      	cmp	r3, #0
 800422a:	d015      	beq.n	8004258 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	f003 0320 	and.w	r3, r3, #32
 8004232:	2b00      	cmp	r3, #0
 8004234:	d104      	bne.n	8004240 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00b      	beq.n	8004258 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2208      	movs	r2, #8
 8004246:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800424e:	f043 0208 	orr.w	r2, r3, #8
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800425e:	2b00      	cmp	r3, #0
 8004260:	d011      	beq.n	8004286 <HAL_UART_IRQHandler+0x15e>
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00c      	beq.n	8004286 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004274:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800427c:	f043 0220 	orr.w	r2, r3, #32
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 8140 	beq.w	8004512 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	f003 0320 	and.w	r3, r3, #32
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00c      	beq.n	80042b6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	f003 0320 	and.w	r3, r3, #32
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d007      	beq.n	80042b6 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042bc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c8:	2b40      	cmp	r3, #64	; 0x40
 80042ca:	d004      	beq.n	80042d6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d031      	beq.n	800433a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fc83 	bl	8004be2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e6:	2b40      	cmp	r3, #64	; 0x40
 80042e8:	d123      	bne.n	8004332 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042f8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d013      	beq.n	800432a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004306:	4a4a      	ldr	r2, [pc, #296]	; (8004430 <HAL_UART_IRQHandler+0x308>)
 8004308:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430e:	4618      	mov	r0, r3
 8004310:	f7fd fd50 	bl	8001db4 <HAL_DMA_Abort_IT>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d017      	beq.n	800434a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004324:	4610      	mov	r0, r2
 8004326:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004328:	e00f      	b.n	800434a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f906 	bl	800453c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004330:	e00b      	b.n	800434a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f902 	bl	800453c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004338:	e007      	b.n	800434a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f8fe 	bl	800453c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004348:	e0e3      	b.n	8004512 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800434a:	bf00      	nop
    return;
 800434c:	e0e1      	b.n	8004512 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004352:	2b01      	cmp	r3, #1
 8004354:	f040 80a7 	bne.w	80044a6 <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	f003 0310 	and.w	r3, r3, #16
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 80a1 	beq.w	80044a6 <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	f003 0310 	and.w	r3, r3, #16
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 809b 	beq.w	80044a6 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2210      	movs	r2, #16
 8004376:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004382:	2b40      	cmp	r3, #64	; 0x40
 8004384:	d156      	bne.n	8004434 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8004390:	893b      	ldrh	r3, [r7, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 80bf 	beq.w	8004516 <HAL_UART_IRQHandler+0x3ee>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800439e:	893a      	ldrh	r2, [r7, #8]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	f080 80b8 	bcs.w	8004516 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	893a      	ldrh	r2, [r7, #8]
 80043aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	2b20      	cmp	r3, #32
 80043b6:	d02a      	beq.n	800440e <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043c6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0201 	bic.w	r2, r2, #1
 80043d6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043e6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2220      	movs	r2, #32
 80043ec:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0210 	bic.w	r2, r2, #16
 8004402:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004408:	4618      	mov	r0, r3
 800440a:	f7fd fc9a 	bl	8001d42 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800441a:	b29b      	uxth	r3, r3
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	b29b      	uxth	r3, r3
 8004420:	4619      	mov	r1, r3
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f894 	bl	8004550 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004428:	e075      	b.n	8004516 <HAL_UART_IRQHandler+0x3ee>
 800442a:	bf00      	nop
 800442c:	04000120 	.word	0x04000120
 8004430:	08004c41 	.word	0x08004c41
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004440:	b29b      	uxth	r3, r3
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d063      	beq.n	800451a <HAL_UART_IRQHandler+0x3f2>
          &&(nb_rx_data > 0U) )
 8004452:	897b      	ldrh	r3, [r7, #10]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d060      	beq.n	800451a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004466:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0201 	bic.w	r2, r2, #1
 8004476:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2220      	movs	r2, #32
 800447c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0210 	bic.w	r2, r2, #16
 8004498:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800449a:	897b      	ldrh	r3, [r7, #10]
 800449c:	4619      	mov	r1, r3
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f856 	bl	8004550 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80044a4:	e039      	b.n	800451a <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00d      	beq.n	80044cc <HAL_UART_IRQHandler+0x3a4>
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d008      	beq.n	80044cc <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80044c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 fbea 	bl	8004c9e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80044ca:	e029      	b.n	8004520 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00d      	beq.n	80044f2 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d008      	beq.n	80044f2 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01a      	beq.n	800451e <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	4798      	blx	r3
    }
    return;
 80044f0:	e015      	b.n	800451e <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d011      	beq.n	8004520 <HAL_UART_IRQHandler+0x3f8>
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00c      	beq.n	8004520 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fbb0 	bl	8004c6c <UART_EndTransmit_IT>
    return;
 800450c:	e008      	b.n	8004520 <HAL_UART_IRQHandler+0x3f8>
      return;
 800450e:	bf00      	nop
 8004510:	e006      	b.n	8004520 <HAL_UART_IRQHandler+0x3f8>
    return;
 8004512:	bf00      	nop
 8004514:	e004      	b.n	8004520 <HAL_UART_IRQHandler+0x3f8>
      return;
 8004516:	bf00      	nop
 8004518:	e002      	b.n	8004520 <HAL_UART_IRQHandler+0x3f8>
      return;
 800451a:	bf00      	nop
 800451c:	e000      	b.n	8004520 <HAL_UART_IRQHandler+0x3f8>
    return;
 800451e:	bf00      	nop
  }

}
 8004520:	3720      	adds	r7, #32
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop

08004528 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	460b      	mov	r3, r1
 800455a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b088      	sub	sp, #32
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004570:	2300      	movs	r3, #0
 8004572:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	4313      	orrs	r3, r2
 800458a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	4bab      	ldr	r3, [pc, #684]	; (8004840 <UART_SetConfig+0x2d8>)
 8004594:	4013      	ands	r3, r2
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	6812      	ldr	r2, [r2, #0]
 800459a:	6979      	ldr	r1, [r7, #20]
 800459c:	430b      	orrs	r3, r1
 800459e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68da      	ldr	r2, [r3, #12]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a99      	ldr	r2, [pc, #612]	; (8004844 <UART_SetConfig+0x2dc>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d120      	bne.n	8004626 <UART_SetConfig+0xbe>
 80045e4:	4b98      	ldr	r3, [pc, #608]	; (8004848 <UART_SetConfig+0x2e0>)
 80045e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e8:	f003 0303 	and.w	r3, r3, #3
 80045ec:	2b03      	cmp	r3, #3
 80045ee:	d817      	bhi.n	8004620 <UART_SetConfig+0xb8>
 80045f0:	a201      	add	r2, pc, #4	; (adr r2, 80045f8 <UART_SetConfig+0x90>)
 80045f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f6:	bf00      	nop
 80045f8:	08004609 	.word	0x08004609
 80045fc:	08004615 	.word	0x08004615
 8004600:	0800461b 	.word	0x0800461b
 8004604:	0800460f 	.word	0x0800460f
 8004608:	2301      	movs	r3, #1
 800460a:	77fb      	strb	r3, [r7, #31]
 800460c:	e0b5      	b.n	800477a <UART_SetConfig+0x212>
 800460e:	2302      	movs	r3, #2
 8004610:	77fb      	strb	r3, [r7, #31]
 8004612:	e0b2      	b.n	800477a <UART_SetConfig+0x212>
 8004614:	2304      	movs	r3, #4
 8004616:	77fb      	strb	r3, [r7, #31]
 8004618:	e0af      	b.n	800477a <UART_SetConfig+0x212>
 800461a:	2308      	movs	r3, #8
 800461c:	77fb      	strb	r3, [r7, #31]
 800461e:	e0ac      	b.n	800477a <UART_SetConfig+0x212>
 8004620:	2310      	movs	r3, #16
 8004622:	77fb      	strb	r3, [r7, #31]
 8004624:	e0a9      	b.n	800477a <UART_SetConfig+0x212>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a88      	ldr	r2, [pc, #544]	; (800484c <UART_SetConfig+0x2e4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d124      	bne.n	800467a <UART_SetConfig+0x112>
 8004630:	4b85      	ldr	r3, [pc, #532]	; (8004848 <UART_SetConfig+0x2e0>)
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004638:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800463c:	d011      	beq.n	8004662 <UART_SetConfig+0xfa>
 800463e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004642:	d817      	bhi.n	8004674 <UART_SetConfig+0x10c>
 8004644:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004648:	d011      	beq.n	800466e <UART_SetConfig+0x106>
 800464a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800464e:	d811      	bhi.n	8004674 <UART_SetConfig+0x10c>
 8004650:	2b00      	cmp	r3, #0
 8004652:	d003      	beq.n	800465c <UART_SetConfig+0xf4>
 8004654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004658:	d006      	beq.n	8004668 <UART_SetConfig+0x100>
 800465a:	e00b      	b.n	8004674 <UART_SetConfig+0x10c>
 800465c:	2300      	movs	r3, #0
 800465e:	77fb      	strb	r3, [r7, #31]
 8004660:	e08b      	b.n	800477a <UART_SetConfig+0x212>
 8004662:	2302      	movs	r3, #2
 8004664:	77fb      	strb	r3, [r7, #31]
 8004666:	e088      	b.n	800477a <UART_SetConfig+0x212>
 8004668:	2304      	movs	r3, #4
 800466a:	77fb      	strb	r3, [r7, #31]
 800466c:	e085      	b.n	800477a <UART_SetConfig+0x212>
 800466e:	2308      	movs	r3, #8
 8004670:	77fb      	strb	r3, [r7, #31]
 8004672:	e082      	b.n	800477a <UART_SetConfig+0x212>
 8004674:	2310      	movs	r3, #16
 8004676:	77fb      	strb	r3, [r7, #31]
 8004678:	e07f      	b.n	800477a <UART_SetConfig+0x212>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a74      	ldr	r2, [pc, #464]	; (8004850 <UART_SetConfig+0x2e8>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d124      	bne.n	80046ce <UART_SetConfig+0x166>
 8004684:	4b70      	ldr	r3, [pc, #448]	; (8004848 <UART_SetConfig+0x2e0>)
 8004686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004688:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800468c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004690:	d011      	beq.n	80046b6 <UART_SetConfig+0x14e>
 8004692:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004696:	d817      	bhi.n	80046c8 <UART_SetConfig+0x160>
 8004698:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800469c:	d011      	beq.n	80046c2 <UART_SetConfig+0x15a>
 800469e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80046a2:	d811      	bhi.n	80046c8 <UART_SetConfig+0x160>
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d003      	beq.n	80046b0 <UART_SetConfig+0x148>
 80046a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046ac:	d006      	beq.n	80046bc <UART_SetConfig+0x154>
 80046ae:	e00b      	b.n	80046c8 <UART_SetConfig+0x160>
 80046b0:	2300      	movs	r3, #0
 80046b2:	77fb      	strb	r3, [r7, #31]
 80046b4:	e061      	b.n	800477a <UART_SetConfig+0x212>
 80046b6:	2302      	movs	r3, #2
 80046b8:	77fb      	strb	r3, [r7, #31]
 80046ba:	e05e      	b.n	800477a <UART_SetConfig+0x212>
 80046bc:	2304      	movs	r3, #4
 80046be:	77fb      	strb	r3, [r7, #31]
 80046c0:	e05b      	b.n	800477a <UART_SetConfig+0x212>
 80046c2:	2308      	movs	r3, #8
 80046c4:	77fb      	strb	r3, [r7, #31]
 80046c6:	e058      	b.n	800477a <UART_SetConfig+0x212>
 80046c8:	2310      	movs	r3, #16
 80046ca:	77fb      	strb	r3, [r7, #31]
 80046cc:	e055      	b.n	800477a <UART_SetConfig+0x212>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a60      	ldr	r2, [pc, #384]	; (8004854 <UART_SetConfig+0x2ec>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d124      	bne.n	8004722 <UART_SetConfig+0x1ba>
 80046d8:	4b5b      	ldr	r3, [pc, #364]	; (8004848 <UART_SetConfig+0x2e0>)
 80046da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046dc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80046e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046e4:	d011      	beq.n	800470a <UART_SetConfig+0x1a2>
 80046e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046ea:	d817      	bhi.n	800471c <UART_SetConfig+0x1b4>
 80046ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046f0:	d011      	beq.n	8004716 <UART_SetConfig+0x1ae>
 80046f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046f6:	d811      	bhi.n	800471c <UART_SetConfig+0x1b4>
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d003      	beq.n	8004704 <UART_SetConfig+0x19c>
 80046fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004700:	d006      	beq.n	8004710 <UART_SetConfig+0x1a8>
 8004702:	e00b      	b.n	800471c <UART_SetConfig+0x1b4>
 8004704:	2300      	movs	r3, #0
 8004706:	77fb      	strb	r3, [r7, #31]
 8004708:	e037      	b.n	800477a <UART_SetConfig+0x212>
 800470a:	2302      	movs	r3, #2
 800470c:	77fb      	strb	r3, [r7, #31]
 800470e:	e034      	b.n	800477a <UART_SetConfig+0x212>
 8004710:	2304      	movs	r3, #4
 8004712:	77fb      	strb	r3, [r7, #31]
 8004714:	e031      	b.n	800477a <UART_SetConfig+0x212>
 8004716:	2308      	movs	r3, #8
 8004718:	77fb      	strb	r3, [r7, #31]
 800471a:	e02e      	b.n	800477a <UART_SetConfig+0x212>
 800471c:	2310      	movs	r3, #16
 800471e:	77fb      	strb	r3, [r7, #31]
 8004720:	e02b      	b.n	800477a <UART_SetConfig+0x212>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a4c      	ldr	r2, [pc, #304]	; (8004858 <UART_SetConfig+0x2f0>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d124      	bne.n	8004776 <UART_SetConfig+0x20e>
 800472c:	4b46      	ldr	r3, [pc, #280]	; (8004848 <UART_SetConfig+0x2e0>)
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004734:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004738:	d011      	beq.n	800475e <UART_SetConfig+0x1f6>
 800473a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800473e:	d817      	bhi.n	8004770 <UART_SetConfig+0x208>
 8004740:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004744:	d011      	beq.n	800476a <UART_SetConfig+0x202>
 8004746:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800474a:	d811      	bhi.n	8004770 <UART_SetConfig+0x208>
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <UART_SetConfig+0x1f0>
 8004750:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004754:	d006      	beq.n	8004764 <UART_SetConfig+0x1fc>
 8004756:	e00b      	b.n	8004770 <UART_SetConfig+0x208>
 8004758:	2300      	movs	r3, #0
 800475a:	77fb      	strb	r3, [r7, #31]
 800475c:	e00d      	b.n	800477a <UART_SetConfig+0x212>
 800475e:	2302      	movs	r3, #2
 8004760:	77fb      	strb	r3, [r7, #31]
 8004762:	e00a      	b.n	800477a <UART_SetConfig+0x212>
 8004764:	2304      	movs	r3, #4
 8004766:	77fb      	strb	r3, [r7, #31]
 8004768:	e007      	b.n	800477a <UART_SetConfig+0x212>
 800476a:	2308      	movs	r3, #8
 800476c:	77fb      	strb	r3, [r7, #31]
 800476e:	e004      	b.n	800477a <UART_SetConfig+0x212>
 8004770:	2310      	movs	r3, #16
 8004772:	77fb      	strb	r3, [r7, #31]
 8004774:	e001      	b.n	800477a <UART_SetConfig+0x212>
 8004776:	2310      	movs	r3, #16
 8004778:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004782:	d16d      	bne.n	8004860 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8004784:	7ffb      	ldrb	r3, [r7, #31]
 8004786:	2b08      	cmp	r3, #8
 8004788:	d827      	bhi.n	80047da <UART_SetConfig+0x272>
 800478a:	a201      	add	r2, pc, #4	; (adr r2, 8004790 <UART_SetConfig+0x228>)
 800478c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004790:	080047b5 	.word	0x080047b5
 8004794:	080047bd 	.word	0x080047bd
 8004798:	080047c5 	.word	0x080047c5
 800479c:	080047db 	.word	0x080047db
 80047a0:	080047cb 	.word	0x080047cb
 80047a4:	080047db 	.word	0x080047db
 80047a8:	080047db 	.word	0x080047db
 80047ac:	080047db 	.word	0x080047db
 80047b0:	080047d3 	.word	0x080047d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047b4:	f7fe fe82 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 80047b8:	61b8      	str	r0, [r7, #24]
        break;
 80047ba:	e013      	b.n	80047e4 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047bc:	f7fe fea0 	bl	8003500 <HAL_RCC_GetPCLK2Freq>
 80047c0:	61b8      	str	r0, [r7, #24]
        break;
 80047c2:	e00f      	b.n	80047e4 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047c4:	4b25      	ldr	r3, [pc, #148]	; (800485c <UART_SetConfig+0x2f4>)
 80047c6:	61bb      	str	r3, [r7, #24]
        break;
 80047c8:	e00c      	b.n	80047e4 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ca:	f7fe fe01 	bl	80033d0 <HAL_RCC_GetSysClockFreq>
 80047ce:	61b8      	str	r0, [r7, #24]
        break;
 80047d0:	e008      	b.n	80047e4 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047d6:	61bb      	str	r3, [r7, #24]
        break;
 80047d8:	e004      	b.n	80047e4 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 80047da:	2300      	movs	r3, #0
 80047dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	77bb      	strb	r3, [r7, #30]
        break;
 80047e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 8086 	beq.w	80048f8 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	005a      	lsls	r2, r3, #1
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	085b      	lsrs	r3, r3, #1
 80047f6:	441a      	add	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004800:	b29b      	uxth	r3, r3
 8004802:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	2b0f      	cmp	r3, #15
 8004808:	d916      	bls.n	8004838 <UART_SetConfig+0x2d0>
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004810:	d212      	bcs.n	8004838 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	b29b      	uxth	r3, r3
 8004816:	f023 030f 	bic.w	r3, r3, #15
 800481a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	085b      	lsrs	r3, r3, #1
 8004820:	b29b      	uxth	r3, r3
 8004822:	f003 0307 	and.w	r3, r3, #7
 8004826:	b29a      	uxth	r2, r3
 8004828:	89fb      	ldrh	r3, [r7, #14]
 800482a:	4313      	orrs	r3, r2
 800482c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	89fa      	ldrh	r2, [r7, #14]
 8004834:	60da      	str	r2, [r3, #12]
 8004836:	e05f      	b.n	80048f8 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	77bb      	strb	r3, [r7, #30]
 800483c:	e05c      	b.n	80048f8 <UART_SetConfig+0x390>
 800483e:	bf00      	nop
 8004840:	efff69f3 	.word	0xefff69f3
 8004844:	40013800 	.word	0x40013800
 8004848:	40021000 	.word	0x40021000
 800484c:	40004400 	.word	0x40004400
 8004850:	40004800 	.word	0x40004800
 8004854:	40004c00 	.word	0x40004c00
 8004858:	40005000 	.word	0x40005000
 800485c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8004860:	7ffb      	ldrb	r3, [r7, #31]
 8004862:	2b08      	cmp	r3, #8
 8004864:	d827      	bhi.n	80048b6 <UART_SetConfig+0x34e>
 8004866:	a201      	add	r2, pc, #4	; (adr r2, 800486c <UART_SetConfig+0x304>)
 8004868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486c:	08004891 	.word	0x08004891
 8004870:	08004899 	.word	0x08004899
 8004874:	080048a1 	.word	0x080048a1
 8004878:	080048b7 	.word	0x080048b7
 800487c:	080048a7 	.word	0x080048a7
 8004880:	080048b7 	.word	0x080048b7
 8004884:	080048b7 	.word	0x080048b7
 8004888:	080048b7 	.word	0x080048b7
 800488c:	080048af 	.word	0x080048af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004890:	f7fe fe14 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8004894:	61b8      	str	r0, [r7, #24]
        break;
 8004896:	e013      	b.n	80048c0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004898:	f7fe fe32 	bl	8003500 <HAL_RCC_GetPCLK2Freq>
 800489c:	61b8      	str	r0, [r7, #24]
        break;
 800489e:	e00f      	b.n	80048c0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048a0:	4b1b      	ldr	r3, [pc, #108]	; (8004910 <UART_SetConfig+0x3a8>)
 80048a2:	61bb      	str	r3, [r7, #24]
        break;
 80048a4:	e00c      	b.n	80048c0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048a6:	f7fe fd93 	bl	80033d0 <HAL_RCC_GetSysClockFreq>
 80048aa:	61b8      	str	r0, [r7, #24]
        break;
 80048ac:	e008      	b.n	80048c0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048b2:	61bb      	str	r3, [r7, #24]
        break;
 80048b4:	e004      	b.n	80048c0 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	77bb      	strb	r3, [r7, #30]
        break;
 80048be:	bf00      	nop
    }

    if (pclk != 0U)
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d018      	beq.n	80048f8 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	085a      	lsrs	r2, r3, #1
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	441a      	add	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d8:	b29b      	uxth	r3, r3
 80048da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	2b0f      	cmp	r3, #15
 80048e0:	d908      	bls.n	80048f4 <UART_SetConfig+0x38c>
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e8:	d204      	bcs.n	80048f4 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	60da      	str	r2, [r3, #12]
 80048f2:	e001      	b.n	80048f8 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004904:	7fbb      	ldrb	r3, [r7, #30]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3720      	adds	r7, #32
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	007a1200 	.word	0x007a1200

08004914 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00a      	beq.n	800493e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00a      	beq.n	8004960 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	430a      	orrs	r2, r1
 800495e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00a      	beq.n	8004982 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00a      	beq.n	80049a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	f003 0310 	and.w	r3, r3, #16
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00a      	beq.n	80049c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	f003 0320 	and.w	r3, r3, #32
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d01a      	beq.n	8004a2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a12:	d10a      	bne.n	8004a2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00a      	beq.n	8004a4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	605a      	str	r2, [r3, #4]
  }
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a68:	f7fc ffd8 	bl	8001a1c <HAL_GetTick>
 8004a6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0308 	and.w	r3, r3, #8
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d10e      	bne.n	8004a9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f82d 	bl	8004aea <UART_WaitOnFlagUntilTimeout>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e023      	b.n	8004ae2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b04      	cmp	r3, #4
 8004aa6:	d10e      	bne.n	8004ac6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aa8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f817 	bl	8004aea <UART_WaitOnFlagUntilTimeout>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e00d      	b.n	8004ae2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2220      	movs	r2, #32
 8004aca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b084      	sub	sp, #16
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	60f8      	str	r0, [r7, #12]
 8004af2:	60b9      	str	r1, [r7, #8]
 8004af4:	603b      	str	r3, [r7, #0]
 8004af6:	4613      	mov	r3, r2
 8004af8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004afa:	e05e      	b.n	8004bba <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b02:	d05a      	beq.n	8004bba <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b04:	f7fc ff8a 	bl	8001a1c <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d302      	bcc.n	8004b1a <UART_WaitOnFlagUntilTimeout+0x30>
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d11b      	bne.n	8004b52 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b28:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0201 	bic.w	r2, r2, #1
 8004b38:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2220      	movs	r2, #32
 8004b44:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e043      	b.n	8004bda <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d02c      	beq.n	8004bba <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b6e:	d124      	bne.n	8004bba <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b78:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b88:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f022 0201 	bic.w	r2, r2, #1
 8004b98:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e00f      	b.n	8004bda <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69da      	ldr	r2, [r3, #28]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	bf0c      	ite	eq
 8004bca:	2301      	moveq	r3, #1
 8004bcc:	2300      	movne	r3, #0
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	79fb      	ldrb	r3, [r7, #7]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d091      	beq.n	8004afc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004bf8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0201 	bic.w	r2, r2, #1
 8004c08:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d107      	bne.n	8004c22 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 0210 	bic.w	r2, r2, #16
 8004c20:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2220      	movs	r2, #32
 8004c26:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f7ff fc6c 	bl	800453c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c64:	bf00      	nop
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c82:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2220      	movs	r2, #32
 8004c88:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff fc49 	bl	8004528 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c96:	bf00      	nop
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <_ZdlPv>:
 8004cb2:	f000 badd 	b.w	8005270 <free>

08004cb6 <_ZdlPvj>:
 8004cb6:	f7ff bffc 	b.w	8004cb2 <_ZdlPv>

08004cba <_Znwj>:
 8004cba:	2801      	cmp	r0, #1
 8004cbc:	bf38      	it	cc
 8004cbe:	2001      	movcc	r0, #1
 8004cc0:	b510      	push	{r4, lr}
 8004cc2:	4604      	mov	r4, r0
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	f000 facb 	bl	8005260 <malloc>
 8004cca:	b930      	cbnz	r0, 8004cda <_Znwj+0x20>
 8004ccc:	f000 f8c0 	bl	8004e50 <_ZSt15get_new_handlerv>
 8004cd0:	b908      	cbnz	r0, 8004cd6 <_Znwj+0x1c>
 8004cd2:	f000 f8c5 	bl	8004e60 <abort>
 8004cd6:	4780      	blx	r0
 8004cd8:	e7f4      	b.n	8004cc4 <_Znwj+0xa>
 8004cda:	bd10      	pop	{r4, pc}

08004cdc <_ZSt17__throw_bad_allocv>:
 8004cdc:	b508      	push	{r3, lr}
 8004cde:	f000 f8bf 	bl	8004e60 <abort>

08004ce2 <_ZSt19__throw_logic_errorPKc>:
 8004ce2:	b508      	push	{r3, lr}
 8004ce4:	f000 f8bc 	bl	8004e60 <abort>

08004ce8 <_ZSt20__throw_length_errorPKc>:
 8004ce8:	b508      	push	{r3, lr}
 8004cea:	f000 f8b9 	bl	8004e60 <abort>

08004cee <_ZSt24__throw_out_of_range_fmtPKcz>:
 8004cee:	b40f      	push	{r0, r1, r2, r3}
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	f107 0418 	add.w	r4, r7, #24
 8004cfa:	f854 2b04 	ldr.w	r2, [r4], #4
 8004cfe:	607a      	str	r2, [r7, #4]
 8004d00:	4610      	mov	r0, r2
 8004d02:	f7fb fa6d 	bl	80001e0 <strlen>
 8004d06:	f200 2307 	addw	r3, r0, #519	; 0x207
 8004d0a:	f023 0307 	bic.w	r3, r3, #7
 8004d0e:	ebad 0d03 	sub.w	sp, sp, r3
 8004d12:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	60fc      	str	r4, [r7, #12]
 8004d1a:	4623      	mov	r3, r4
 8004d1c:	4668      	mov	r0, sp
 8004d1e:	f000 f855 	bl	8004dcc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8004d22:	f000 f89d 	bl	8004e60 <abort>
	...

08004d28 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b09c      	sub	sp, #112	; 0x70
 8004d2c:	4606      	mov	r6, r0
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	460c      	mov	r4, r1
 8004d32:	1ba4      	subs	r4, r4, r6
 8004d34:	490e      	ldr	r1, [pc, #56]	; (8004d70 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8004d36:	2269      	movs	r2, #105	; 0x69
 8004d38:	1d38      	adds	r0, r7, #4
 8004d3a:	f000 faa1 	bl	8005280 <memcpy>
 8004d3e:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8004d42:	f023 0307 	bic.w	r3, r3, #7
 8004d46:	ebad 0d03 	sub.w	sp, sp, r3
 8004d4a:	466d      	mov	r5, sp
 8004d4c:	2268      	movs	r2, #104	; 0x68
 8004d4e:	1d39      	adds	r1, r7, #4
 8004d50:	4628      	mov	r0, r5
 8004d52:	f000 fa95 	bl	8005280 <memcpy>
 8004d56:	4622      	mov	r2, r4
 8004d58:	4631      	mov	r1, r6
 8004d5a:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8004d5e:	442c      	add	r4, r5
 8004d60:	f000 fa8e 	bl	8005280 <memcpy>
 8004d64:	2300      	movs	r3, #0
 8004d66:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	f7ff ffb9 	bl	8004ce2 <_ZSt19__throw_logic_errorPKc>
 8004d70:	0800628c 	.word	0x0800628c

08004d74 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8004d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	466d      	mov	r5, sp
 8004d7e:	f105 040c 	add.w	r4, r5, #12
 8004d82:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8004dc8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 8004d86:	4623      	mov	r3, r4
 8004d88:	f04f 0c0a 	mov.w	ip, #10
 8004d8c:	fbb2 f6fc 	udiv	r6, r2, ip
 8004d90:	fb0c 2e16 	mls	lr, ip, r6, r2
 8004d94:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8004d98:	f803 ed01 	strb.w	lr, [r3, #-1]!
 8004d9c:	4696      	mov	lr, r2
 8004d9e:	f1be 0f09 	cmp.w	lr, #9
 8004da2:	4632      	mov	r2, r6
 8004da4:	d8f2      	bhi.n	8004d8c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 8004da6:	1ae4      	subs	r4, r4, r3
 8004da8:	428c      	cmp	r4, r1
 8004daa:	d809      	bhi.n	8004dc0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8004dac:	f1c4 010c 	rsb	r1, r4, #12
 8004db0:	4622      	mov	r2, r4
 8004db2:	4429      	add	r1, r5
 8004db4:	f000 fa64 	bl	8005280 <memcpy>
 8004db8:	4620      	mov	r0, r4
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dc0:	f04f 34ff 	mov.w	r4, #4294967295
 8004dc4:	e7f8      	b.n	8004db8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 8004dc6:	bf00      	nop
 8004dc8:	080062f5 	.word	0x080062f5

08004dcc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8004dcc:	3901      	subs	r1, #1
 8004dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dd2:	4607      	mov	r7, r0
 8004dd4:	4615      	mov	r5, r2
 8004dd6:	eb00 0801 	add.w	r8, r0, r1
 8004dda:	4604      	mov	r4, r0
 8004ddc:	782a      	ldrb	r2, [r5, #0]
 8004dde:	b362      	cbz	r2, 8004e3a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8004de0:	4544      	cmp	r4, r8
 8004de2:	d22e      	bcs.n	8004e42 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8004de4:	2a25      	cmp	r2, #37	; 0x25
 8004de6:	d107      	bne.n	8004df8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8004de8:	786a      	ldrb	r2, [r5, #1]
 8004dea:	2a73      	cmp	r2, #115	; 0x73
 8004dec:	d009      	beq.n	8004e02 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 8004dee:	2a7a      	cmp	r2, #122	; 0x7a
 8004df0:	d012      	beq.n	8004e18 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 8004df2:	2a25      	cmp	r2, #37	; 0x25
 8004df4:	d100      	bne.n	8004df8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8004df6:	3501      	adds	r5, #1
 8004df8:	f815 2b01 	ldrb.w	r2, [r5], #1
 8004dfc:	f804 2b01 	strb.w	r2, [r4], #1
 8004e00:	e7ec      	b.n	8004ddc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8004e02:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e06:	3a01      	subs	r2, #1
 8004e08:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8004e0c:	b1e9      	cbz	r1, 8004e4a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7e>
 8004e0e:	4544      	cmp	r4, r8
 8004e10:	d017      	beq.n	8004e42 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8004e12:	f804 1b01 	strb.w	r1, [r4], #1
 8004e16:	e7f7      	b.n	8004e08 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8004e18:	78aa      	ldrb	r2, [r5, #2]
 8004e1a:	2a75      	cmp	r2, #117	; 0x75
 8004e1c:	d1ec      	bne.n	8004df8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8004e1e:	461e      	mov	r6, r3
 8004e20:	eba8 0104 	sub.w	r1, r8, r4
 8004e24:	f856 2b04 	ldr.w	r2, [r6], #4
 8004e28:	4620      	mov	r0, r4
 8004e2a:	f7ff ffa3 	bl	8004d74 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8004e2e:	2800      	cmp	r0, #0
 8004e30:	dd07      	ble.n	8004e42 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8004e32:	4404      	add	r4, r0
 8004e34:	3503      	adds	r5, #3
 8004e36:	4633      	mov	r3, r6
 8004e38:	e7d0      	b.n	8004ddc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8004e3a:	7022      	strb	r2, [r4, #0]
 8004e3c:	1be0      	subs	r0, r4, r7
 8004e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e42:	4621      	mov	r1, r4
 8004e44:	4638      	mov	r0, r7
 8004e46:	f7ff ff6f 	bl	8004d28 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8004e4a:	3502      	adds	r5, #2
 8004e4c:	e7c6      	b.n	8004ddc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
	...

08004e50 <_ZSt15get_new_handlerv>:
 8004e50:	4b02      	ldr	r3, [pc, #8]	; (8004e5c <_ZSt15get_new_handlerv+0xc>)
 8004e52:	6818      	ldr	r0, [r3, #0]
 8004e54:	f3bf 8f5b 	dmb	ish
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	200001b0 	.word	0x200001b0

08004e60 <abort>:
 8004e60:	b508      	push	{r3, lr}
 8004e62:	2006      	movs	r0, #6
 8004e64:	f000 fbac 	bl	80055c0 <raise>
 8004e68:	2001      	movs	r0, #1
 8004e6a:	f7fc fc53 	bl	8001714 <_exit>
	...

08004e70 <__errno>:
 8004e70:	4b01      	ldr	r3, [pc, #4]	; (8004e78 <__errno+0x8>)
 8004e72:	6818      	ldr	r0, [r3, #0]
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	2000000c 	.word	0x2000000c

08004e7c <__sflush_r>:
 8004e7c:	898a      	ldrh	r2, [r1, #12]
 8004e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e82:	4605      	mov	r5, r0
 8004e84:	0710      	lsls	r0, r2, #28
 8004e86:	460c      	mov	r4, r1
 8004e88:	d458      	bmi.n	8004f3c <__sflush_r+0xc0>
 8004e8a:	684b      	ldr	r3, [r1, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	dc05      	bgt.n	8004e9c <__sflush_r+0x20>
 8004e90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	dc02      	bgt.n	8004e9c <__sflush_r+0x20>
 8004e96:	2000      	movs	r0, #0
 8004e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e9e:	2e00      	cmp	r6, #0
 8004ea0:	d0f9      	beq.n	8004e96 <__sflush_r+0x1a>
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ea8:	682f      	ldr	r7, [r5, #0]
 8004eaa:	602b      	str	r3, [r5, #0]
 8004eac:	d032      	beq.n	8004f14 <__sflush_r+0x98>
 8004eae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004eb0:	89a3      	ldrh	r3, [r4, #12]
 8004eb2:	075a      	lsls	r2, r3, #29
 8004eb4:	d505      	bpl.n	8004ec2 <__sflush_r+0x46>
 8004eb6:	6863      	ldr	r3, [r4, #4]
 8004eb8:	1ac0      	subs	r0, r0, r3
 8004eba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ebc:	b10b      	cbz	r3, 8004ec2 <__sflush_r+0x46>
 8004ebe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ec0:	1ac0      	subs	r0, r0, r3
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ec8:	6a21      	ldr	r1, [r4, #32]
 8004eca:	4628      	mov	r0, r5
 8004ecc:	47b0      	blx	r6
 8004ece:	1c43      	adds	r3, r0, #1
 8004ed0:	89a3      	ldrh	r3, [r4, #12]
 8004ed2:	d106      	bne.n	8004ee2 <__sflush_r+0x66>
 8004ed4:	6829      	ldr	r1, [r5, #0]
 8004ed6:	291d      	cmp	r1, #29
 8004ed8:	d82c      	bhi.n	8004f34 <__sflush_r+0xb8>
 8004eda:	4a2a      	ldr	r2, [pc, #168]	; (8004f84 <__sflush_r+0x108>)
 8004edc:	40ca      	lsrs	r2, r1
 8004ede:	07d6      	lsls	r6, r2, #31
 8004ee0:	d528      	bpl.n	8004f34 <__sflush_r+0xb8>
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	6062      	str	r2, [r4, #4]
 8004ee6:	04d9      	lsls	r1, r3, #19
 8004ee8:	6922      	ldr	r2, [r4, #16]
 8004eea:	6022      	str	r2, [r4, #0]
 8004eec:	d504      	bpl.n	8004ef8 <__sflush_r+0x7c>
 8004eee:	1c42      	adds	r2, r0, #1
 8004ef0:	d101      	bne.n	8004ef6 <__sflush_r+0x7a>
 8004ef2:	682b      	ldr	r3, [r5, #0]
 8004ef4:	b903      	cbnz	r3, 8004ef8 <__sflush_r+0x7c>
 8004ef6:	6560      	str	r0, [r4, #84]	; 0x54
 8004ef8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004efa:	602f      	str	r7, [r5, #0]
 8004efc:	2900      	cmp	r1, #0
 8004efe:	d0ca      	beq.n	8004e96 <__sflush_r+0x1a>
 8004f00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f04:	4299      	cmp	r1, r3
 8004f06:	d002      	beq.n	8004f0e <__sflush_r+0x92>
 8004f08:	4628      	mov	r0, r5
 8004f0a:	f000 f9e9 	bl	80052e0 <_free_r>
 8004f0e:	2000      	movs	r0, #0
 8004f10:	6360      	str	r0, [r4, #52]	; 0x34
 8004f12:	e7c1      	b.n	8004e98 <__sflush_r+0x1c>
 8004f14:	6a21      	ldr	r1, [r4, #32]
 8004f16:	2301      	movs	r3, #1
 8004f18:	4628      	mov	r0, r5
 8004f1a:	47b0      	blx	r6
 8004f1c:	1c41      	adds	r1, r0, #1
 8004f1e:	d1c7      	bne.n	8004eb0 <__sflush_r+0x34>
 8004f20:	682b      	ldr	r3, [r5, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0c4      	beq.n	8004eb0 <__sflush_r+0x34>
 8004f26:	2b1d      	cmp	r3, #29
 8004f28:	d001      	beq.n	8004f2e <__sflush_r+0xb2>
 8004f2a:	2b16      	cmp	r3, #22
 8004f2c:	d101      	bne.n	8004f32 <__sflush_r+0xb6>
 8004f2e:	602f      	str	r7, [r5, #0]
 8004f30:	e7b1      	b.n	8004e96 <__sflush_r+0x1a>
 8004f32:	89a3      	ldrh	r3, [r4, #12]
 8004f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f38:	81a3      	strh	r3, [r4, #12]
 8004f3a:	e7ad      	b.n	8004e98 <__sflush_r+0x1c>
 8004f3c:	690f      	ldr	r7, [r1, #16]
 8004f3e:	2f00      	cmp	r7, #0
 8004f40:	d0a9      	beq.n	8004e96 <__sflush_r+0x1a>
 8004f42:	0793      	lsls	r3, r2, #30
 8004f44:	680e      	ldr	r6, [r1, #0]
 8004f46:	bf08      	it	eq
 8004f48:	694b      	ldreq	r3, [r1, #20]
 8004f4a:	600f      	str	r7, [r1, #0]
 8004f4c:	bf18      	it	ne
 8004f4e:	2300      	movne	r3, #0
 8004f50:	eba6 0807 	sub.w	r8, r6, r7
 8004f54:	608b      	str	r3, [r1, #8]
 8004f56:	f1b8 0f00 	cmp.w	r8, #0
 8004f5a:	dd9c      	ble.n	8004e96 <__sflush_r+0x1a>
 8004f5c:	6a21      	ldr	r1, [r4, #32]
 8004f5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004f60:	4643      	mov	r3, r8
 8004f62:	463a      	mov	r2, r7
 8004f64:	4628      	mov	r0, r5
 8004f66:	47b0      	blx	r6
 8004f68:	2800      	cmp	r0, #0
 8004f6a:	dc06      	bgt.n	8004f7a <__sflush_r+0xfe>
 8004f6c:	89a3      	ldrh	r3, [r4, #12]
 8004f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f72:	81a3      	strh	r3, [r4, #12]
 8004f74:	f04f 30ff 	mov.w	r0, #4294967295
 8004f78:	e78e      	b.n	8004e98 <__sflush_r+0x1c>
 8004f7a:	4407      	add	r7, r0
 8004f7c:	eba8 0800 	sub.w	r8, r8, r0
 8004f80:	e7e9      	b.n	8004f56 <__sflush_r+0xda>
 8004f82:	bf00      	nop
 8004f84:	20400001 	.word	0x20400001

08004f88 <_fflush_r>:
 8004f88:	b538      	push	{r3, r4, r5, lr}
 8004f8a:	690b      	ldr	r3, [r1, #16]
 8004f8c:	4605      	mov	r5, r0
 8004f8e:	460c      	mov	r4, r1
 8004f90:	b913      	cbnz	r3, 8004f98 <_fflush_r+0x10>
 8004f92:	2500      	movs	r5, #0
 8004f94:	4628      	mov	r0, r5
 8004f96:	bd38      	pop	{r3, r4, r5, pc}
 8004f98:	b118      	cbz	r0, 8004fa2 <_fflush_r+0x1a>
 8004f9a:	6983      	ldr	r3, [r0, #24]
 8004f9c:	b90b      	cbnz	r3, 8004fa2 <_fflush_r+0x1a>
 8004f9e:	f000 f899 	bl	80050d4 <__sinit>
 8004fa2:	4b14      	ldr	r3, [pc, #80]	; (8004ff4 <_fflush_r+0x6c>)
 8004fa4:	429c      	cmp	r4, r3
 8004fa6:	d11b      	bne.n	8004fe0 <_fflush_r+0x58>
 8004fa8:	686c      	ldr	r4, [r5, #4]
 8004faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d0ef      	beq.n	8004f92 <_fflush_r+0xa>
 8004fb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004fb4:	07d0      	lsls	r0, r2, #31
 8004fb6:	d404      	bmi.n	8004fc2 <_fflush_r+0x3a>
 8004fb8:	0599      	lsls	r1, r3, #22
 8004fba:	d402      	bmi.n	8004fc2 <_fflush_r+0x3a>
 8004fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fbe:	f000 f94c 	bl	800525a <__retarget_lock_acquire_recursive>
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	4621      	mov	r1, r4
 8004fc6:	f7ff ff59 	bl	8004e7c <__sflush_r>
 8004fca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fcc:	07da      	lsls	r2, r3, #31
 8004fce:	4605      	mov	r5, r0
 8004fd0:	d4e0      	bmi.n	8004f94 <_fflush_r+0xc>
 8004fd2:	89a3      	ldrh	r3, [r4, #12]
 8004fd4:	059b      	lsls	r3, r3, #22
 8004fd6:	d4dd      	bmi.n	8004f94 <_fflush_r+0xc>
 8004fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fda:	f000 f93f 	bl	800525c <__retarget_lock_release_recursive>
 8004fde:	e7d9      	b.n	8004f94 <_fflush_r+0xc>
 8004fe0:	4b05      	ldr	r3, [pc, #20]	; (8004ff8 <_fflush_r+0x70>)
 8004fe2:	429c      	cmp	r4, r3
 8004fe4:	d101      	bne.n	8004fea <_fflush_r+0x62>
 8004fe6:	68ac      	ldr	r4, [r5, #8]
 8004fe8:	e7df      	b.n	8004faa <_fflush_r+0x22>
 8004fea:	4b04      	ldr	r3, [pc, #16]	; (8004ffc <_fflush_r+0x74>)
 8004fec:	429c      	cmp	r4, r3
 8004fee:	bf08      	it	eq
 8004ff0:	68ec      	ldreq	r4, [r5, #12]
 8004ff2:	e7da      	b.n	8004faa <_fflush_r+0x22>
 8004ff4:	08006320 	.word	0x08006320
 8004ff8:	08006340 	.word	0x08006340
 8004ffc:	08006300 	.word	0x08006300

08005000 <fflush>:
 8005000:	4601      	mov	r1, r0
 8005002:	b920      	cbnz	r0, 800500e <fflush+0xe>
 8005004:	4b04      	ldr	r3, [pc, #16]	; (8005018 <fflush+0x18>)
 8005006:	4905      	ldr	r1, [pc, #20]	; (800501c <fflush+0x1c>)
 8005008:	6818      	ldr	r0, [r3, #0]
 800500a:	f000 b8e1 	b.w	80051d0 <_fwalk_reent>
 800500e:	4b04      	ldr	r3, [pc, #16]	; (8005020 <fflush+0x20>)
 8005010:	6818      	ldr	r0, [r3, #0]
 8005012:	f7ff bfb9 	b.w	8004f88 <_fflush_r>
 8005016:	bf00      	nop
 8005018:	08006360 	.word	0x08006360
 800501c:	08004f89 	.word	0x08004f89
 8005020:	2000000c 	.word	0x2000000c

08005024 <std>:
 8005024:	2300      	movs	r3, #0
 8005026:	b510      	push	{r4, lr}
 8005028:	4604      	mov	r4, r0
 800502a:	e9c0 3300 	strd	r3, r3, [r0]
 800502e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005032:	6083      	str	r3, [r0, #8]
 8005034:	8181      	strh	r1, [r0, #12]
 8005036:	6643      	str	r3, [r0, #100]	; 0x64
 8005038:	81c2      	strh	r2, [r0, #14]
 800503a:	6183      	str	r3, [r0, #24]
 800503c:	4619      	mov	r1, r3
 800503e:	2208      	movs	r2, #8
 8005040:	305c      	adds	r0, #92	; 0x5c
 8005042:	f000 f945 	bl	80052d0 <memset>
 8005046:	4b05      	ldr	r3, [pc, #20]	; (800505c <std+0x38>)
 8005048:	6263      	str	r3, [r4, #36]	; 0x24
 800504a:	4b05      	ldr	r3, [pc, #20]	; (8005060 <std+0x3c>)
 800504c:	62a3      	str	r3, [r4, #40]	; 0x28
 800504e:	4b05      	ldr	r3, [pc, #20]	; (8005064 <std+0x40>)
 8005050:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005052:	4b05      	ldr	r3, [pc, #20]	; (8005068 <std+0x44>)
 8005054:	6224      	str	r4, [r4, #32]
 8005056:	6323      	str	r3, [r4, #48]	; 0x30
 8005058:	bd10      	pop	{r4, pc}
 800505a:	bf00      	nop
 800505c:	080055f9 	.word	0x080055f9
 8005060:	0800561b 	.word	0x0800561b
 8005064:	08005653 	.word	0x08005653
 8005068:	08005677 	.word	0x08005677

0800506c <_cleanup_r>:
 800506c:	4901      	ldr	r1, [pc, #4]	; (8005074 <_cleanup_r+0x8>)
 800506e:	f000 b8af 	b.w	80051d0 <_fwalk_reent>
 8005072:	bf00      	nop
 8005074:	08004f89 	.word	0x08004f89

08005078 <__sfmoreglue>:
 8005078:	b570      	push	{r4, r5, r6, lr}
 800507a:	1e4a      	subs	r2, r1, #1
 800507c:	2568      	movs	r5, #104	; 0x68
 800507e:	4355      	muls	r5, r2
 8005080:	460e      	mov	r6, r1
 8005082:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005086:	f000 f97b 	bl	8005380 <_malloc_r>
 800508a:	4604      	mov	r4, r0
 800508c:	b140      	cbz	r0, 80050a0 <__sfmoreglue+0x28>
 800508e:	2100      	movs	r1, #0
 8005090:	e9c0 1600 	strd	r1, r6, [r0]
 8005094:	300c      	adds	r0, #12
 8005096:	60a0      	str	r0, [r4, #8]
 8005098:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800509c:	f000 f918 	bl	80052d0 <memset>
 80050a0:	4620      	mov	r0, r4
 80050a2:	bd70      	pop	{r4, r5, r6, pc}

080050a4 <__sfp_lock_acquire>:
 80050a4:	4801      	ldr	r0, [pc, #4]	; (80050ac <__sfp_lock_acquire+0x8>)
 80050a6:	f000 b8d8 	b.w	800525a <__retarget_lock_acquire_recursive>
 80050aa:	bf00      	nop
 80050ac:	200001c8 	.word	0x200001c8

080050b0 <__sfp_lock_release>:
 80050b0:	4801      	ldr	r0, [pc, #4]	; (80050b8 <__sfp_lock_release+0x8>)
 80050b2:	f000 b8d3 	b.w	800525c <__retarget_lock_release_recursive>
 80050b6:	bf00      	nop
 80050b8:	200001c8 	.word	0x200001c8

080050bc <__sinit_lock_acquire>:
 80050bc:	4801      	ldr	r0, [pc, #4]	; (80050c4 <__sinit_lock_acquire+0x8>)
 80050be:	f000 b8cc 	b.w	800525a <__retarget_lock_acquire_recursive>
 80050c2:	bf00      	nop
 80050c4:	200001c3 	.word	0x200001c3

080050c8 <__sinit_lock_release>:
 80050c8:	4801      	ldr	r0, [pc, #4]	; (80050d0 <__sinit_lock_release+0x8>)
 80050ca:	f000 b8c7 	b.w	800525c <__retarget_lock_release_recursive>
 80050ce:	bf00      	nop
 80050d0:	200001c3 	.word	0x200001c3

080050d4 <__sinit>:
 80050d4:	b510      	push	{r4, lr}
 80050d6:	4604      	mov	r4, r0
 80050d8:	f7ff fff0 	bl	80050bc <__sinit_lock_acquire>
 80050dc:	69a3      	ldr	r3, [r4, #24]
 80050de:	b11b      	cbz	r3, 80050e8 <__sinit+0x14>
 80050e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050e4:	f7ff bff0 	b.w	80050c8 <__sinit_lock_release>
 80050e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80050ec:	6523      	str	r3, [r4, #80]	; 0x50
 80050ee:	4b13      	ldr	r3, [pc, #76]	; (800513c <__sinit+0x68>)
 80050f0:	4a13      	ldr	r2, [pc, #76]	; (8005140 <__sinit+0x6c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80050f6:	42a3      	cmp	r3, r4
 80050f8:	bf04      	itt	eq
 80050fa:	2301      	moveq	r3, #1
 80050fc:	61a3      	streq	r3, [r4, #24]
 80050fe:	4620      	mov	r0, r4
 8005100:	f000 f820 	bl	8005144 <__sfp>
 8005104:	6060      	str	r0, [r4, #4]
 8005106:	4620      	mov	r0, r4
 8005108:	f000 f81c 	bl	8005144 <__sfp>
 800510c:	60a0      	str	r0, [r4, #8]
 800510e:	4620      	mov	r0, r4
 8005110:	f000 f818 	bl	8005144 <__sfp>
 8005114:	2200      	movs	r2, #0
 8005116:	60e0      	str	r0, [r4, #12]
 8005118:	2104      	movs	r1, #4
 800511a:	6860      	ldr	r0, [r4, #4]
 800511c:	f7ff ff82 	bl	8005024 <std>
 8005120:	68a0      	ldr	r0, [r4, #8]
 8005122:	2201      	movs	r2, #1
 8005124:	2109      	movs	r1, #9
 8005126:	f7ff ff7d 	bl	8005024 <std>
 800512a:	68e0      	ldr	r0, [r4, #12]
 800512c:	2202      	movs	r2, #2
 800512e:	2112      	movs	r1, #18
 8005130:	f7ff ff78 	bl	8005024 <std>
 8005134:	2301      	movs	r3, #1
 8005136:	61a3      	str	r3, [r4, #24]
 8005138:	e7d2      	b.n	80050e0 <__sinit+0xc>
 800513a:	bf00      	nop
 800513c:	08006360 	.word	0x08006360
 8005140:	0800506d 	.word	0x0800506d

08005144 <__sfp>:
 8005144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005146:	4607      	mov	r7, r0
 8005148:	f7ff ffac 	bl	80050a4 <__sfp_lock_acquire>
 800514c:	4b1e      	ldr	r3, [pc, #120]	; (80051c8 <__sfp+0x84>)
 800514e:	681e      	ldr	r6, [r3, #0]
 8005150:	69b3      	ldr	r3, [r6, #24]
 8005152:	b913      	cbnz	r3, 800515a <__sfp+0x16>
 8005154:	4630      	mov	r0, r6
 8005156:	f7ff ffbd 	bl	80050d4 <__sinit>
 800515a:	3648      	adds	r6, #72	; 0x48
 800515c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005160:	3b01      	subs	r3, #1
 8005162:	d503      	bpl.n	800516c <__sfp+0x28>
 8005164:	6833      	ldr	r3, [r6, #0]
 8005166:	b30b      	cbz	r3, 80051ac <__sfp+0x68>
 8005168:	6836      	ldr	r6, [r6, #0]
 800516a:	e7f7      	b.n	800515c <__sfp+0x18>
 800516c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005170:	b9d5      	cbnz	r5, 80051a8 <__sfp+0x64>
 8005172:	4b16      	ldr	r3, [pc, #88]	; (80051cc <__sfp+0x88>)
 8005174:	60e3      	str	r3, [r4, #12]
 8005176:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800517a:	6665      	str	r5, [r4, #100]	; 0x64
 800517c:	f000 f86c 	bl	8005258 <__retarget_lock_init_recursive>
 8005180:	f7ff ff96 	bl	80050b0 <__sfp_lock_release>
 8005184:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005188:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800518c:	6025      	str	r5, [r4, #0]
 800518e:	61a5      	str	r5, [r4, #24]
 8005190:	2208      	movs	r2, #8
 8005192:	4629      	mov	r1, r5
 8005194:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005198:	f000 f89a 	bl	80052d0 <memset>
 800519c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80051a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80051a4:	4620      	mov	r0, r4
 80051a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051a8:	3468      	adds	r4, #104	; 0x68
 80051aa:	e7d9      	b.n	8005160 <__sfp+0x1c>
 80051ac:	2104      	movs	r1, #4
 80051ae:	4638      	mov	r0, r7
 80051b0:	f7ff ff62 	bl	8005078 <__sfmoreglue>
 80051b4:	4604      	mov	r4, r0
 80051b6:	6030      	str	r0, [r6, #0]
 80051b8:	2800      	cmp	r0, #0
 80051ba:	d1d5      	bne.n	8005168 <__sfp+0x24>
 80051bc:	f7ff ff78 	bl	80050b0 <__sfp_lock_release>
 80051c0:	230c      	movs	r3, #12
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	e7ee      	b.n	80051a4 <__sfp+0x60>
 80051c6:	bf00      	nop
 80051c8:	08006360 	.word	0x08006360
 80051cc:	ffff0001 	.word	0xffff0001

080051d0 <_fwalk_reent>:
 80051d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051d4:	4606      	mov	r6, r0
 80051d6:	4688      	mov	r8, r1
 80051d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80051dc:	2700      	movs	r7, #0
 80051de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051e2:	f1b9 0901 	subs.w	r9, r9, #1
 80051e6:	d505      	bpl.n	80051f4 <_fwalk_reent+0x24>
 80051e8:	6824      	ldr	r4, [r4, #0]
 80051ea:	2c00      	cmp	r4, #0
 80051ec:	d1f7      	bne.n	80051de <_fwalk_reent+0xe>
 80051ee:	4638      	mov	r0, r7
 80051f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051f4:	89ab      	ldrh	r3, [r5, #12]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d907      	bls.n	800520a <_fwalk_reent+0x3a>
 80051fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051fe:	3301      	adds	r3, #1
 8005200:	d003      	beq.n	800520a <_fwalk_reent+0x3a>
 8005202:	4629      	mov	r1, r5
 8005204:	4630      	mov	r0, r6
 8005206:	47c0      	blx	r8
 8005208:	4307      	orrs	r7, r0
 800520a:	3568      	adds	r5, #104	; 0x68
 800520c:	e7e9      	b.n	80051e2 <_fwalk_reent+0x12>
	...

08005210 <__libc_init_array>:
 8005210:	b570      	push	{r4, r5, r6, lr}
 8005212:	4d0d      	ldr	r5, [pc, #52]	; (8005248 <__libc_init_array+0x38>)
 8005214:	4c0d      	ldr	r4, [pc, #52]	; (800524c <__libc_init_array+0x3c>)
 8005216:	1b64      	subs	r4, r4, r5
 8005218:	10a4      	asrs	r4, r4, #2
 800521a:	2600      	movs	r6, #0
 800521c:	42a6      	cmp	r6, r4
 800521e:	d109      	bne.n	8005234 <__libc_init_array+0x24>
 8005220:	4d0b      	ldr	r5, [pc, #44]	; (8005250 <__libc_init_array+0x40>)
 8005222:	4c0c      	ldr	r4, [pc, #48]	; (8005254 <__libc_init_array+0x44>)
 8005224:	f000 feb2 	bl	8005f8c <_init>
 8005228:	1b64      	subs	r4, r4, r5
 800522a:	10a4      	asrs	r4, r4, #2
 800522c:	2600      	movs	r6, #0
 800522e:	42a6      	cmp	r6, r4
 8005230:	d105      	bne.n	800523e <__libc_init_array+0x2e>
 8005232:	bd70      	pop	{r4, r5, r6, pc}
 8005234:	f855 3b04 	ldr.w	r3, [r5], #4
 8005238:	4798      	blx	r3
 800523a:	3601      	adds	r6, #1
 800523c:	e7ee      	b.n	800521c <__libc_init_array+0xc>
 800523e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005242:	4798      	blx	r3
 8005244:	3601      	adds	r6, #1
 8005246:	e7f2      	b.n	800522e <__libc_init_array+0x1e>
 8005248:	08006398 	.word	0x08006398
 800524c:	08006398 	.word	0x08006398
 8005250:	08006398 	.word	0x08006398
 8005254:	080063a0 	.word	0x080063a0

08005258 <__retarget_lock_init_recursive>:
 8005258:	4770      	bx	lr

0800525a <__retarget_lock_acquire_recursive>:
 800525a:	4770      	bx	lr

0800525c <__retarget_lock_release_recursive>:
 800525c:	4770      	bx	lr
	...

08005260 <malloc>:
 8005260:	4b02      	ldr	r3, [pc, #8]	; (800526c <malloc+0xc>)
 8005262:	4601      	mov	r1, r0
 8005264:	6818      	ldr	r0, [r3, #0]
 8005266:	f000 b88b 	b.w	8005380 <_malloc_r>
 800526a:	bf00      	nop
 800526c:	2000000c 	.word	0x2000000c

08005270 <free>:
 8005270:	4b02      	ldr	r3, [pc, #8]	; (800527c <free+0xc>)
 8005272:	4601      	mov	r1, r0
 8005274:	6818      	ldr	r0, [r3, #0]
 8005276:	f000 b833 	b.w	80052e0 <_free_r>
 800527a:	bf00      	nop
 800527c:	2000000c 	.word	0x2000000c

08005280 <memcpy>:
 8005280:	440a      	add	r2, r1
 8005282:	4291      	cmp	r1, r2
 8005284:	f100 33ff 	add.w	r3, r0, #4294967295
 8005288:	d100      	bne.n	800528c <memcpy+0xc>
 800528a:	4770      	bx	lr
 800528c:	b510      	push	{r4, lr}
 800528e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005292:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005296:	4291      	cmp	r1, r2
 8005298:	d1f9      	bne.n	800528e <memcpy+0xe>
 800529a:	bd10      	pop	{r4, pc}

0800529c <memmove>:
 800529c:	4288      	cmp	r0, r1
 800529e:	b510      	push	{r4, lr}
 80052a0:	eb01 0402 	add.w	r4, r1, r2
 80052a4:	d902      	bls.n	80052ac <memmove+0x10>
 80052a6:	4284      	cmp	r4, r0
 80052a8:	4623      	mov	r3, r4
 80052aa:	d807      	bhi.n	80052bc <memmove+0x20>
 80052ac:	1e43      	subs	r3, r0, #1
 80052ae:	42a1      	cmp	r1, r4
 80052b0:	d008      	beq.n	80052c4 <memmove+0x28>
 80052b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80052ba:	e7f8      	b.n	80052ae <memmove+0x12>
 80052bc:	4402      	add	r2, r0
 80052be:	4601      	mov	r1, r0
 80052c0:	428a      	cmp	r2, r1
 80052c2:	d100      	bne.n	80052c6 <memmove+0x2a>
 80052c4:	bd10      	pop	{r4, pc}
 80052c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052ce:	e7f7      	b.n	80052c0 <memmove+0x24>

080052d0 <memset>:
 80052d0:	4402      	add	r2, r0
 80052d2:	4603      	mov	r3, r0
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d100      	bne.n	80052da <memset+0xa>
 80052d8:	4770      	bx	lr
 80052da:	f803 1b01 	strb.w	r1, [r3], #1
 80052de:	e7f9      	b.n	80052d4 <memset+0x4>

080052e0 <_free_r>:
 80052e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052e2:	2900      	cmp	r1, #0
 80052e4:	d048      	beq.n	8005378 <_free_r+0x98>
 80052e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052ea:	9001      	str	r0, [sp, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f1a1 0404 	sub.w	r4, r1, #4
 80052f2:	bfb8      	it	lt
 80052f4:	18e4      	addlt	r4, r4, r3
 80052f6:	f000 fb1b 	bl	8005930 <__malloc_lock>
 80052fa:	4a20      	ldr	r2, [pc, #128]	; (800537c <_free_r+0x9c>)
 80052fc:	9801      	ldr	r0, [sp, #4]
 80052fe:	6813      	ldr	r3, [r2, #0]
 8005300:	4615      	mov	r5, r2
 8005302:	b933      	cbnz	r3, 8005312 <_free_r+0x32>
 8005304:	6063      	str	r3, [r4, #4]
 8005306:	6014      	str	r4, [r2, #0]
 8005308:	b003      	add	sp, #12
 800530a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800530e:	f000 bb15 	b.w	800593c <__malloc_unlock>
 8005312:	42a3      	cmp	r3, r4
 8005314:	d90b      	bls.n	800532e <_free_r+0x4e>
 8005316:	6821      	ldr	r1, [r4, #0]
 8005318:	1862      	adds	r2, r4, r1
 800531a:	4293      	cmp	r3, r2
 800531c:	bf04      	itt	eq
 800531e:	681a      	ldreq	r2, [r3, #0]
 8005320:	685b      	ldreq	r3, [r3, #4]
 8005322:	6063      	str	r3, [r4, #4]
 8005324:	bf04      	itt	eq
 8005326:	1852      	addeq	r2, r2, r1
 8005328:	6022      	streq	r2, [r4, #0]
 800532a:	602c      	str	r4, [r5, #0]
 800532c:	e7ec      	b.n	8005308 <_free_r+0x28>
 800532e:	461a      	mov	r2, r3
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	b10b      	cbz	r3, 8005338 <_free_r+0x58>
 8005334:	42a3      	cmp	r3, r4
 8005336:	d9fa      	bls.n	800532e <_free_r+0x4e>
 8005338:	6811      	ldr	r1, [r2, #0]
 800533a:	1855      	adds	r5, r2, r1
 800533c:	42a5      	cmp	r5, r4
 800533e:	d10b      	bne.n	8005358 <_free_r+0x78>
 8005340:	6824      	ldr	r4, [r4, #0]
 8005342:	4421      	add	r1, r4
 8005344:	1854      	adds	r4, r2, r1
 8005346:	42a3      	cmp	r3, r4
 8005348:	6011      	str	r1, [r2, #0]
 800534a:	d1dd      	bne.n	8005308 <_free_r+0x28>
 800534c:	681c      	ldr	r4, [r3, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	6053      	str	r3, [r2, #4]
 8005352:	4421      	add	r1, r4
 8005354:	6011      	str	r1, [r2, #0]
 8005356:	e7d7      	b.n	8005308 <_free_r+0x28>
 8005358:	d902      	bls.n	8005360 <_free_r+0x80>
 800535a:	230c      	movs	r3, #12
 800535c:	6003      	str	r3, [r0, #0]
 800535e:	e7d3      	b.n	8005308 <_free_r+0x28>
 8005360:	6825      	ldr	r5, [r4, #0]
 8005362:	1961      	adds	r1, r4, r5
 8005364:	428b      	cmp	r3, r1
 8005366:	bf04      	itt	eq
 8005368:	6819      	ldreq	r1, [r3, #0]
 800536a:	685b      	ldreq	r3, [r3, #4]
 800536c:	6063      	str	r3, [r4, #4]
 800536e:	bf04      	itt	eq
 8005370:	1949      	addeq	r1, r1, r5
 8005372:	6021      	streq	r1, [r4, #0]
 8005374:	6054      	str	r4, [r2, #4]
 8005376:	e7c7      	b.n	8005308 <_free_r+0x28>
 8005378:	b003      	add	sp, #12
 800537a:	bd30      	pop	{r4, r5, pc}
 800537c:	200001b4 	.word	0x200001b4

08005380 <_malloc_r>:
 8005380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005382:	1ccd      	adds	r5, r1, #3
 8005384:	f025 0503 	bic.w	r5, r5, #3
 8005388:	3508      	adds	r5, #8
 800538a:	2d0c      	cmp	r5, #12
 800538c:	bf38      	it	cc
 800538e:	250c      	movcc	r5, #12
 8005390:	2d00      	cmp	r5, #0
 8005392:	4606      	mov	r6, r0
 8005394:	db01      	blt.n	800539a <_malloc_r+0x1a>
 8005396:	42a9      	cmp	r1, r5
 8005398:	d903      	bls.n	80053a2 <_malloc_r+0x22>
 800539a:	230c      	movs	r3, #12
 800539c:	6033      	str	r3, [r6, #0]
 800539e:	2000      	movs	r0, #0
 80053a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053a2:	f000 fac5 	bl	8005930 <__malloc_lock>
 80053a6:	4921      	ldr	r1, [pc, #132]	; (800542c <_malloc_r+0xac>)
 80053a8:	680a      	ldr	r2, [r1, #0]
 80053aa:	4614      	mov	r4, r2
 80053ac:	b99c      	cbnz	r4, 80053d6 <_malloc_r+0x56>
 80053ae:	4f20      	ldr	r7, [pc, #128]	; (8005430 <_malloc_r+0xb0>)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	b923      	cbnz	r3, 80053be <_malloc_r+0x3e>
 80053b4:	4621      	mov	r1, r4
 80053b6:	4630      	mov	r0, r6
 80053b8:	f000 f8ca 	bl	8005550 <_sbrk_r>
 80053bc:	6038      	str	r0, [r7, #0]
 80053be:	4629      	mov	r1, r5
 80053c0:	4630      	mov	r0, r6
 80053c2:	f000 f8c5 	bl	8005550 <_sbrk_r>
 80053c6:	1c43      	adds	r3, r0, #1
 80053c8:	d123      	bne.n	8005412 <_malloc_r+0x92>
 80053ca:	230c      	movs	r3, #12
 80053cc:	6033      	str	r3, [r6, #0]
 80053ce:	4630      	mov	r0, r6
 80053d0:	f000 fab4 	bl	800593c <__malloc_unlock>
 80053d4:	e7e3      	b.n	800539e <_malloc_r+0x1e>
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	1b5b      	subs	r3, r3, r5
 80053da:	d417      	bmi.n	800540c <_malloc_r+0x8c>
 80053dc:	2b0b      	cmp	r3, #11
 80053de:	d903      	bls.n	80053e8 <_malloc_r+0x68>
 80053e0:	6023      	str	r3, [r4, #0]
 80053e2:	441c      	add	r4, r3
 80053e4:	6025      	str	r5, [r4, #0]
 80053e6:	e004      	b.n	80053f2 <_malloc_r+0x72>
 80053e8:	6863      	ldr	r3, [r4, #4]
 80053ea:	42a2      	cmp	r2, r4
 80053ec:	bf0c      	ite	eq
 80053ee:	600b      	streq	r3, [r1, #0]
 80053f0:	6053      	strne	r3, [r2, #4]
 80053f2:	4630      	mov	r0, r6
 80053f4:	f000 faa2 	bl	800593c <__malloc_unlock>
 80053f8:	f104 000b 	add.w	r0, r4, #11
 80053fc:	1d23      	adds	r3, r4, #4
 80053fe:	f020 0007 	bic.w	r0, r0, #7
 8005402:	1ac2      	subs	r2, r0, r3
 8005404:	d0cc      	beq.n	80053a0 <_malloc_r+0x20>
 8005406:	1a1b      	subs	r3, r3, r0
 8005408:	50a3      	str	r3, [r4, r2]
 800540a:	e7c9      	b.n	80053a0 <_malloc_r+0x20>
 800540c:	4622      	mov	r2, r4
 800540e:	6864      	ldr	r4, [r4, #4]
 8005410:	e7cc      	b.n	80053ac <_malloc_r+0x2c>
 8005412:	1cc4      	adds	r4, r0, #3
 8005414:	f024 0403 	bic.w	r4, r4, #3
 8005418:	42a0      	cmp	r0, r4
 800541a:	d0e3      	beq.n	80053e4 <_malloc_r+0x64>
 800541c:	1a21      	subs	r1, r4, r0
 800541e:	4630      	mov	r0, r6
 8005420:	f000 f896 	bl	8005550 <_sbrk_r>
 8005424:	3001      	adds	r0, #1
 8005426:	d1dd      	bne.n	80053e4 <_malloc_r+0x64>
 8005428:	e7cf      	b.n	80053ca <_malloc_r+0x4a>
 800542a:	bf00      	nop
 800542c:	200001b4 	.word	0x200001b4
 8005430:	200001b8 	.word	0x200001b8

08005434 <iprintf>:
 8005434:	b40f      	push	{r0, r1, r2, r3}
 8005436:	4b0a      	ldr	r3, [pc, #40]	; (8005460 <iprintf+0x2c>)
 8005438:	b513      	push	{r0, r1, r4, lr}
 800543a:	681c      	ldr	r4, [r3, #0]
 800543c:	b124      	cbz	r4, 8005448 <iprintf+0x14>
 800543e:	69a3      	ldr	r3, [r4, #24]
 8005440:	b913      	cbnz	r3, 8005448 <iprintf+0x14>
 8005442:	4620      	mov	r0, r4
 8005444:	f7ff fe46 	bl	80050d4 <__sinit>
 8005448:	ab05      	add	r3, sp, #20
 800544a:	9a04      	ldr	r2, [sp, #16]
 800544c:	68a1      	ldr	r1, [r4, #8]
 800544e:	9301      	str	r3, [sp, #4]
 8005450:	4620      	mov	r0, r4
 8005452:	f000 faa3 	bl	800599c <_vfiprintf_r>
 8005456:	b002      	add	sp, #8
 8005458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800545c:	b004      	add	sp, #16
 800545e:	4770      	bx	lr
 8005460:	2000000c 	.word	0x2000000c

08005464 <_puts_r>:
 8005464:	b570      	push	{r4, r5, r6, lr}
 8005466:	460e      	mov	r6, r1
 8005468:	4605      	mov	r5, r0
 800546a:	b118      	cbz	r0, 8005474 <_puts_r+0x10>
 800546c:	6983      	ldr	r3, [r0, #24]
 800546e:	b90b      	cbnz	r3, 8005474 <_puts_r+0x10>
 8005470:	f7ff fe30 	bl	80050d4 <__sinit>
 8005474:	69ab      	ldr	r3, [r5, #24]
 8005476:	68ac      	ldr	r4, [r5, #8]
 8005478:	b913      	cbnz	r3, 8005480 <_puts_r+0x1c>
 800547a:	4628      	mov	r0, r5
 800547c:	f7ff fe2a 	bl	80050d4 <__sinit>
 8005480:	4b2c      	ldr	r3, [pc, #176]	; (8005534 <_puts_r+0xd0>)
 8005482:	429c      	cmp	r4, r3
 8005484:	d120      	bne.n	80054c8 <_puts_r+0x64>
 8005486:	686c      	ldr	r4, [r5, #4]
 8005488:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800548a:	07db      	lsls	r3, r3, #31
 800548c:	d405      	bmi.n	800549a <_puts_r+0x36>
 800548e:	89a3      	ldrh	r3, [r4, #12]
 8005490:	0598      	lsls	r0, r3, #22
 8005492:	d402      	bmi.n	800549a <_puts_r+0x36>
 8005494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005496:	f7ff fee0 	bl	800525a <__retarget_lock_acquire_recursive>
 800549a:	89a3      	ldrh	r3, [r4, #12]
 800549c:	0719      	lsls	r1, r3, #28
 800549e:	d51d      	bpl.n	80054dc <_puts_r+0x78>
 80054a0:	6923      	ldr	r3, [r4, #16]
 80054a2:	b1db      	cbz	r3, 80054dc <_puts_r+0x78>
 80054a4:	3e01      	subs	r6, #1
 80054a6:	68a3      	ldr	r3, [r4, #8]
 80054a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80054ac:	3b01      	subs	r3, #1
 80054ae:	60a3      	str	r3, [r4, #8]
 80054b0:	bb39      	cbnz	r1, 8005502 <_puts_r+0x9e>
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	da38      	bge.n	8005528 <_puts_r+0xc4>
 80054b6:	4622      	mov	r2, r4
 80054b8:	210a      	movs	r1, #10
 80054ba:	4628      	mov	r0, r5
 80054bc:	f000 f8e0 	bl	8005680 <__swbuf_r>
 80054c0:	3001      	adds	r0, #1
 80054c2:	d011      	beq.n	80054e8 <_puts_r+0x84>
 80054c4:	250a      	movs	r5, #10
 80054c6:	e011      	b.n	80054ec <_puts_r+0x88>
 80054c8:	4b1b      	ldr	r3, [pc, #108]	; (8005538 <_puts_r+0xd4>)
 80054ca:	429c      	cmp	r4, r3
 80054cc:	d101      	bne.n	80054d2 <_puts_r+0x6e>
 80054ce:	68ac      	ldr	r4, [r5, #8]
 80054d0:	e7da      	b.n	8005488 <_puts_r+0x24>
 80054d2:	4b1a      	ldr	r3, [pc, #104]	; (800553c <_puts_r+0xd8>)
 80054d4:	429c      	cmp	r4, r3
 80054d6:	bf08      	it	eq
 80054d8:	68ec      	ldreq	r4, [r5, #12]
 80054da:	e7d5      	b.n	8005488 <_puts_r+0x24>
 80054dc:	4621      	mov	r1, r4
 80054de:	4628      	mov	r0, r5
 80054e0:	f000 f932 	bl	8005748 <__swsetup_r>
 80054e4:	2800      	cmp	r0, #0
 80054e6:	d0dd      	beq.n	80054a4 <_puts_r+0x40>
 80054e8:	f04f 35ff 	mov.w	r5, #4294967295
 80054ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054ee:	07da      	lsls	r2, r3, #31
 80054f0:	d405      	bmi.n	80054fe <_puts_r+0x9a>
 80054f2:	89a3      	ldrh	r3, [r4, #12]
 80054f4:	059b      	lsls	r3, r3, #22
 80054f6:	d402      	bmi.n	80054fe <_puts_r+0x9a>
 80054f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054fa:	f7ff feaf 	bl	800525c <__retarget_lock_release_recursive>
 80054fe:	4628      	mov	r0, r5
 8005500:	bd70      	pop	{r4, r5, r6, pc}
 8005502:	2b00      	cmp	r3, #0
 8005504:	da04      	bge.n	8005510 <_puts_r+0xac>
 8005506:	69a2      	ldr	r2, [r4, #24]
 8005508:	429a      	cmp	r2, r3
 800550a:	dc06      	bgt.n	800551a <_puts_r+0xb6>
 800550c:	290a      	cmp	r1, #10
 800550e:	d004      	beq.n	800551a <_puts_r+0xb6>
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	6022      	str	r2, [r4, #0]
 8005516:	7019      	strb	r1, [r3, #0]
 8005518:	e7c5      	b.n	80054a6 <_puts_r+0x42>
 800551a:	4622      	mov	r2, r4
 800551c:	4628      	mov	r0, r5
 800551e:	f000 f8af 	bl	8005680 <__swbuf_r>
 8005522:	3001      	adds	r0, #1
 8005524:	d1bf      	bne.n	80054a6 <_puts_r+0x42>
 8005526:	e7df      	b.n	80054e8 <_puts_r+0x84>
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	250a      	movs	r5, #10
 800552c:	1c5a      	adds	r2, r3, #1
 800552e:	6022      	str	r2, [r4, #0]
 8005530:	701d      	strb	r5, [r3, #0]
 8005532:	e7db      	b.n	80054ec <_puts_r+0x88>
 8005534:	08006320 	.word	0x08006320
 8005538:	08006340 	.word	0x08006340
 800553c:	08006300 	.word	0x08006300

08005540 <puts>:
 8005540:	4b02      	ldr	r3, [pc, #8]	; (800554c <puts+0xc>)
 8005542:	4601      	mov	r1, r0
 8005544:	6818      	ldr	r0, [r3, #0]
 8005546:	f7ff bf8d 	b.w	8005464 <_puts_r>
 800554a:	bf00      	nop
 800554c:	2000000c 	.word	0x2000000c

08005550 <_sbrk_r>:
 8005550:	b538      	push	{r3, r4, r5, lr}
 8005552:	4d06      	ldr	r5, [pc, #24]	; (800556c <_sbrk_r+0x1c>)
 8005554:	2300      	movs	r3, #0
 8005556:	4604      	mov	r4, r0
 8005558:	4608      	mov	r0, r1
 800555a:	602b      	str	r3, [r5, #0]
 800555c:	f7fc f918 	bl	8001790 <_sbrk>
 8005560:	1c43      	adds	r3, r0, #1
 8005562:	d102      	bne.n	800556a <_sbrk_r+0x1a>
 8005564:	682b      	ldr	r3, [r5, #0]
 8005566:	b103      	cbz	r3, 800556a <_sbrk_r+0x1a>
 8005568:	6023      	str	r3, [r4, #0]
 800556a:	bd38      	pop	{r3, r4, r5, pc}
 800556c:	200001cc 	.word	0x200001cc

08005570 <_raise_r>:
 8005570:	291f      	cmp	r1, #31
 8005572:	b538      	push	{r3, r4, r5, lr}
 8005574:	4604      	mov	r4, r0
 8005576:	460d      	mov	r5, r1
 8005578:	d904      	bls.n	8005584 <_raise_r+0x14>
 800557a:	2316      	movs	r3, #22
 800557c:	6003      	str	r3, [r0, #0]
 800557e:	f04f 30ff 	mov.w	r0, #4294967295
 8005582:	bd38      	pop	{r3, r4, r5, pc}
 8005584:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005586:	b112      	cbz	r2, 800558e <_raise_r+0x1e>
 8005588:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800558c:	b94b      	cbnz	r3, 80055a2 <_raise_r+0x32>
 800558e:	4620      	mov	r0, r4
 8005590:	f000 f830 	bl	80055f4 <_getpid_r>
 8005594:	462a      	mov	r2, r5
 8005596:	4601      	mov	r1, r0
 8005598:	4620      	mov	r0, r4
 800559a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800559e:	f000 b817 	b.w	80055d0 <_kill_r>
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d00a      	beq.n	80055bc <_raise_r+0x4c>
 80055a6:	1c59      	adds	r1, r3, #1
 80055a8:	d103      	bne.n	80055b2 <_raise_r+0x42>
 80055aa:	2316      	movs	r3, #22
 80055ac:	6003      	str	r3, [r0, #0]
 80055ae:	2001      	movs	r0, #1
 80055b0:	e7e7      	b.n	8005582 <_raise_r+0x12>
 80055b2:	2400      	movs	r4, #0
 80055b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80055b8:	4628      	mov	r0, r5
 80055ba:	4798      	blx	r3
 80055bc:	2000      	movs	r0, #0
 80055be:	e7e0      	b.n	8005582 <_raise_r+0x12>

080055c0 <raise>:
 80055c0:	4b02      	ldr	r3, [pc, #8]	; (80055cc <raise+0xc>)
 80055c2:	4601      	mov	r1, r0
 80055c4:	6818      	ldr	r0, [r3, #0]
 80055c6:	f7ff bfd3 	b.w	8005570 <_raise_r>
 80055ca:	bf00      	nop
 80055cc:	2000000c 	.word	0x2000000c

080055d0 <_kill_r>:
 80055d0:	b538      	push	{r3, r4, r5, lr}
 80055d2:	4d07      	ldr	r5, [pc, #28]	; (80055f0 <_kill_r+0x20>)
 80055d4:	2300      	movs	r3, #0
 80055d6:	4604      	mov	r4, r0
 80055d8:	4608      	mov	r0, r1
 80055da:	4611      	mov	r1, r2
 80055dc:	602b      	str	r3, [r5, #0]
 80055de:	f7fc f889 	bl	80016f4 <_kill>
 80055e2:	1c43      	adds	r3, r0, #1
 80055e4:	d102      	bne.n	80055ec <_kill_r+0x1c>
 80055e6:	682b      	ldr	r3, [r5, #0]
 80055e8:	b103      	cbz	r3, 80055ec <_kill_r+0x1c>
 80055ea:	6023      	str	r3, [r4, #0]
 80055ec:	bd38      	pop	{r3, r4, r5, pc}
 80055ee:	bf00      	nop
 80055f0:	200001cc 	.word	0x200001cc

080055f4 <_getpid_r>:
 80055f4:	f7fc b876 	b.w	80016e4 <_getpid>

080055f8 <__sread>:
 80055f8:	b510      	push	{r4, lr}
 80055fa:	460c      	mov	r4, r1
 80055fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005600:	f000 fc90 	bl	8005f24 <_read_r>
 8005604:	2800      	cmp	r0, #0
 8005606:	bfab      	itete	ge
 8005608:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800560a:	89a3      	ldrhlt	r3, [r4, #12]
 800560c:	181b      	addge	r3, r3, r0
 800560e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005612:	bfac      	ite	ge
 8005614:	6563      	strge	r3, [r4, #84]	; 0x54
 8005616:	81a3      	strhlt	r3, [r4, #12]
 8005618:	bd10      	pop	{r4, pc}

0800561a <__swrite>:
 800561a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800561e:	461f      	mov	r7, r3
 8005620:	898b      	ldrh	r3, [r1, #12]
 8005622:	05db      	lsls	r3, r3, #23
 8005624:	4605      	mov	r5, r0
 8005626:	460c      	mov	r4, r1
 8005628:	4616      	mov	r6, r2
 800562a:	d505      	bpl.n	8005638 <__swrite+0x1e>
 800562c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005630:	2302      	movs	r3, #2
 8005632:	2200      	movs	r2, #0
 8005634:	f000 f906 	bl	8005844 <_lseek_r>
 8005638:	89a3      	ldrh	r3, [r4, #12]
 800563a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800563e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005642:	81a3      	strh	r3, [r4, #12]
 8005644:	4632      	mov	r2, r6
 8005646:	463b      	mov	r3, r7
 8005648:	4628      	mov	r0, r5
 800564a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800564e:	f000 b869 	b.w	8005724 <_write_r>

08005652 <__sseek>:
 8005652:	b510      	push	{r4, lr}
 8005654:	460c      	mov	r4, r1
 8005656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800565a:	f000 f8f3 	bl	8005844 <_lseek_r>
 800565e:	1c43      	adds	r3, r0, #1
 8005660:	89a3      	ldrh	r3, [r4, #12]
 8005662:	bf15      	itete	ne
 8005664:	6560      	strne	r0, [r4, #84]	; 0x54
 8005666:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800566a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800566e:	81a3      	strheq	r3, [r4, #12]
 8005670:	bf18      	it	ne
 8005672:	81a3      	strhne	r3, [r4, #12]
 8005674:	bd10      	pop	{r4, pc}

08005676 <__sclose>:
 8005676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800567a:	f000 b8d3 	b.w	8005824 <_close_r>
	...

08005680 <__swbuf_r>:
 8005680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005682:	460e      	mov	r6, r1
 8005684:	4614      	mov	r4, r2
 8005686:	4605      	mov	r5, r0
 8005688:	b118      	cbz	r0, 8005692 <__swbuf_r+0x12>
 800568a:	6983      	ldr	r3, [r0, #24]
 800568c:	b90b      	cbnz	r3, 8005692 <__swbuf_r+0x12>
 800568e:	f7ff fd21 	bl	80050d4 <__sinit>
 8005692:	4b21      	ldr	r3, [pc, #132]	; (8005718 <__swbuf_r+0x98>)
 8005694:	429c      	cmp	r4, r3
 8005696:	d12b      	bne.n	80056f0 <__swbuf_r+0x70>
 8005698:	686c      	ldr	r4, [r5, #4]
 800569a:	69a3      	ldr	r3, [r4, #24]
 800569c:	60a3      	str	r3, [r4, #8]
 800569e:	89a3      	ldrh	r3, [r4, #12]
 80056a0:	071a      	lsls	r2, r3, #28
 80056a2:	d52f      	bpl.n	8005704 <__swbuf_r+0x84>
 80056a4:	6923      	ldr	r3, [r4, #16]
 80056a6:	b36b      	cbz	r3, 8005704 <__swbuf_r+0x84>
 80056a8:	6923      	ldr	r3, [r4, #16]
 80056aa:	6820      	ldr	r0, [r4, #0]
 80056ac:	1ac0      	subs	r0, r0, r3
 80056ae:	6963      	ldr	r3, [r4, #20]
 80056b0:	b2f6      	uxtb	r6, r6
 80056b2:	4283      	cmp	r3, r0
 80056b4:	4637      	mov	r7, r6
 80056b6:	dc04      	bgt.n	80056c2 <__swbuf_r+0x42>
 80056b8:	4621      	mov	r1, r4
 80056ba:	4628      	mov	r0, r5
 80056bc:	f7ff fc64 	bl	8004f88 <_fflush_r>
 80056c0:	bb30      	cbnz	r0, 8005710 <__swbuf_r+0x90>
 80056c2:	68a3      	ldr	r3, [r4, #8]
 80056c4:	3b01      	subs	r3, #1
 80056c6:	60a3      	str	r3, [r4, #8]
 80056c8:	6823      	ldr	r3, [r4, #0]
 80056ca:	1c5a      	adds	r2, r3, #1
 80056cc:	6022      	str	r2, [r4, #0]
 80056ce:	701e      	strb	r6, [r3, #0]
 80056d0:	6963      	ldr	r3, [r4, #20]
 80056d2:	3001      	adds	r0, #1
 80056d4:	4283      	cmp	r3, r0
 80056d6:	d004      	beq.n	80056e2 <__swbuf_r+0x62>
 80056d8:	89a3      	ldrh	r3, [r4, #12]
 80056da:	07db      	lsls	r3, r3, #31
 80056dc:	d506      	bpl.n	80056ec <__swbuf_r+0x6c>
 80056de:	2e0a      	cmp	r6, #10
 80056e0:	d104      	bne.n	80056ec <__swbuf_r+0x6c>
 80056e2:	4621      	mov	r1, r4
 80056e4:	4628      	mov	r0, r5
 80056e6:	f7ff fc4f 	bl	8004f88 <_fflush_r>
 80056ea:	b988      	cbnz	r0, 8005710 <__swbuf_r+0x90>
 80056ec:	4638      	mov	r0, r7
 80056ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056f0:	4b0a      	ldr	r3, [pc, #40]	; (800571c <__swbuf_r+0x9c>)
 80056f2:	429c      	cmp	r4, r3
 80056f4:	d101      	bne.n	80056fa <__swbuf_r+0x7a>
 80056f6:	68ac      	ldr	r4, [r5, #8]
 80056f8:	e7cf      	b.n	800569a <__swbuf_r+0x1a>
 80056fa:	4b09      	ldr	r3, [pc, #36]	; (8005720 <__swbuf_r+0xa0>)
 80056fc:	429c      	cmp	r4, r3
 80056fe:	bf08      	it	eq
 8005700:	68ec      	ldreq	r4, [r5, #12]
 8005702:	e7ca      	b.n	800569a <__swbuf_r+0x1a>
 8005704:	4621      	mov	r1, r4
 8005706:	4628      	mov	r0, r5
 8005708:	f000 f81e 	bl	8005748 <__swsetup_r>
 800570c:	2800      	cmp	r0, #0
 800570e:	d0cb      	beq.n	80056a8 <__swbuf_r+0x28>
 8005710:	f04f 37ff 	mov.w	r7, #4294967295
 8005714:	e7ea      	b.n	80056ec <__swbuf_r+0x6c>
 8005716:	bf00      	nop
 8005718:	08006320 	.word	0x08006320
 800571c:	08006340 	.word	0x08006340
 8005720:	08006300 	.word	0x08006300

08005724 <_write_r>:
 8005724:	b538      	push	{r3, r4, r5, lr}
 8005726:	4d07      	ldr	r5, [pc, #28]	; (8005744 <_write_r+0x20>)
 8005728:	4604      	mov	r4, r0
 800572a:	4608      	mov	r0, r1
 800572c:	4611      	mov	r1, r2
 800572e:	2200      	movs	r2, #0
 8005730:	602a      	str	r2, [r5, #0]
 8005732:	461a      	mov	r2, r3
 8005734:	f7fa fe68 	bl	8000408 <_write>
 8005738:	1c43      	adds	r3, r0, #1
 800573a:	d102      	bne.n	8005742 <_write_r+0x1e>
 800573c:	682b      	ldr	r3, [r5, #0]
 800573e:	b103      	cbz	r3, 8005742 <_write_r+0x1e>
 8005740:	6023      	str	r3, [r4, #0]
 8005742:	bd38      	pop	{r3, r4, r5, pc}
 8005744:	200001cc 	.word	0x200001cc

08005748 <__swsetup_r>:
 8005748:	4b32      	ldr	r3, [pc, #200]	; (8005814 <__swsetup_r+0xcc>)
 800574a:	b570      	push	{r4, r5, r6, lr}
 800574c:	681d      	ldr	r5, [r3, #0]
 800574e:	4606      	mov	r6, r0
 8005750:	460c      	mov	r4, r1
 8005752:	b125      	cbz	r5, 800575e <__swsetup_r+0x16>
 8005754:	69ab      	ldr	r3, [r5, #24]
 8005756:	b913      	cbnz	r3, 800575e <__swsetup_r+0x16>
 8005758:	4628      	mov	r0, r5
 800575a:	f7ff fcbb 	bl	80050d4 <__sinit>
 800575e:	4b2e      	ldr	r3, [pc, #184]	; (8005818 <__swsetup_r+0xd0>)
 8005760:	429c      	cmp	r4, r3
 8005762:	d10f      	bne.n	8005784 <__swsetup_r+0x3c>
 8005764:	686c      	ldr	r4, [r5, #4]
 8005766:	89a3      	ldrh	r3, [r4, #12]
 8005768:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800576c:	0719      	lsls	r1, r3, #28
 800576e:	d42c      	bmi.n	80057ca <__swsetup_r+0x82>
 8005770:	06dd      	lsls	r5, r3, #27
 8005772:	d411      	bmi.n	8005798 <__swsetup_r+0x50>
 8005774:	2309      	movs	r3, #9
 8005776:	6033      	str	r3, [r6, #0]
 8005778:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800577c:	81a3      	strh	r3, [r4, #12]
 800577e:	f04f 30ff 	mov.w	r0, #4294967295
 8005782:	e03e      	b.n	8005802 <__swsetup_r+0xba>
 8005784:	4b25      	ldr	r3, [pc, #148]	; (800581c <__swsetup_r+0xd4>)
 8005786:	429c      	cmp	r4, r3
 8005788:	d101      	bne.n	800578e <__swsetup_r+0x46>
 800578a:	68ac      	ldr	r4, [r5, #8]
 800578c:	e7eb      	b.n	8005766 <__swsetup_r+0x1e>
 800578e:	4b24      	ldr	r3, [pc, #144]	; (8005820 <__swsetup_r+0xd8>)
 8005790:	429c      	cmp	r4, r3
 8005792:	bf08      	it	eq
 8005794:	68ec      	ldreq	r4, [r5, #12]
 8005796:	e7e6      	b.n	8005766 <__swsetup_r+0x1e>
 8005798:	0758      	lsls	r0, r3, #29
 800579a:	d512      	bpl.n	80057c2 <__swsetup_r+0x7a>
 800579c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800579e:	b141      	cbz	r1, 80057b2 <__swsetup_r+0x6a>
 80057a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057a4:	4299      	cmp	r1, r3
 80057a6:	d002      	beq.n	80057ae <__swsetup_r+0x66>
 80057a8:	4630      	mov	r0, r6
 80057aa:	f7ff fd99 	bl	80052e0 <_free_r>
 80057ae:	2300      	movs	r3, #0
 80057b0:	6363      	str	r3, [r4, #52]	; 0x34
 80057b2:	89a3      	ldrh	r3, [r4, #12]
 80057b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80057b8:	81a3      	strh	r3, [r4, #12]
 80057ba:	2300      	movs	r3, #0
 80057bc:	6063      	str	r3, [r4, #4]
 80057be:	6923      	ldr	r3, [r4, #16]
 80057c0:	6023      	str	r3, [r4, #0]
 80057c2:	89a3      	ldrh	r3, [r4, #12]
 80057c4:	f043 0308 	orr.w	r3, r3, #8
 80057c8:	81a3      	strh	r3, [r4, #12]
 80057ca:	6923      	ldr	r3, [r4, #16]
 80057cc:	b94b      	cbnz	r3, 80057e2 <__swsetup_r+0x9a>
 80057ce:	89a3      	ldrh	r3, [r4, #12]
 80057d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80057d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057d8:	d003      	beq.n	80057e2 <__swsetup_r+0x9a>
 80057da:	4621      	mov	r1, r4
 80057dc:	4630      	mov	r0, r6
 80057de:	f000 f867 	bl	80058b0 <__smakebuf_r>
 80057e2:	89a0      	ldrh	r0, [r4, #12]
 80057e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057e8:	f010 0301 	ands.w	r3, r0, #1
 80057ec:	d00a      	beq.n	8005804 <__swsetup_r+0xbc>
 80057ee:	2300      	movs	r3, #0
 80057f0:	60a3      	str	r3, [r4, #8]
 80057f2:	6963      	ldr	r3, [r4, #20]
 80057f4:	425b      	negs	r3, r3
 80057f6:	61a3      	str	r3, [r4, #24]
 80057f8:	6923      	ldr	r3, [r4, #16]
 80057fa:	b943      	cbnz	r3, 800580e <__swsetup_r+0xc6>
 80057fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005800:	d1ba      	bne.n	8005778 <__swsetup_r+0x30>
 8005802:	bd70      	pop	{r4, r5, r6, pc}
 8005804:	0781      	lsls	r1, r0, #30
 8005806:	bf58      	it	pl
 8005808:	6963      	ldrpl	r3, [r4, #20]
 800580a:	60a3      	str	r3, [r4, #8]
 800580c:	e7f4      	b.n	80057f8 <__swsetup_r+0xb0>
 800580e:	2000      	movs	r0, #0
 8005810:	e7f7      	b.n	8005802 <__swsetup_r+0xba>
 8005812:	bf00      	nop
 8005814:	2000000c 	.word	0x2000000c
 8005818:	08006320 	.word	0x08006320
 800581c:	08006340 	.word	0x08006340
 8005820:	08006300 	.word	0x08006300

08005824 <_close_r>:
 8005824:	b538      	push	{r3, r4, r5, lr}
 8005826:	4d06      	ldr	r5, [pc, #24]	; (8005840 <_close_r+0x1c>)
 8005828:	2300      	movs	r3, #0
 800582a:	4604      	mov	r4, r0
 800582c:	4608      	mov	r0, r1
 800582e:	602b      	str	r3, [r5, #0]
 8005830:	f7fb ff7a 	bl	8001728 <_close>
 8005834:	1c43      	adds	r3, r0, #1
 8005836:	d102      	bne.n	800583e <_close_r+0x1a>
 8005838:	682b      	ldr	r3, [r5, #0]
 800583a:	b103      	cbz	r3, 800583e <_close_r+0x1a>
 800583c:	6023      	str	r3, [r4, #0]
 800583e:	bd38      	pop	{r3, r4, r5, pc}
 8005840:	200001cc 	.word	0x200001cc

08005844 <_lseek_r>:
 8005844:	b538      	push	{r3, r4, r5, lr}
 8005846:	4d07      	ldr	r5, [pc, #28]	; (8005864 <_lseek_r+0x20>)
 8005848:	4604      	mov	r4, r0
 800584a:	4608      	mov	r0, r1
 800584c:	4611      	mov	r1, r2
 800584e:	2200      	movs	r2, #0
 8005850:	602a      	str	r2, [r5, #0]
 8005852:	461a      	mov	r2, r3
 8005854:	f7fb ff8f 	bl	8001776 <_lseek>
 8005858:	1c43      	adds	r3, r0, #1
 800585a:	d102      	bne.n	8005862 <_lseek_r+0x1e>
 800585c:	682b      	ldr	r3, [r5, #0]
 800585e:	b103      	cbz	r3, 8005862 <_lseek_r+0x1e>
 8005860:	6023      	str	r3, [r4, #0]
 8005862:	bd38      	pop	{r3, r4, r5, pc}
 8005864:	200001cc 	.word	0x200001cc

08005868 <__swhatbuf_r>:
 8005868:	b570      	push	{r4, r5, r6, lr}
 800586a:	460e      	mov	r6, r1
 800586c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005870:	2900      	cmp	r1, #0
 8005872:	b096      	sub	sp, #88	; 0x58
 8005874:	4614      	mov	r4, r2
 8005876:	461d      	mov	r5, r3
 8005878:	da07      	bge.n	800588a <__swhatbuf_r+0x22>
 800587a:	2300      	movs	r3, #0
 800587c:	602b      	str	r3, [r5, #0]
 800587e:	89b3      	ldrh	r3, [r6, #12]
 8005880:	061a      	lsls	r2, r3, #24
 8005882:	d410      	bmi.n	80058a6 <__swhatbuf_r+0x3e>
 8005884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005888:	e00e      	b.n	80058a8 <__swhatbuf_r+0x40>
 800588a:	466a      	mov	r2, sp
 800588c:	f000 fb5c 	bl	8005f48 <_fstat_r>
 8005890:	2800      	cmp	r0, #0
 8005892:	dbf2      	blt.n	800587a <__swhatbuf_r+0x12>
 8005894:	9a01      	ldr	r2, [sp, #4]
 8005896:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800589a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800589e:	425a      	negs	r2, r3
 80058a0:	415a      	adcs	r2, r3
 80058a2:	602a      	str	r2, [r5, #0]
 80058a4:	e7ee      	b.n	8005884 <__swhatbuf_r+0x1c>
 80058a6:	2340      	movs	r3, #64	; 0x40
 80058a8:	2000      	movs	r0, #0
 80058aa:	6023      	str	r3, [r4, #0]
 80058ac:	b016      	add	sp, #88	; 0x58
 80058ae:	bd70      	pop	{r4, r5, r6, pc}

080058b0 <__smakebuf_r>:
 80058b0:	898b      	ldrh	r3, [r1, #12]
 80058b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80058b4:	079d      	lsls	r5, r3, #30
 80058b6:	4606      	mov	r6, r0
 80058b8:	460c      	mov	r4, r1
 80058ba:	d507      	bpl.n	80058cc <__smakebuf_r+0x1c>
 80058bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80058c0:	6023      	str	r3, [r4, #0]
 80058c2:	6123      	str	r3, [r4, #16]
 80058c4:	2301      	movs	r3, #1
 80058c6:	6163      	str	r3, [r4, #20]
 80058c8:	b002      	add	sp, #8
 80058ca:	bd70      	pop	{r4, r5, r6, pc}
 80058cc:	ab01      	add	r3, sp, #4
 80058ce:	466a      	mov	r2, sp
 80058d0:	f7ff ffca 	bl	8005868 <__swhatbuf_r>
 80058d4:	9900      	ldr	r1, [sp, #0]
 80058d6:	4605      	mov	r5, r0
 80058d8:	4630      	mov	r0, r6
 80058da:	f7ff fd51 	bl	8005380 <_malloc_r>
 80058de:	b948      	cbnz	r0, 80058f4 <__smakebuf_r+0x44>
 80058e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058e4:	059a      	lsls	r2, r3, #22
 80058e6:	d4ef      	bmi.n	80058c8 <__smakebuf_r+0x18>
 80058e8:	f023 0303 	bic.w	r3, r3, #3
 80058ec:	f043 0302 	orr.w	r3, r3, #2
 80058f0:	81a3      	strh	r3, [r4, #12]
 80058f2:	e7e3      	b.n	80058bc <__smakebuf_r+0xc>
 80058f4:	4b0d      	ldr	r3, [pc, #52]	; (800592c <__smakebuf_r+0x7c>)
 80058f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80058f8:	89a3      	ldrh	r3, [r4, #12]
 80058fa:	6020      	str	r0, [r4, #0]
 80058fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005900:	81a3      	strh	r3, [r4, #12]
 8005902:	9b00      	ldr	r3, [sp, #0]
 8005904:	6163      	str	r3, [r4, #20]
 8005906:	9b01      	ldr	r3, [sp, #4]
 8005908:	6120      	str	r0, [r4, #16]
 800590a:	b15b      	cbz	r3, 8005924 <__smakebuf_r+0x74>
 800590c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005910:	4630      	mov	r0, r6
 8005912:	f000 fb2b 	bl	8005f6c <_isatty_r>
 8005916:	b128      	cbz	r0, 8005924 <__smakebuf_r+0x74>
 8005918:	89a3      	ldrh	r3, [r4, #12]
 800591a:	f023 0303 	bic.w	r3, r3, #3
 800591e:	f043 0301 	orr.w	r3, r3, #1
 8005922:	81a3      	strh	r3, [r4, #12]
 8005924:	89a0      	ldrh	r0, [r4, #12]
 8005926:	4305      	orrs	r5, r0
 8005928:	81a5      	strh	r5, [r4, #12]
 800592a:	e7cd      	b.n	80058c8 <__smakebuf_r+0x18>
 800592c:	0800506d 	.word	0x0800506d

08005930 <__malloc_lock>:
 8005930:	4801      	ldr	r0, [pc, #4]	; (8005938 <__malloc_lock+0x8>)
 8005932:	f7ff bc92 	b.w	800525a <__retarget_lock_acquire_recursive>
 8005936:	bf00      	nop
 8005938:	200001c4 	.word	0x200001c4

0800593c <__malloc_unlock>:
 800593c:	4801      	ldr	r0, [pc, #4]	; (8005944 <__malloc_unlock+0x8>)
 800593e:	f7ff bc8d 	b.w	800525c <__retarget_lock_release_recursive>
 8005942:	bf00      	nop
 8005944:	200001c4 	.word	0x200001c4

08005948 <__sfputc_r>:
 8005948:	6893      	ldr	r3, [r2, #8]
 800594a:	3b01      	subs	r3, #1
 800594c:	2b00      	cmp	r3, #0
 800594e:	b410      	push	{r4}
 8005950:	6093      	str	r3, [r2, #8]
 8005952:	da08      	bge.n	8005966 <__sfputc_r+0x1e>
 8005954:	6994      	ldr	r4, [r2, #24]
 8005956:	42a3      	cmp	r3, r4
 8005958:	db01      	blt.n	800595e <__sfputc_r+0x16>
 800595a:	290a      	cmp	r1, #10
 800595c:	d103      	bne.n	8005966 <__sfputc_r+0x1e>
 800595e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005962:	f7ff be8d 	b.w	8005680 <__swbuf_r>
 8005966:	6813      	ldr	r3, [r2, #0]
 8005968:	1c58      	adds	r0, r3, #1
 800596a:	6010      	str	r0, [r2, #0]
 800596c:	7019      	strb	r1, [r3, #0]
 800596e:	4608      	mov	r0, r1
 8005970:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005974:	4770      	bx	lr

08005976 <__sfputs_r>:
 8005976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005978:	4606      	mov	r6, r0
 800597a:	460f      	mov	r7, r1
 800597c:	4614      	mov	r4, r2
 800597e:	18d5      	adds	r5, r2, r3
 8005980:	42ac      	cmp	r4, r5
 8005982:	d101      	bne.n	8005988 <__sfputs_r+0x12>
 8005984:	2000      	movs	r0, #0
 8005986:	e007      	b.n	8005998 <__sfputs_r+0x22>
 8005988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800598c:	463a      	mov	r2, r7
 800598e:	4630      	mov	r0, r6
 8005990:	f7ff ffda 	bl	8005948 <__sfputc_r>
 8005994:	1c43      	adds	r3, r0, #1
 8005996:	d1f3      	bne.n	8005980 <__sfputs_r+0xa>
 8005998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800599c <_vfiprintf_r>:
 800599c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a0:	460d      	mov	r5, r1
 80059a2:	b09d      	sub	sp, #116	; 0x74
 80059a4:	4614      	mov	r4, r2
 80059a6:	4698      	mov	r8, r3
 80059a8:	4606      	mov	r6, r0
 80059aa:	b118      	cbz	r0, 80059b4 <_vfiprintf_r+0x18>
 80059ac:	6983      	ldr	r3, [r0, #24]
 80059ae:	b90b      	cbnz	r3, 80059b4 <_vfiprintf_r+0x18>
 80059b0:	f7ff fb90 	bl	80050d4 <__sinit>
 80059b4:	4b89      	ldr	r3, [pc, #548]	; (8005bdc <_vfiprintf_r+0x240>)
 80059b6:	429d      	cmp	r5, r3
 80059b8:	d11b      	bne.n	80059f2 <_vfiprintf_r+0x56>
 80059ba:	6875      	ldr	r5, [r6, #4]
 80059bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059be:	07d9      	lsls	r1, r3, #31
 80059c0:	d405      	bmi.n	80059ce <_vfiprintf_r+0x32>
 80059c2:	89ab      	ldrh	r3, [r5, #12]
 80059c4:	059a      	lsls	r2, r3, #22
 80059c6:	d402      	bmi.n	80059ce <_vfiprintf_r+0x32>
 80059c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059ca:	f7ff fc46 	bl	800525a <__retarget_lock_acquire_recursive>
 80059ce:	89ab      	ldrh	r3, [r5, #12]
 80059d0:	071b      	lsls	r3, r3, #28
 80059d2:	d501      	bpl.n	80059d8 <_vfiprintf_r+0x3c>
 80059d4:	692b      	ldr	r3, [r5, #16]
 80059d6:	b9eb      	cbnz	r3, 8005a14 <_vfiprintf_r+0x78>
 80059d8:	4629      	mov	r1, r5
 80059da:	4630      	mov	r0, r6
 80059dc:	f7ff feb4 	bl	8005748 <__swsetup_r>
 80059e0:	b1c0      	cbz	r0, 8005a14 <_vfiprintf_r+0x78>
 80059e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059e4:	07dc      	lsls	r4, r3, #31
 80059e6:	d50e      	bpl.n	8005a06 <_vfiprintf_r+0x6a>
 80059e8:	f04f 30ff 	mov.w	r0, #4294967295
 80059ec:	b01d      	add	sp, #116	; 0x74
 80059ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059f2:	4b7b      	ldr	r3, [pc, #492]	; (8005be0 <_vfiprintf_r+0x244>)
 80059f4:	429d      	cmp	r5, r3
 80059f6:	d101      	bne.n	80059fc <_vfiprintf_r+0x60>
 80059f8:	68b5      	ldr	r5, [r6, #8]
 80059fa:	e7df      	b.n	80059bc <_vfiprintf_r+0x20>
 80059fc:	4b79      	ldr	r3, [pc, #484]	; (8005be4 <_vfiprintf_r+0x248>)
 80059fe:	429d      	cmp	r5, r3
 8005a00:	bf08      	it	eq
 8005a02:	68f5      	ldreq	r5, [r6, #12]
 8005a04:	e7da      	b.n	80059bc <_vfiprintf_r+0x20>
 8005a06:	89ab      	ldrh	r3, [r5, #12]
 8005a08:	0598      	lsls	r0, r3, #22
 8005a0a:	d4ed      	bmi.n	80059e8 <_vfiprintf_r+0x4c>
 8005a0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a0e:	f7ff fc25 	bl	800525c <__retarget_lock_release_recursive>
 8005a12:	e7e9      	b.n	80059e8 <_vfiprintf_r+0x4c>
 8005a14:	2300      	movs	r3, #0
 8005a16:	9309      	str	r3, [sp, #36]	; 0x24
 8005a18:	2320      	movs	r3, #32
 8005a1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a22:	2330      	movs	r3, #48	; 0x30
 8005a24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005be8 <_vfiprintf_r+0x24c>
 8005a28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a2c:	f04f 0901 	mov.w	r9, #1
 8005a30:	4623      	mov	r3, r4
 8005a32:	469a      	mov	sl, r3
 8005a34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a38:	b10a      	cbz	r2, 8005a3e <_vfiprintf_r+0xa2>
 8005a3a:	2a25      	cmp	r2, #37	; 0x25
 8005a3c:	d1f9      	bne.n	8005a32 <_vfiprintf_r+0x96>
 8005a3e:	ebba 0b04 	subs.w	fp, sl, r4
 8005a42:	d00b      	beq.n	8005a5c <_vfiprintf_r+0xc0>
 8005a44:	465b      	mov	r3, fp
 8005a46:	4622      	mov	r2, r4
 8005a48:	4629      	mov	r1, r5
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	f7ff ff93 	bl	8005976 <__sfputs_r>
 8005a50:	3001      	adds	r0, #1
 8005a52:	f000 80aa 	beq.w	8005baa <_vfiprintf_r+0x20e>
 8005a56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a58:	445a      	add	r2, fp
 8005a5a:	9209      	str	r2, [sp, #36]	; 0x24
 8005a5c:	f89a 3000 	ldrb.w	r3, [sl]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 80a2 	beq.w	8005baa <_vfiprintf_r+0x20e>
 8005a66:	2300      	movs	r3, #0
 8005a68:	f04f 32ff 	mov.w	r2, #4294967295
 8005a6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a70:	f10a 0a01 	add.w	sl, sl, #1
 8005a74:	9304      	str	r3, [sp, #16]
 8005a76:	9307      	str	r3, [sp, #28]
 8005a78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a7c:	931a      	str	r3, [sp, #104]	; 0x68
 8005a7e:	4654      	mov	r4, sl
 8005a80:	2205      	movs	r2, #5
 8005a82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a86:	4858      	ldr	r0, [pc, #352]	; (8005be8 <_vfiprintf_r+0x24c>)
 8005a88:	f7fa fbb2 	bl	80001f0 <memchr>
 8005a8c:	9a04      	ldr	r2, [sp, #16]
 8005a8e:	b9d8      	cbnz	r0, 8005ac8 <_vfiprintf_r+0x12c>
 8005a90:	06d1      	lsls	r1, r2, #27
 8005a92:	bf44      	itt	mi
 8005a94:	2320      	movmi	r3, #32
 8005a96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a9a:	0713      	lsls	r3, r2, #28
 8005a9c:	bf44      	itt	mi
 8005a9e:	232b      	movmi	r3, #43	; 0x2b
 8005aa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005aa4:	f89a 3000 	ldrb.w	r3, [sl]
 8005aa8:	2b2a      	cmp	r3, #42	; 0x2a
 8005aaa:	d015      	beq.n	8005ad8 <_vfiprintf_r+0x13c>
 8005aac:	9a07      	ldr	r2, [sp, #28]
 8005aae:	4654      	mov	r4, sl
 8005ab0:	2000      	movs	r0, #0
 8005ab2:	f04f 0c0a 	mov.w	ip, #10
 8005ab6:	4621      	mov	r1, r4
 8005ab8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005abc:	3b30      	subs	r3, #48	; 0x30
 8005abe:	2b09      	cmp	r3, #9
 8005ac0:	d94e      	bls.n	8005b60 <_vfiprintf_r+0x1c4>
 8005ac2:	b1b0      	cbz	r0, 8005af2 <_vfiprintf_r+0x156>
 8005ac4:	9207      	str	r2, [sp, #28]
 8005ac6:	e014      	b.n	8005af2 <_vfiprintf_r+0x156>
 8005ac8:	eba0 0308 	sub.w	r3, r0, r8
 8005acc:	fa09 f303 	lsl.w	r3, r9, r3
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	9304      	str	r3, [sp, #16]
 8005ad4:	46a2      	mov	sl, r4
 8005ad6:	e7d2      	b.n	8005a7e <_vfiprintf_r+0xe2>
 8005ad8:	9b03      	ldr	r3, [sp, #12]
 8005ada:	1d19      	adds	r1, r3, #4
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	9103      	str	r1, [sp, #12]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	bfbb      	ittet	lt
 8005ae4:	425b      	neglt	r3, r3
 8005ae6:	f042 0202 	orrlt.w	r2, r2, #2
 8005aea:	9307      	strge	r3, [sp, #28]
 8005aec:	9307      	strlt	r3, [sp, #28]
 8005aee:	bfb8      	it	lt
 8005af0:	9204      	strlt	r2, [sp, #16]
 8005af2:	7823      	ldrb	r3, [r4, #0]
 8005af4:	2b2e      	cmp	r3, #46	; 0x2e
 8005af6:	d10c      	bne.n	8005b12 <_vfiprintf_r+0x176>
 8005af8:	7863      	ldrb	r3, [r4, #1]
 8005afa:	2b2a      	cmp	r3, #42	; 0x2a
 8005afc:	d135      	bne.n	8005b6a <_vfiprintf_r+0x1ce>
 8005afe:	9b03      	ldr	r3, [sp, #12]
 8005b00:	1d1a      	adds	r2, r3, #4
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	9203      	str	r2, [sp, #12]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	bfb8      	it	lt
 8005b0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b0e:	3402      	adds	r4, #2
 8005b10:	9305      	str	r3, [sp, #20]
 8005b12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005bf8 <_vfiprintf_r+0x25c>
 8005b16:	7821      	ldrb	r1, [r4, #0]
 8005b18:	2203      	movs	r2, #3
 8005b1a:	4650      	mov	r0, sl
 8005b1c:	f7fa fb68 	bl	80001f0 <memchr>
 8005b20:	b140      	cbz	r0, 8005b34 <_vfiprintf_r+0x198>
 8005b22:	2340      	movs	r3, #64	; 0x40
 8005b24:	eba0 000a 	sub.w	r0, r0, sl
 8005b28:	fa03 f000 	lsl.w	r0, r3, r0
 8005b2c:	9b04      	ldr	r3, [sp, #16]
 8005b2e:	4303      	orrs	r3, r0
 8005b30:	3401      	adds	r4, #1
 8005b32:	9304      	str	r3, [sp, #16]
 8005b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b38:	482c      	ldr	r0, [pc, #176]	; (8005bec <_vfiprintf_r+0x250>)
 8005b3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b3e:	2206      	movs	r2, #6
 8005b40:	f7fa fb56 	bl	80001f0 <memchr>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	d03f      	beq.n	8005bc8 <_vfiprintf_r+0x22c>
 8005b48:	4b29      	ldr	r3, [pc, #164]	; (8005bf0 <_vfiprintf_r+0x254>)
 8005b4a:	bb1b      	cbnz	r3, 8005b94 <_vfiprintf_r+0x1f8>
 8005b4c:	9b03      	ldr	r3, [sp, #12]
 8005b4e:	3307      	adds	r3, #7
 8005b50:	f023 0307 	bic.w	r3, r3, #7
 8005b54:	3308      	adds	r3, #8
 8005b56:	9303      	str	r3, [sp, #12]
 8005b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b5a:	443b      	add	r3, r7
 8005b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8005b5e:	e767      	b.n	8005a30 <_vfiprintf_r+0x94>
 8005b60:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b64:	460c      	mov	r4, r1
 8005b66:	2001      	movs	r0, #1
 8005b68:	e7a5      	b.n	8005ab6 <_vfiprintf_r+0x11a>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	3401      	adds	r4, #1
 8005b6e:	9305      	str	r3, [sp, #20]
 8005b70:	4619      	mov	r1, r3
 8005b72:	f04f 0c0a 	mov.w	ip, #10
 8005b76:	4620      	mov	r0, r4
 8005b78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b7c:	3a30      	subs	r2, #48	; 0x30
 8005b7e:	2a09      	cmp	r2, #9
 8005b80:	d903      	bls.n	8005b8a <_vfiprintf_r+0x1ee>
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0c5      	beq.n	8005b12 <_vfiprintf_r+0x176>
 8005b86:	9105      	str	r1, [sp, #20]
 8005b88:	e7c3      	b.n	8005b12 <_vfiprintf_r+0x176>
 8005b8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b8e:	4604      	mov	r4, r0
 8005b90:	2301      	movs	r3, #1
 8005b92:	e7f0      	b.n	8005b76 <_vfiprintf_r+0x1da>
 8005b94:	ab03      	add	r3, sp, #12
 8005b96:	9300      	str	r3, [sp, #0]
 8005b98:	462a      	mov	r2, r5
 8005b9a:	4b16      	ldr	r3, [pc, #88]	; (8005bf4 <_vfiprintf_r+0x258>)
 8005b9c:	a904      	add	r1, sp, #16
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	f3af 8000 	nop.w
 8005ba4:	4607      	mov	r7, r0
 8005ba6:	1c78      	adds	r0, r7, #1
 8005ba8:	d1d6      	bne.n	8005b58 <_vfiprintf_r+0x1bc>
 8005baa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bac:	07d9      	lsls	r1, r3, #31
 8005bae:	d405      	bmi.n	8005bbc <_vfiprintf_r+0x220>
 8005bb0:	89ab      	ldrh	r3, [r5, #12]
 8005bb2:	059a      	lsls	r2, r3, #22
 8005bb4:	d402      	bmi.n	8005bbc <_vfiprintf_r+0x220>
 8005bb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bb8:	f7ff fb50 	bl	800525c <__retarget_lock_release_recursive>
 8005bbc:	89ab      	ldrh	r3, [r5, #12]
 8005bbe:	065b      	lsls	r3, r3, #25
 8005bc0:	f53f af12 	bmi.w	80059e8 <_vfiprintf_r+0x4c>
 8005bc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bc6:	e711      	b.n	80059ec <_vfiprintf_r+0x50>
 8005bc8:	ab03      	add	r3, sp, #12
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	462a      	mov	r2, r5
 8005bce:	4b09      	ldr	r3, [pc, #36]	; (8005bf4 <_vfiprintf_r+0x258>)
 8005bd0:	a904      	add	r1, sp, #16
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	f000 f880 	bl	8005cd8 <_printf_i>
 8005bd8:	e7e4      	b.n	8005ba4 <_vfiprintf_r+0x208>
 8005bda:	bf00      	nop
 8005bdc:	08006320 	.word	0x08006320
 8005be0:	08006340 	.word	0x08006340
 8005be4:	08006300 	.word	0x08006300
 8005be8:	08006364 	.word	0x08006364
 8005bec:	0800636e 	.word	0x0800636e
 8005bf0:	00000000 	.word	0x00000000
 8005bf4:	08005977 	.word	0x08005977
 8005bf8:	0800636a 	.word	0x0800636a

08005bfc <_printf_common>:
 8005bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c00:	4616      	mov	r6, r2
 8005c02:	4699      	mov	r9, r3
 8005c04:	688a      	ldr	r2, [r1, #8]
 8005c06:	690b      	ldr	r3, [r1, #16]
 8005c08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	bfb8      	it	lt
 8005c10:	4613      	movlt	r3, r2
 8005c12:	6033      	str	r3, [r6, #0]
 8005c14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c18:	4607      	mov	r7, r0
 8005c1a:	460c      	mov	r4, r1
 8005c1c:	b10a      	cbz	r2, 8005c22 <_printf_common+0x26>
 8005c1e:	3301      	adds	r3, #1
 8005c20:	6033      	str	r3, [r6, #0]
 8005c22:	6823      	ldr	r3, [r4, #0]
 8005c24:	0699      	lsls	r1, r3, #26
 8005c26:	bf42      	ittt	mi
 8005c28:	6833      	ldrmi	r3, [r6, #0]
 8005c2a:	3302      	addmi	r3, #2
 8005c2c:	6033      	strmi	r3, [r6, #0]
 8005c2e:	6825      	ldr	r5, [r4, #0]
 8005c30:	f015 0506 	ands.w	r5, r5, #6
 8005c34:	d106      	bne.n	8005c44 <_printf_common+0x48>
 8005c36:	f104 0a19 	add.w	sl, r4, #25
 8005c3a:	68e3      	ldr	r3, [r4, #12]
 8005c3c:	6832      	ldr	r2, [r6, #0]
 8005c3e:	1a9b      	subs	r3, r3, r2
 8005c40:	42ab      	cmp	r3, r5
 8005c42:	dc26      	bgt.n	8005c92 <_printf_common+0x96>
 8005c44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c48:	1e13      	subs	r3, r2, #0
 8005c4a:	6822      	ldr	r2, [r4, #0]
 8005c4c:	bf18      	it	ne
 8005c4e:	2301      	movne	r3, #1
 8005c50:	0692      	lsls	r2, r2, #26
 8005c52:	d42b      	bmi.n	8005cac <_printf_common+0xb0>
 8005c54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c58:	4649      	mov	r1, r9
 8005c5a:	4638      	mov	r0, r7
 8005c5c:	47c0      	blx	r8
 8005c5e:	3001      	adds	r0, #1
 8005c60:	d01e      	beq.n	8005ca0 <_printf_common+0xa4>
 8005c62:	6823      	ldr	r3, [r4, #0]
 8005c64:	68e5      	ldr	r5, [r4, #12]
 8005c66:	6832      	ldr	r2, [r6, #0]
 8005c68:	f003 0306 	and.w	r3, r3, #6
 8005c6c:	2b04      	cmp	r3, #4
 8005c6e:	bf08      	it	eq
 8005c70:	1aad      	subeq	r5, r5, r2
 8005c72:	68a3      	ldr	r3, [r4, #8]
 8005c74:	6922      	ldr	r2, [r4, #16]
 8005c76:	bf0c      	ite	eq
 8005c78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c7c:	2500      	movne	r5, #0
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	bfc4      	itt	gt
 8005c82:	1a9b      	subgt	r3, r3, r2
 8005c84:	18ed      	addgt	r5, r5, r3
 8005c86:	2600      	movs	r6, #0
 8005c88:	341a      	adds	r4, #26
 8005c8a:	42b5      	cmp	r5, r6
 8005c8c:	d11a      	bne.n	8005cc4 <_printf_common+0xc8>
 8005c8e:	2000      	movs	r0, #0
 8005c90:	e008      	b.n	8005ca4 <_printf_common+0xa8>
 8005c92:	2301      	movs	r3, #1
 8005c94:	4652      	mov	r2, sl
 8005c96:	4649      	mov	r1, r9
 8005c98:	4638      	mov	r0, r7
 8005c9a:	47c0      	blx	r8
 8005c9c:	3001      	adds	r0, #1
 8005c9e:	d103      	bne.n	8005ca8 <_printf_common+0xac>
 8005ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ca8:	3501      	adds	r5, #1
 8005caa:	e7c6      	b.n	8005c3a <_printf_common+0x3e>
 8005cac:	18e1      	adds	r1, r4, r3
 8005cae:	1c5a      	adds	r2, r3, #1
 8005cb0:	2030      	movs	r0, #48	; 0x30
 8005cb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cb6:	4422      	add	r2, r4
 8005cb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cc0:	3302      	adds	r3, #2
 8005cc2:	e7c7      	b.n	8005c54 <_printf_common+0x58>
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	4622      	mov	r2, r4
 8005cc8:	4649      	mov	r1, r9
 8005cca:	4638      	mov	r0, r7
 8005ccc:	47c0      	blx	r8
 8005cce:	3001      	adds	r0, #1
 8005cd0:	d0e6      	beq.n	8005ca0 <_printf_common+0xa4>
 8005cd2:	3601      	adds	r6, #1
 8005cd4:	e7d9      	b.n	8005c8a <_printf_common+0x8e>
	...

08005cd8 <_printf_i>:
 8005cd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cdc:	460c      	mov	r4, r1
 8005cde:	4691      	mov	r9, r2
 8005ce0:	7e27      	ldrb	r7, [r4, #24]
 8005ce2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005ce4:	2f78      	cmp	r7, #120	; 0x78
 8005ce6:	4680      	mov	r8, r0
 8005ce8:	469a      	mov	sl, r3
 8005cea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cee:	d807      	bhi.n	8005d00 <_printf_i+0x28>
 8005cf0:	2f62      	cmp	r7, #98	; 0x62
 8005cf2:	d80a      	bhi.n	8005d0a <_printf_i+0x32>
 8005cf4:	2f00      	cmp	r7, #0
 8005cf6:	f000 80d8 	beq.w	8005eaa <_printf_i+0x1d2>
 8005cfa:	2f58      	cmp	r7, #88	; 0x58
 8005cfc:	f000 80a3 	beq.w	8005e46 <_printf_i+0x16e>
 8005d00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d08:	e03a      	b.n	8005d80 <_printf_i+0xa8>
 8005d0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d0e:	2b15      	cmp	r3, #21
 8005d10:	d8f6      	bhi.n	8005d00 <_printf_i+0x28>
 8005d12:	a001      	add	r0, pc, #4	; (adr r0, 8005d18 <_printf_i+0x40>)
 8005d14:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005d18:	08005d71 	.word	0x08005d71
 8005d1c:	08005d85 	.word	0x08005d85
 8005d20:	08005d01 	.word	0x08005d01
 8005d24:	08005d01 	.word	0x08005d01
 8005d28:	08005d01 	.word	0x08005d01
 8005d2c:	08005d01 	.word	0x08005d01
 8005d30:	08005d85 	.word	0x08005d85
 8005d34:	08005d01 	.word	0x08005d01
 8005d38:	08005d01 	.word	0x08005d01
 8005d3c:	08005d01 	.word	0x08005d01
 8005d40:	08005d01 	.word	0x08005d01
 8005d44:	08005e91 	.word	0x08005e91
 8005d48:	08005db5 	.word	0x08005db5
 8005d4c:	08005e73 	.word	0x08005e73
 8005d50:	08005d01 	.word	0x08005d01
 8005d54:	08005d01 	.word	0x08005d01
 8005d58:	08005eb3 	.word	0x08005eb3
 8005d5c:	08005d01 	.word	0x08005d01
 8005d60:	08005db5 	.word	0x08005db5
 8005d64:	08005d01 	.word	0x08005d01
 8005d68:	08005d01 	.word	0x08005d01
 8005d6c:	08005e7b 	.word	0x08005e7b
 8005d70:	680b      	ldr	r3, [r1, #0]
 8005d72:	1d1a      	adds	r2, r3, #4
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	600a      	str	r2, [r1, #0]
 8005d78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d80:	2301      	movs	r3, #1
 8005d82:	e0a3      	b.n	8005ecc <_printf_i+0x1f4>
 8005d84:	6825      	ldr	r5, [r4, #0]
 8005d86:	6808      	ldr	r0, [r1, #0]
 8005d88:	062e      	lsls	r6, r5, #24
 8005d8a:	f100 0304 	add.w	r3, r0, #4
 8005d8e:	d50a      	bpl.n	8005da6 <_printf_i+0xce>
 8005d90:	6805      	ldr	r5, [r0, #0]
 8005d92:	600b      	str	r3, [r1, #0]
 8005d94:	2d00      	cmp	r5, #0
 8005d96:	da03      	bge.n	8005da0 <_printf_i+0xc8>
 8005d98:	232d      	movs	r3, #45	; 0x2d
 8005d9a:	426d      	negs	r5, r5
 8005d9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005da0:	485e      	ldr	r0, [pc, #376]	; (8005f1c <_printf_i+0x244>)
 8005da2:	230a      	movs	r3, #10
 8005da4:	e019      	b.n	8005dda <_printf_i+0x102>
 8005da6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005daa:	6805      	ldr	r5, [r0, #0]
 8005dac:	600b      	str	r3, [r1, #0]
 8005dae:	bf18      	it	ne
 8005db0:	b22d      	sxthne	r5, r5
 8005db2:	e7ef      	b.n	8005d94 <_printf_i+0xbc>
 8005db4:	680b      	ldr	r3, [r1, #0]
 8005db6:	6825      	ldr	r5, [r4, #0]
 8005db8:	1d18      	adds	r0, r3, #4
 8005dba:	6008      	str	r0, [r1, #0]
 8005dbc:	0628      	lsls	r0, r5, #24
 8005dbe:	d501      	bpl.n	8005dc4 <_printf_i+0xec>
 8005dc0:	681d      	ldr	r5, [r3, #0]
 8005dc2:	e002      	b.n	8005dca <_printf_i+0xf2>
 8005dc4:	0669      	lsls	r1, r5, #25
 8005dc6:	d5fb      	bpl.n	8005dc0 <_printf_i+0xe8>
 8005dc8:	881d      	ldrh	r5, [r3, #0]
 8005dca:	4854      	ldr	r0, [pc, #336]	; (8005f1c <_printf_i+0x244>)
 8005dcc:	2f6f      	cmp	r7, #111	; 0x6f
 8005dce:	bf0c      	ite	eq
 8005dd0:	2308      	moveq	r3, #8
 8005dd2:	230a      	movne	r3, #10
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dda:	6866      	ldr	r6, [r4, #4]
 8005ddc:	60a6      	str	r6, [r4, #8]
 8005dde:	2e00      	cmp	r6, #0
 8005de0:	bfa2      	ittt	ge
 8005de2:	6821      	ldrge	r1, [r4, #0]
 8005de4:	f021 0104 	bicge.w	r1, r1, #4
 8005de8:	6021      	strge	r1, [r4, #0]
 8005dea:	b90d      	cbnz	r5, 8005df0 <_printf_i+0x118>
 8005dec:	2e00      	cmp	r6, #0
 8005dee:	d04d      	beq.n	8005e8c <_printf_i+0x1b4>
 8005df0:	4616      	mov	r6, r2
 8005df2:	fbb5 f1f3 	udiv	r1, r5, r3
 8005df6:	fb03 5711 	mls	r7, r3, r1, r5
 8005dfa:	5dc7      	ldrb	r7, [r0, r7]
 8005dfc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e00:	462f      	mov	r7, r5
 8005e02:	42bb      	cmp	r3, r7
 8005e04:	460d      	mov	r5, r1
 8005e06:	d9f4      	bls.n	8005df2 <_printf_i+0x11a>
 8005e08:	2b08      	cmp	r3, #8
 8005e0a:	d10b      	bne.n	8005e24 <_printf_i+0x14c>
 8005e0c:	6823      	ldr	r3, [r4, #0]
 8005e0e:	07df      	lsls	r7, r3, #31
 8005e10:	d508      	bpl.n	8005e24 <_printf_i+0x14c>
 8005e12:	6923      	ldr	r3, [r4, #16]
 8005e14:	6861      	ldr	r1, [r4, #4]
 8005e16:	4299      	cmp	r1, r3
 8005e18:	bfde      	ittt	le
 8005e1a:	2330      	movle	r3, #48	; 0x30
 8005e1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e20:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e24:	1b92      	subs	r2, r2, r6
 8005e26:	6122      	str	r2, [r4, #16]
 8005e28:	f8cd a000 	str.w	sl, [sp]
 8005e2c:	464b      	mov	r3, r9
 8005e2e:	aa03      	add	r2, sp, #12
 8005e30:	4621      	mov	r1, r4
 8005e32:	4640      	mov	r0, r8
 8005e34:	f7ff fee2 	bl	8005bfc <_printf_common>
 8005e38:	3001      	adds	r0, #1
 8005e3a:	d14c      	bne.n	8005ed6 <_printf_i+0x1fe>
 8005e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e40:	b004      	add	sp, #16
 8005e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e46:	4835      	ldr	r0, [pc, #212]	; (8005f1c <_printf_i+0x244>)
 8005e48:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e4c:	6823      	ldr	r3, [r4, #0]
 8005e4e:	680e      	ldr	r6, [r1, #0]
 8005e50:	061f      	lsls	r7, r3, #24
 8005e52:	f856 5b04 	ldr.w	r5, [r6], #4
 8005e56:	600e      	str	r6, [r1, #0]
 8005e58:	d514      	bpl.n	8005e84 <_printf_i+0x1ac>
 8005e5a:	07d9      	lsls	r1, r3, #31
 8005e5c:	bf44      	itt	mi
 8005e5e:	f043 0320 	orrmi.w	r3, r3, #32
 8005e62:	6023      	strmi	r3, [r4, #0]
 8005e64:	b91d      	cbnz	r5, 8005e6e <_printf_i+0x196>
 8005e66:	6823      	ldr	r3, [r4, #0]
 8005e68:	f023 0320 	bic.w	r3, r3, #32
 8005e6c:	6023      	str	r3, [r4, #0]
 8005e6e:	2310      	movs	r3, #16
 8005e70:	e7b0      	b.n	8005dd4 <_printf_i+0xfc>
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	f043 0320 	orr.w	r3, r3, #32
 8005e78:	6023      	str	r3, [r4, #0]
 8005e7a:	2378      	movs	r3, #120	; 0x78
 8005e7c:	4828      	ldr	r0, [pc, #160]	; (8005f20 <_printf_i+0x248>)
 8005e7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e82:	e7e3      	b.n	8005e4c <_printf_i+0x174>
 8005e84:	065e      	lsls	r6, r3, #25
 8005e86:	bf48      	it	mi
 8005e88:	b2ad      	uxthmi	r5, r5
 8005e8a:	e7e6      	b.n	8005e5a <_printf_i+0x182>
 8005e8c:	4616      	mov	r6, r2
 8005e8e:	e7bb      	b.n	8005e08 <_printf_i+0x130>
 8005e90:	680b      	ldr	r3, [r1, #0]
 8005e92:	6826      	ldr	r6, [r4, #0]
 8005e94:	6960      	ldr	r0, [r4, #20]
 8005e96:	1d1d      	adds	r5, r3, #4
 8005e98:	600d      	str	r5, [r1, #0]
 8005e9a:	0635      	lsls	r5, r6, #24
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	d501      	bpl.n	8005ea4 <_printf_i+0x1cc>
 8005ea0:	6018      	str	r0, [r3, #0]
 8005ea2:	e002      	b.n	8005eaa <_printf_i+0x1d2>
 8005ea4:	0671      	lsls	r1, r6, #25
 8005ea6:	d5fb      	bpl.n	8005ea0 <_printf_i+0x1c8>
 8005ea8:	8018      	strh	r0, [r3, #0]
 8005eaa:	2300      	movs	r3, #0
 8005eac:	6123      	str	r3, [r4, #16]
 8005eae:	4616      	mov	r6, r2
 8005eb0:	e7ba      	b.n	8005e28 <_printf_i+0x150>
 8005eb2:	680b      	ldr	r3, [r1, #0]
 8005eb4:	1d1a      	adds	r2, r3, #4
 8005eb6:	600a      	str	r2, [r1, #0]
 8005eb8:	681e      	ldr	r6, [r3, #0]
 8005eba:	6862      	ldr	r2, [r4, #4]
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	4630      	mov	r0, r6
 8005ec0:	f7fa f996 	bl	80001f0 <memchr>
 8005ec4:	b108      	cbz	r0, 8005eca <_printf_i+0x1f2>
 8005ec6:	1b80      	subs	r0, r0, r6
 8005ec8:	6060      	str	r0, [r4, #4]
 8005eca:	6863      	ldr	r3, [r4, #4]
 8005ecc:	6123      	str	r3, [r4, #16]
 8005ece:	2300      	movs	r3, #0
 8005ed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ed4:	e7a8      	b.n	8005e28 <_printf_i+0x150>
 8005ed6:	6923      	ldr	r3, [r4, #16]
 8005ed8:	4632      	mov	r2, r6
 8005eda:	4649      	mov	r1, r9
 8005edc:	4640      	mov	r0, r8
 8005ede:	47d0      	blx	sl
 8005ee0:	3001      	adds	r0, #1
 8005ee2:	d0ab      	beq.n	8005e3c <_printf_i+0x164>
 8005ee4:	6823      	ldr	r3, [r4, #0]
 8005ee6:	079b      	lsls	r3, r3, #30
 8005ee8:	d413      	bmi.n	8005f12 <_printf_i+0x23a>
 8005eea:	68e0      	ldr	r0, [r4, #12]
 8005eec:	9b03      	ldr	r3, [sp, #12]
 8005eee:	4298      	cmp	r0, r3
 8005ef0:	bfb8      	it	lt
 8005ef2:	4618      	movlt	r0, r3
 8005ef4:	e7a4      	b.n	8005e40 <_printf_i+0x168>
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	4632      	mov	r2, r6
 8005efa:	4649      	mov	r1, r9
 8005efc:	4640      	mov	r0, r8
 8005efe:	47d0      	blx	sl
 8005f00:	3001      	adds	r0, #1
 8005f02:	d09b      	beq.n	8005e3c <_printf_i+0x164>
 8005f04:	3501      	adds	r5, #1
 8005f06:	68e3      	ldr	r3, [r4, #12]
 8005f08:	9903      	ldr	r1, [sp, #12]
 8005f0a:	1a5b      	subs	r3, r3, r1
 8005f0c:	42ab      	cmp	r3, r5
 8005f0e:	dcf2      	bgt.n	8005ef6 <_printf_i+0x21e>
 8005f10:	e7eb      	b.n	8005eea <_printf_i+0x212>
 8005f12:	2500      	movs	r5, #0
 8005f14:	f104 0619 	add.w	r6, r4, #25
 8005f18:	e7f5      	b.n	8005f06 <_printf_i+0x22e>
 8005f1a:	bf00      	nop
 8005f1c:	08006375 	.word	0x08006375
 8005f20:	08006386 	.word	0x08006386

08005f24 <_read_r>:
 8005f24:	b538      	push	{r3, r4, r5, lr}
 8005f26:	4d07      	ldr	r5, [pc, #28]	; (8005f44 <_read_r+0x20>)
 8005f28:	4604      	mov	r4, r0
 8005f2a:	4608      	mov	r0, r1
 8005f2c:	4611      	mov	r1, r2
 8005f2e:	2200      	movs	r2, #0
 8005f30:	602a      	str	r2, [r5, #0]
 8005f32:	461a      	mov	r2, r3
 8005f34:	f7fa fa4a 	bl	80003cc <_read>
 8005f38:	1c43      	adds	r3, r0, #1
 8005f3a:	d102      	bne.n	8005f42 <_read_r+0x1e>
 8005f3c:	682b      	ldr	r3, [r5, #0]
 8005f3e:	b103      	cbz	r3, 8005f42 <_read_r+0x1e>
 8005f40:	6023      	str	r3, [r4, #0]
 8005f42:	bd38      	pop	{r3, r4, r5, pc}
 8005f44:	200001cc 	.word	0x200001cc

08005f48 <_fstat_r>:
 8005f48:	b538      	push	{r3, r4, r5, lr}
 8005f4a:	4d07      	ldr	r5, [pc, #28]	; (8005f68 <_fstat_r+0x20>)
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	4604      	mov	r4, r0
 8005f50:	4608      	mov	r0, r1
 8005f52:	4611      	mov	r1, r2
 8005f54:	602b      	str	r3, [r5, #0]
 8005f56:	f7fb fbf3 	bl	8001740 <_fstat>
 8005f5a:	1c43      	adds	r3, r0, #1
 8005f5c:	d102      	bne.n	8005f64 <_fstat_r+0x1c>
 8005f5e:	682b      	ldr	r3, [r5, #0]
 8005f60:	b103      	cbz	r3, 8005f64 <_fstat_r+0x1c>
 8005f62:	6023      	str	r3, [r4, #0]
 8005f64:	bd38      	pop	{r3, r4, r5, pc}
 8005f66:	bf00      	nop
 8005f68:	200001cc 	.word	0x200001cc

08005f6c <_isatty_r>:
 8005f6c:	b538      	push	{r3, r4, r5, lr}
 8005f6e:	4d06      	ldr	r5, [pc, #24]	; (8005f88 <_isatty_r+0x1c>)
 8005f70:	2300      	movs	r3, #0
 8005f72:	4604      	mov	r4, r0
 8005f74:	4608      	mov	r0, r1
 8005f76:	602b      	str	r3, [r5, #0]
 8005f78:	f7fb fbf2 	bl	8001760 <_isatty>
 8005f7c:	1c43      	adds	r3, r0, #1
 8005f7e:	d102      	bne.n	8005f86 <_isatty_r+0x1a>
 8005f80:	682b      	ldr	r3, [r5, #0]
 8005f82:	b103      	cbz	r3, 8005f86 <_isatty_r+0x1a>
 8005f84:	6023      	str	r3, [r4, #0]
 8005f86:	bd38      	pop	{r3, r4, r5, pc}
 8005f88:	200001cc 	.word	0x200001cc

08005f8c <_init>:
 8005f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8e:	bf00      	nop
 8005f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f92:	bc08      	pop	{r3}
 8005f94:	469e      	mov	lr, r3
 8005f96:	4770      	bx	lr

08005f98 <_fini>:
 8005f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9a:	bf00      	nop
 8005f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f9e:	bc08      	pop	{r3}
 8005fa0:	469e      	mov	lr, r3
 8005fa2:	4770      	bx	lr
